<!DOCTYPE html><html><head><title>DockYard</title><link href="/stylesheets/all-6e6b059f.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-ce68a29a.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta charset='utf-8'><meta content='DockYard.com - ' name='description'><link href='//cloud.typography.com/6496052/702882/css/fonts.css' rel='stylesheet' type='text/css'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/favicon.png' rel='shortcut icon' type='image/x-icon'><link href='/favicon.png' rel='icon' type='image/x-icon'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                             ..
                                           .O.
                                       .:OO.
                                      :OOO.
                                    :OOO:.
                         ...      :OOOO:
                   ..ZOOOOOOOOO..OZ.O.
                   OOOOOOOOOOOOOOOOI
                  OOOOOOOOOOOOOOOOI,
                 OOOOOOOO. .OOOOOOOO:
                 OOOOOOOO   OOOOOOOOO:
                OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO
                OOOOOO?:   .OOOOOOOOO
               .OOOOO      OOOOOOOOOO
,OO ZO,        OOOOO,     OOOOOOOOOO+
 OOOOO.        OOOOO     OOOOOOOOOOO+
  OOO?        OOOOO     .OOOOOOOOOOO:
   OOO,      OOOOO.    .OOOOOOOOOOOO
    OOOOOOOOOOOOO.    .OOOOOOOOOOOO.
     OOOOOOOOOOOO.  .OOOOOOOOOOOOO.
      8OOOOOOOOOOOOOOOOOOOOOOOODO:
         :OOOOOOOOOOOOOOOOOOOO::

--></head><body class='feed'><header><div class='extended-nav-wrap'><div class='l-wrap--wide'><nav class='extended-nav'><a class="extended-nav--logo" data-icon="⌂" href="http://dockyard.com/"><span class='is-hidden'>Home</span></a>
<a class="extended-nav--close" data-icon="X" href="#"><span class='is-hidden'>Close</span></a><div class='extended-nav__items'><div class='extended-nav__items--mobile'><a class="extended-nav__item--work extended-nav__item" href="#">Work</a><nav class='work-nav--mobile'><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong></a></nav></div><a class="extended-nav__item" href="http://dockyard.com/team">Our Team</a><a class="extended-nav__item" href="http://dockyard.com/process">Process</a><a class="extended-nav__item" href="http://dockyard.com/community">Community</a><a class="extended-nav__item active" href="/">Blog</a><a class="extended-nav__item" href="http://dockyard.com/hire-us">Hire Us</a></div></nav><nav class='work-nav'><h6>Selected Work</h6><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong><p>Credit card advice from real people.</p></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong><p>You should be training. Right now.</p></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong><p>Ask officials questions on city, state, and federal levels.</p></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong><p>How technology helped repeal the #TechTax.</p></a></nav></div></div><nav class='main-nav-wrap'><div class='main-nav l-wrap--wide'><a class="logo" href="http://dockyard.com">DockYard</a><a class="club-sandwich" data-icon="☰" href="#"><span class='is-hidden'>Navigation</span></a></div></nav></header><div class='push--header'></div><div class='l-wrap--blog'><a href="/"><strong class='logo--blog'>ReefPoints</strong><strong class='logo--blog__tagline'>Blog</strong></a><nav class='blog-nav'><a class="blog-nav__item " href="/">Posts</a><a class="blog-nav__item " href="/categories.html">Categories</a><a class="blog-nav__item " href="/authors.html">Authors</a></nav></div><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-04-29T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>The problem with server-rendered errors</title>
    <link rel="alternate" href="/2014/04/29/the-problem-with-server-rendered-errors.html"/>
    <id>/2014/04/29/the-problem-with-server-rendered-errors.html</id>
    <published>2014-04-29T00:00:00Z</published>
    <updated>2014-04-29T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The 3rd most popular question with
&lt;a href="https://github.com/dockyard/ember-validations"&gt;ember-validations&lt;/a&gt; is
how can the library work with server-rendered validation errors, such as
the ones returned with &lt;a href="https://github.com/emberjs/data"&gt;ember-data&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The short answer for now: it can&amp;#39;t.&lt;/p&gt;

&lt;p&gt;(btw, 2nd most popular question is about &lt;code&gt;uniqueness&lt;/code&gt;/remote validations
and the 1st most popular question is when will I provide a &lt;code&gt;dist/&lt;/code&gt;
directory... I&amp;#39;ll cover the 2nd Q in an upcoming blog post. As far as
&lt;code&gt;dist/&lt;/code&gt; its never going to happen, ever)&lt;/p&gt;

&lt;p&gt;Here is the problem. When you are dealing with a client-side model and a
server-rendered model there won&amp;#39;t always be a 1-to-1 representation of the
model. In those cases you can rely on ember-data&amp;#39;s serializer to
transform the properties on a server-rendered error object to ones that
exist on the client data model. How about properties that don&amp;#39;t exist at
all in any form on the client? You could have a validation error on
something only meant for server-rendered purposes. How do we best handle
this?&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s imagine for a moment that we can properly map all the properties
back to their client-side equivalents. Now what? How do you resolve
these validation errors? How do you know in the UI when the validation
error has been resolved to clear the error message? Are you preventing data
submission until your client model is valid? If the errors are happening
server-side the odds are high that these are not validations that can be
known to be resolved on the client unless you do another data
submission and wait to see how the server responds.&lt;/p&gt;

&lt;p&gt;So to re-cap the two isses are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Potential lack of context on which properties errors can map back to&lt;/li&gt;
&lt;li&gt;Inability to know when server-rendered validation errors are
satisfied on the client&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To start to consider a possible solution I think we need to step back
and consider the ultimate goal of client side validations. In my mind
this is puropse: &lt;em&gt;to help the user submit valid data to the server&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Client side validations are just UI sugar. They are there to guide your
users. ember-validations only has model-layer concerns, which means you
have to provide how the validation errors are displayed on your UI. This
is why I also wrote
&lt;a href="https://github.com/dockyard/ember-easyForm"&gt;ember-easyForm&lt;/a&gt; which
handles the complexity of what I consider to be best practices of how
validation messages should be displayed and cleared. To fix this problem
would have to tackle it from both sides:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How will server-rendered errors be stored in the validation graph?
(ember-validations)&lt;/li&gt;
&lt;li&gt;How will server-rendered errors be displayed and resolved in the client?
(ember-easyForm)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Storing server-rendered errors&lt;/h3&gt;

&lt;p&gt;If you are already using ember-data then your data model is handling
this for you already. IMO you should never mix your validations into
your data model, they should be mixed into your controller:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; UserController =
Ember.ObjectController.extend(Ember.Validations.Mixin, {
  &lt;span class="key"&gt;validations&lt;/span&gt;: {
    &lt;span class="key"&gt;firstName&lt;/span&gt;: {
      &lt;span class="key"&gt;presence&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
    }
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This way the controller has its own &lt;code&gt;errors&lt;/code&gt; object which will not clash
with the &lt;code&gt;errors&lt;/code&gt; object on your data model. One possiblity of
referencing the model&amp;#39;s server-rendered errors is to have a &lt;code&gt;base&lt;/code&gt;
validator that is not part of the validaiton graph but who&amp;#39;s errors can
be used for presentation purposes.&lt;/p&gt;

&lt;h3&gt;Displaying server-rendered errors&lt;/h3&gt;

&lt;p&gt;So how do you properly display these error messages? Do you try to
associate them with a property? What if that property is not represented
by a form input? What if you aren&amp;#39;t even using a form? How do you know
when to clear the errors?&lt;/p&gt;

&lt;p&gt;I believe this is a complex issue. My first pass at handling this in
EasyForm will be to display all of the server-rendered errors in a
single place. An upcoming version of EasyForm will simply group all
errors in &lt;code&gt;base&lt;/code&gt; and display them. These errors will not clear out due
to any corrections made by the client. They will only clear when some
other action clears out those errors, for example when ember-data itself
clears out or changes the content of its &lt;code&gt;errors&lt;/code&gt; object.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This is far from ideal. This moves us away from the &amp;quot;best practices&amp;quot; for
&lt;a href="http://alistapart.com/article/inline-validation-in-web-forms"&gt;high conversion forms outlined by Luke
Wroblewski&lt;/a&gt;.
But it is better than not guiding your users. If the server errors for
any given reason we don&amp;#39;t want our users sitting there without any
feedback.&lt;/p&gt;

&lt;p&gt;I am very interested in other approaches and brainstorming on the best
direction for this. Please feel free to comment below.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The first two months at DockYard</title>
    <link rel="alternate" href="/2014/04/28/first-few-months.html"/>
    <id>/2014/04/28/first-few-months.html</id>
    <published>2014-04-28T00:00:00Z</published>
    <updated>2014-04-28T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;The first two months at DockYard.&lt;/h1&gt;

&lt;p&gt;Recurring themes, and principles I learned in breaking into user experience design.&lt;/p&gt;

&lt;h2&gt;Invisible&lt;/h2&gt;

&lt;p&gt;The way I see websites has changed after a month and a half of paying attention to website UI. One thing that stands out: good design can support the message and content in a quiet, almost invisible way. This principle applies in all areas of design, but I am particularly focusing on elegant solutions in web interfaces. It is a pleasure to observe, and sometimes find myself, effective use of subtle visual changes. &lt;/p&gt;

&lt;p&gt;The principle of quiet, effective solutions comes up most often when my work-in-progress is reviewed by the whole team. In most cases, I find that I start a design with many elements in a very “loud” state, then evaluate the entire layout. Once I can prioritize things on the page, most elements can become more “quiet”.&lt;/p&gt;

&lt;h2&gt;Design for a typical case, not the worst case.&lt;/h2&gt;

&lt;p&gt;Before DockYard, my process relied heavily on finding out what the worst-case scenario could be, and designing for that. For example, I would consider a very long, but still plausible, title for an article, and then design the header to accommodate that comfortably. I’d always consider extreme cases early on, and design heavily around those. &lt;/p&gt;

&lt;p&gt;At DockYard, I learned to design for the typical use case, and then consider how an extreme case would be accommodated. Looking back, I realize that this approach is less limiting and can result in better graphical solutions.&lt;/p&gt;

&lt;h2&gt;Information density&lt;/h2&gt;

&lt;p&gt;Different use cases call for different densities of information. &lt;/p&gt;

&lt;p&gt;When you are scanning through many search results, it is sometimes appropriate to show a lot of detail at once. Search results are basically many repetitions of one type of item. Users may want to compare what they see according to different criteria, and it is useful to neatly show many details about each result. If I’ve done a good job prioritizing the detailed information, many details do not cause clutter.&lt;/p&gt;

&lt;p&gt;In other cases, it is more important to convey the atmosphere around a brand, or to highlight one or two primary actions. Showing fewer items and fewer details can work better.  In these cases, the density of information may appear low, but each element has more prominence.&lt;/p&gt;

&lt;p&gt;I can make good progress towards solving the layout of a page by deciding whether it is a detailed type of page (like search results) or a page focused on emotional impact, but not details (like some landing pages).&lt;/p&gt;

&lt;h2&gt;Does it look “real”?&lt;/h2&gt;

&lt;p&gt;Design is often about deciding what kind of animal a chunk of information will be. Through visual design, we have to clearly answer questions like “how important is this thing, relative to others?”, “what can I do with this?” and even “what kind of thing is it?”. When I show a draft in a design review, I can see how the suggested changes “snap” to something that looks more real and interactive. I believe that the ability to make things look real quickly comes from experience, and also from paying attention to how user interface elements are crafted in products I use every day.&lt;/p&gt;

&lt;p&gt;Through regular design reviews, close observation of UI design, and occasional experiments, I hope to continue improving my ability to judge my own work. This will allow for more efficient work, more refined design, and more awesomeness in the future.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Don't override init</title>
    <link rel="alternate" href="/2014/04/28/dont-override-init.html"/>
    <id>/2014/04/28/dont-override-init.html</id>
    <published>2014-04-28T00:00:00Z</published>
    <updated>2014-04-28T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Too frequently I see the following problem. Someone creates a new
class and overrides &lt;code&gt;init&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; UsersController = Ember.ArrayController.extend({
  &lt;span class="function"&gt;init&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// some custom stuff&lt;/span&gt;
  }
})

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; UsersController;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;init&lt;/code&gt; is a popular function to override because it is automatically run
after the object is instantiated. It is the only lifecycle hook for
&lt;code&gt;Ember.Object&lt;/code&gt;, subclasses of &lt;code&gt;Ember.Object&lt;/code&gt; add their own hooks to the
lifecycle but the only one that is guaranteed to be there is &lt;code&gt;init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem is with the above example
the controller is broken. I forgot to make a call to &lt;code&gt;this._super()&lt;/code&gt;
which will call the original &lt;code&gt;init&lt;/code&gt; from &lt;code&gt;Ember.ArrayController&lt;/code&gt;. That
&lt;code&gt;init&lt;/code&gt; assigns the proper value to &lt;code&gt;content&lt;/code&gt;. (via &lt;code&gt;ArrayProxy&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Instead of overriding &lt;code&gt;init&lt;/code&gt; I have been writing functions that are
specific to the logic I want to kick off on object instantiation and
have that function trigger &lt;code&gt;on(&amp;#39;init&amp;#39;)&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; UsersController = Ember.ArrayController.extend({
  &lt;span class="function"&gt;doSomething&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// some custom stuff&lt;/span&gt;
  }.on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;init&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
})

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; UsersController;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now I don&amp;#39;t risk messing with the original behavior of the parent class.&lt;/p&gt;

&lt;p&gt;Calling up the &lt;code&gt;super&lt;/code&gt; chain is a powerful and important feature in
Ember but too often I was forgetting to call it. Now the only time I find
myself overriding &lt;code&gt;init&lt;/code&gt; is if I want to &lt;strong&gt;disrupt&lt;/strong&gt; the default instantiating
behavior of the object.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Artist: Ryo Takemasa</title>
    <link rel="alternate" href="/2014/04/25/ryo-takemasa.html"/>
    <id>/2014/04/25/ryo-takemasa.html</id>
    <published>2014-04-25T00:00:00Z</published>
    <updated>2014-04-25T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Artist: Ryo Takemasa&lt;/h1&gt;

&lt;p&gt;If you’re not using Pinterest yet to collect various reference material and inspirational artists, may I suggest doing so immediately? I typically like to keep a huge assortment of “mood boards” on various topics, ranging from product designs to comic books to grandiose natural landscape photography. It serves as an endless source of reference material, much like collecting magazine clippings and organizing them in various folders. Not only is it great for collecting all of the art you love in one place, it’s also a great platform for discovering new artists. A list of suggestions titled, “other pins like...” is displayed below the piece you’re currently viewing. This often times leads me down an endless tunnel of discovery - one that typically keeps me digging a hole into the wee hours of the morning. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://24.media.tumblr.com/tumblr_mbi1kuOUHp1rfdswao1_500.jpg" alt="“Cucumbers” by Ryo Takemasa"&gt;&lt;/p&gt;

&lt;p&gt;During one of these excavations, I discovered the artist &lt;a href="http://ryotakemasa.com/"&gt;Ryo Takemasa&lt;/a&gt;, who I at first mistook as &lt;a href="http://en.wikipedia.org/wiki/Charley_Harper"&gt;Charley Harper&lt;/a&gt;. The piece I saw was a series of stand alone fruits and vegetables, most of them cut in half to expose their cross section, which all shared a beautiful mixture of what appeared to be wood block print and cut paper. Their geometric and pattern infused forms created lovely shapes alongside color shifts that I’d typically only see in particular vintage illustrations. Accompanying this pin was a link to his site. It turns out he’s a modern Japanese illustrator who works primarily in the print world for a variety of publications. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://24.media.tumblr.com/67de982b360a312ab4d4623f544ba118/tumblr_mg1q8u60Ra1rfdswao1_500.jpg" alt="“Yellow Pepper” by Ryo Takemasa"&gt;&lt;/p&gt;

&lt;p&gt;Once I discovered this, I began to see the Japanese line work and &lt;a href="https://www.google.com/search?q=Japanese+wood+block+print&amp;amp;safe=active&amp;amp;es_sm=91&amp;amp;espv=210&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ei=o__0UuZd5anRAdv0gJgP&amp;amp;ved=0CAgQ_AUoAg&amp;amp;biw=2840&amp;amp;bih=1495&amp;amp;dpr=0.9"&gt;wood block printing&lt;/a&gt; aesthetics shine through in his work. The geometric forms and subtle color transparencies were clearly influenced by Japanese culture, but they still retained that vintage American aesthetic at times as well.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://24.media.tumblr.com/tumblr_m9xfe6iAqI1rfdswao1_500.jpg" alt="“Onion” by Ryo Takemasa"&gt;&lt;/p&gt;

&lt;p&gt;I’d be curious to learn what amount of influence Charley Harper’s art had on the world and whether it was a huge influence everywhere, such as territories in Japan. Similarly I would also like to know the amount of influence, if any, ancient Japanese wood block printing had on Charley Harper. Was it a conscious decision or had it inadvertently shown through? If there had been a direct influence, that would significantly alter my view of someone who I’ve alway seen as having emerged purely from American Modernist abstraction. Either way, it’s amazing to think that two people, so separated by distance, culture and era could have produced such distinct, yet aesthetically similar artwork. As is the beauty of influence in this world. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember Object Self Troll</title>
    <link rel="alternate" href="/2014/04/17/ember-object-self-troll.html"/>
    <id>/2014/04/17/ember-object-self-troll.html</id>
    <published>2014-04-17T00:00:00Z</published>
    <updated>2014-04-17T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Let&amp;#39;s say we have a &lt;code&gt;Month&lt;/code&gt; object. A &lt;code&gt;Month&lt;/code&gt; has &lt;code&gt;weeks&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; Month = Ember.Object.extend({
  &lt;span class="key"&gt;weeks&lt;/span&gt;: Em.A()
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Consider the following code:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; a = Month.create();
&lt;span class="keyword"&gt;var&lt;/span&gt; b = Month.create();

console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;before a&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, a.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)); &lt;span class="comment"&gt;// =&amp;gt; []&lt;/span&gt;
console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;before b&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, b.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)); &lt;span class="comment"&gt;// =&amp;gt; []&lt;/span&gt;

a.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).pushObject(&lt;span class="integer"&gt;1&lt;/span&gt;);
a.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).pushObject(&lt;span class="integer"&gt;2&lt;/span&gt;);

console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;after a&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, a.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)); &lt;span class="comment"&gt;// =&amp;gt; [1, 2], as you expect&lt;/span&gt;
console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;after b&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, b.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)); &lt;span class="comment"&gt;// =&amp;gt; [1, 2], and you're like O_o&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And another one:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; Month = Ember.Object.extend({
  &lt;span class="key"&gt;weeks&lt;/span&gt;: Em.A()
});

&lt;span class="keyword"&gt;var&lt;/span&gt; a = Month.create({ &lt;span class="key"&gt;weeks&lt;/span&gt;: Em.A([&lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="integer"&gt;2&lt;/span&gt;]) });
&lt;span class="keyword"&gt;var&lt;/span&gt; b = Month.create();

console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, a.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)); &lt;span class="comment"&gt;// =&amp;gt; [1, 2]&lt;/span&gt;
console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;b&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, b.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)); &lt;span class="comment"&gt;// =&amp;gt; []&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The results of the first example are quite surprising, if you are not used
to the prototypical inheritance.&lt;/p&gt;

&lt;p&gt;So what&amp;#39;s going on there? Let&amp;#39;s take a look at the &amp;quot;very scary&amp;quot; Ember.js &lt;code&gt;create&lt;/code&gt; &lt;a href="https://github.com/emberjs/ember.js/blob/master/packages_es6/ember-metal/lib/platform.js#L39-L52"&gt;function&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="function"&gt;create&lt;/span&gt; = &lt;span class="keyword"&gt;function&lt;/span&gt;(obj, props) {
  K.prototype = obj;
  obj = &lt;span class="keyword"&gt;new&lt;/span&gt; K();
  &lt;span class="keyword"&gt;if&lt;/span&gt; (props) {
    K.prototype = obj;
    &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;var&lt;/span&gt; prop &lt;span class="keyword"&gt;in&lt;/span&gt; props) {
      K.prototype[prop] = props[prop].value;
    }
    obj = &lt;span class="keyword"&gt;new&lt;/span&gt; K();
  }
  K.prototype = &lt;span class="predefined-constant"&gt;null&lt;/span&gt;;

  &lt;span class="keyword"&gt;return&lt;/span&gt; obj;
};
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When you don&amp;#39;t pass any properties to create (&lt;code&gt;props&lt;/code&gt;), all instances of
the &lt;code&gt;Object&lt;/code&gt; will share the same prototype. That&amp;#39;s pretty much the gist
of the prototypical inheritance. It means that any changes on one object will
reflect on the others. That explains the behaviour in the first example.&lt;/p&gt;

&lt;p&gt;If you pass the properties (that ones that you specified at &lt;code&gt;extend&lt;/code&gt; time) to &lt;code&gt;create&lt;/code&gt;,
they are going to be replaced on the instance&amp;#39;s prototype.&lt;/p&gt;

&lt;p&gt;There are two ways of changing the default behavior:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;turn &lt;code&gt;weeks&lt;/code&gt; into a &lt;a href="http://reefpoints.dockyard.com/2013/09/04/computed_properties_in_ember_js.html"&gt;Computed Property&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;set &lt;code&gt;weeks&lt;/code&gt; on &lt;code&gt;init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using computed property:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; Month = Ember.Object.extend({
  &lt;span class="key"&gt;weeks&lt;/span&gt;: Ember.computed(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; Em.A();
  })
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this case, &lt;code&gt;weeks&lt;/code&gt; is going to return a new &lt;code&gt;Ember.Array&lt;/code&gt; on &lt;code&gt;get&lt;/code&gt;.
The code will run as you expect, &lt;code&gt;weeks&lt;/code&gt; are not going to be shared.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;init&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; Month = Ember.Object.extend({
  &lt;span class="key"&gt;weeks&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,

  &lt;span class="function"&gt;init&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;._super();
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, Em.A());
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is very clear and nice technique if you&amp;#39;re not familiar with computed properties.
Overriding &lt;code&gt;init&lt;/code&gt; and calling &lt;code&gt;super&lt;/code&gt; allows to run code upon the object&amp;#39;s creation.
You can set the value for &lt;code&gt;weeks&lt;/code&gt; there.&lt;/p&gt;

&lt;p&gt;You can also use &lt;code&gt;on(&amp;#39;init&amp;#39;)&lt;/code&gt; but it&amp;#39;s discouraged because a subclass can provide
its own implementation of &lt;code&gt;setWeeks&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; Month = Ember.Object.extend({
  &lt;span class="function"&gt;setWeeks&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, Em.A());
  }.on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;init&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Vim: On Your Mark...</title>
    <link rel="alternate" href="/2014/04/10/vim-on-your-mark.html"/>
    <id>/2014/04/10/vim-on-your-mark.html</id>
    <published>2014-04-10T00:00:00Z</published>
    <updated>2014-04-10T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The strength of Vim&amp;#39;s basic &lt;strong&gt;movement&lt;/strong&gt; commands are immediately apparent.
We can jump four words over with &lt;code&gt;4w&lt;/code&gt; or move to the beginning
of a sentence with &lt;code&gt;(&lt;/code&gt;. Once these movements are engrained to muscle memory,
we can move within files with ease. However, there are certain limitations
to these basic movement commands; wouldn&amp;#39;t it be great if we could move
to different and specific spots within multiple files?&lt;/p&gt;

&lt;p&gt;Today, we&amp;#39;re going to briefly cover a poweful motion strategy:
&lt;strong&gt;mark&lt;/strong&gt; motion.&lt;/p&gt;

&lt;h2&gt;What is a Mark?&lt;/h2&gt;

&lt;p&gt;Marks are essentially &lt;em&gt;hidden&lt;/em&gt; positions that, when set, allow us to
jump back to that specific location or line. What we mean by &lt;em&gt;hidden&lt;/em&gt; is that these marks
are not visible by default; marks are simply invisible points within a file.&lt;/p&gt;

&lt;p&gt;The mark motion command starts with hitting &lt;code&gt;m&lt;/code&gt; - &lt;code&gt;m&lt;/code&gt; for mark - and then setting
a &lt;strong&gt;destination marker&lt;/strong&gt; - either a lowercase letter or uppercase letter.
We&amp;#39;ll introduce the differences among the destination markers soon.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s start by covering a simple example of setting a &lt;strong&gt;lowercase mark&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;Example: Moving With A Lowercase Mark&lt;/h4&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;# ~/example1.txt

Here is Line 3
Here is Line 4
Here is Line 5

# On Line #3, use `mn` to set a mark on the letter `n` within the word `Line`.
# Move around the file.
# Go back to the previous mark by hitting: `n
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, in &lt;code&gt;Normal&lt;/code&gt; mode, move to Line #3. Place your cursor on the letter &lt;code&gt;n&lt;/code&gt;
within the word &lt;code&gt;Line&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, set a mark by hitting &lt;code&gt;m&lt;/code&gt; and then the lowercase letter
&lt;code&gt;n&lt;/code&gt;. &lt;code&gt;n&lt;/code&gt; is our lowercase &lt;strong&gt;destination marker&lt;/strong&gt;.
Congratulations, we&amp;#39;ve just set a &lt;strong&gt;lowercase mark&lt;/strong&gt;!
We could of used any lowercase character, but by using the letter &lt;code&gt;n&lt;/code&gt;, we&amp;#39;ve
setup a nice mnemonic device.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now move to Line #5. We&amp;#39;re going to move to our mark now.
Hit &lt;code&gt;`n&lt;/code&gt; - &lt;em&gt;backtick&lt;/em&gt; and &lt;code&gt;n&lt;/code&gt;, our previous destination marker.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Notice where our cursor is (&lt;em&gt;hint&lt;/em&gt;: it should be located on the letter &lt;code&gt;n&lt;/code&gt;
within the word &lt;code&gt;Line&lt;/code&gt;).
Huzzah, we are now back to our previous position within the file!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go back to Line #5.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, hit &lt;code&gt;&amp;#39;n&lt;/code&gt; - &lt;em&gt;single quote&lt;/em&gt; and &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We are now at the beginning of Line #3!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Jumps, Marks and a Few Commands&lt;/h2&gt;

&lt;p&gt;We know how to set a mark with &lt;code&gt;m&lt;/code&gt;, but let&amp;#39;s clarify the two types of mark jumps
and the different types of marks.&lt;/p&gt;

&lt;h2&gt;Two Types of Mark Jumps&lt;/h2&gt;

&lt;h3&gt;Backtick&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;`&amp;lt;mark&amp;gt;&lt;/code&gt; - The &lt;em&gt;backtick&lt;/em&gt; places our cursor directly on the mark.&lt;/p&gt;

&lt;h3&gt;Single Quote&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;#39;&amp;lt;mark&amp;gt;&lt;/code&gt; - The &lt;em&gt;single quote&lt;/em&gt; takes us to the first non-blank character of the
mark&amp;#39;s line.&lt;/p&gt;

&lt;h2&gt;Three Types of Marks&lt;/h2&gt;

&lt;h3&gt;Lowercase Marks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;a - z&lt;/strong&gt; - These marks preserve locations within a &lt;em&gt;single&lt;/em&gt; file. Each individual file
possesses 26 settable lowercase marks. Lowercase marks are valid as long as the file
remains in the buffer list. Furthermore, lowercase marks can be combined with other
operators.  For example, &lt;code&gt;c`n&lt;/code&gt;, will change everything between the cursor to the
mark, &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Uppercase Marks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;A - Z&lt;/strong&gt; - These marks preserve locations within &lt;em&gt;multiple&lt;/em&gt; files. Also known
as &lt;strong&gt;file marks&lt;/strong&gt;. These marks, which are shared among all files within the buffer list,
can be used to jump from file to file. File marks can only be used in combination with
operators if the mark is in the current file, i.e. when the current file opened contains
the global file mark.&lt;/p&gt;

&lt;h3&gt;Numbered Marks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;0 - 9&lt;/strong&gt; - Numbered marks cannot be set directly, instead they are created
automagically and used by the &lt;strong&gt;viminfo-file&lt;/strong&gt; (&lt;code&gt;:help viminfo-file&lt;/code&gt;).
Essentially, the numbered marks store the location of your cursor after closing Vim.
For example, mark &lt;code&gt;0&lt;/code&gt; returns the position of the cursor during your last Vim session,
while mark &lt;code&gt;1&lt;/code&gt; returns the next to last Vim session, and so forth.&lt;/p&gt;

&lt;h2&gt;Some Pertinent Commands&lt;/h2&gt;

&lt;h3&gt;Viewing current marks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;:marks {argument}&lt;/strong&gt; - &lt;strong&gt;:marks&lt;/strong&gt; will show you all current marks, their file location and
destination marker. We can pass in an &lt;em&gt;argument&lt;/em&gt; to view a range of marks between two marks.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;:marks aC&lt;/strong&gt; - will return all marks that are between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Deleting Marks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;:delm[arks] {marks}&lt;/strong&gt; - We can use &lt;code&gt;:delm&lt;/code&gt; or &lt;code&gt;:delmarks&lt;/code&gt; and then pass in marks
that we want to delete.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;:delm aAbB&lt;/strong&gt; - will delete marks labeled &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Okay, What&amp;#39;s So Cool About Marks?&lt;/h2&gt;

&lt;p&gt;Marks can speed up our navigation workflow! Here are a few examples:&lt;/p&gt;

&lt;h4&gt;Discussion: Editing One Large File With Lowercase Marks&lt;/h4&gt;

&lt;p&gt;I&amp;#39;ve found &lt;strong&gt;lowercase marks&lt;/strong&gt; extremely useful when editing multiple portions of
a file. Instead of using &lt;code&gt;CTRL+u&lt;/code&gt;, &lt;code&gt;CTRL+d&lt;/code&gt;, &lt;code&gt;H&lt;/code&gt;, or &lt;code&gt;L&lt;/code&gt; to move up and down
the file, you can set local marks at heavily treaded locations at jump back
and forth among them. Moveover, marks give us the ability to jump to an
exact location - &lt;em&gt;backtick&lt;/em&gt; - or to the beginning of the line - &lt;em&gt;single quote&lt;/em&gt;.&lt;/p&gt;

&lt;h4&gt;Example: Editing Multiple Files With Uppercase (File) Marks&lt;/h4&gt;

&lt;p&gt;When I first started using Vim (and began programming), I had multiple windows
open constantly on the monitor.  Not only does it quickly become cluttered,
remembering which file is which becomes hairy.&lt;/p&gt;

&lt;p&gt;Files marks to the rescue!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Here are three files we are want to work on. Let&amp;#39;s add some &lt;strong&gt;file marks&lt;/strong&gt;.
Just like lowercase marks, the actual uppercase letter we use does not matter
as long as it is unique.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# ~/sheep.rb&lt;/span&gt;

&lt;span class="comment"&gt;# On the word `speak`, place a file mark with `mS` - `S` for &amp;quot;sheep&amp;quot;&lt;/span&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;speak&lt;/span&gt;
  puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Baah! Baah!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# ~/cat.rb&lt;/span&gt;

&lt;span class="comment"&gt;# On the word `speak`, place a file mark with `mC` - `C` for &amp;quot;cat&amp;quot;&lt;/span&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;speak&lt;/span&gt;
  puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Meow! Meow!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# ~/doge.rb&lt;/span&gt;

&lt;span class="comment"&gt;# On the word `speak`, place a file mark with `mD` - `D` for &amp;quot;doge&amp;quot;&lt;/span&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;speak&lt;/span&gt;
  puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Wow! Ahh yes method! Such quality!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;If we are in &lt;code&gt;~/sheep.rb&lt;/code&gt; and want to jump to the &lt;code&gt;speak&lt;/code&gt; method defined
within &lt;code&gt;~/cat.rb&lt;/code&gt;, we can do so with &lt;code&gt;`C&lt;/code&gt;. Now that we&amp;#39;re in &lt;code&gt;~/cat.rb&lt;/code&gt;,
let&amp;#39;s go to the &lt;code&gt;speak&lt;/code&gt; method within &lt;code&gt;~/doge.rb&lt;/code&gt; with &lt;code&gt;`D&lt;/code&gt;.
Pretty sweet, huh?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&amp;quot;X&amp;quot; Marks the Spot&lt;/h2&gt;

&lt;p&gt;Hope you enjoyed the basics of Vim &lt;strong&gt;marks&lt;/strong&gt;. We&amp;#39;ve only covered the basics here, so if
you&amp;#39;d like to learn more check the docs.&lt;/p&gt;
</content>
  </entry>
</feed>
<div class='push--footer'></div><footer><div class='l-wrap'><div class='l-footer-group'><h3 class='footer-group__title'>EVENTS</h3><a class="footer__event--wgr" target="_blank" href="http://wickedgoodruby.com/">Wicked Good Ruby Conf</a><a class="footer__event--ember" target="_blank" href="http://www.meetup.com/Boston-Ember-js/">Boston Ember.js Meetup</a><a class="footer__event--ux" target="_blank" href="http://www.meetup.com/uxboston/">UX Boston Meetup</a><a class="footer__event--openhack" target="_blank" href="http://openhack.github.io/boston/">OpenHack Boston</a></div><div class='l-footer-group'><a href="/"><h3 class='footer-group__title'>BLOG</h3></a>
<a class="footer__post" href="/2014/04/29/the-problem-with-server-rendered-errors.html"><strong>The problem with server-rendered errors</strong><h6 class='footer-desc'>Handling validation errors returned from the server is no easy task</h6></a>
<a class="footer__post" href="/2014/04/28/first-few-months.html"><strong>The first two months at DockYard</strong><h6 class='footer-desc'>Recurring themes, and principles I learned in breaking into user experience design.</h6></a>
<a class="footer__post" href="/2014/04/28/dont-override-init.html"><strong>Don't override init</strong><h6 class='footer-desc'>Use events instead</h6></a></div><div class='l-footer-group'><a href="http://dockyard.com/hire-us"><h3 class='footer-group__title'>CONTACT</h3></a><h6 class='footer-desc'>DockYard HQ is located in Boston. Stop in sometime and meet our team!</h6><a class="footer__address" target="_blank" href="http://goo.gl/maps/zBGfn"><h6>DockYard Inc.<br>101 Tremont Street<br>Suite 200<br>Boston, MA 02108</h6></a>
<a class="text-link" href="http://dockyard.com/hire-us">Get in touch.</a><div class='social-links--footer'><a target="_blank" data-icon="#" class="social-link" href="https://twitter.com/dockyard"><span class='is-hidden'>Twitter</span></a>
<a target="_blank" data-icon="★" class="social-link" href="https://github.com/dockyard"><span class='is-hidden'>GitHub</span></a>
<a target="_blank" data-icon="✒" class="social-link" href="http://reefpoints.dockyard.com/atom.xml"><span class='is-hidden'>RSS</span></a></div></div></div></footer><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>