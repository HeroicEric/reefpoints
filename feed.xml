<!DOCTYPE html><html><head><title>DockYard ~ Ruby on Rails and Ember.js Development | Boston-based Web &amp; Mobile Software Consultancy</title><link href="/stylesheets/all-f943bf58.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-d0af4672.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta content='DockYard.com - ' name='description'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                                                    ..
                                                                 ,Z+O.
                                                              .OO.O..
                                                             OZ..O.
                                                         ..OO..87.
                                                        .O7O..O...
                                                      .O...Z~O.
                                                   .:Z~. ..Z..
                                                  +O.O   .8..
                                     ...       .OO.  O  O?.
                             ..ZOOOOOOOOOZOOO.ZOZ.   .OO..
                           .OOOOOOOOOOOOOOOOOO..Z.   $O.
                         .ZOOOOOOOOOOOOOOOOOO.  .O..O.
                        .ZOOOOOOOOOOOOOOOOOOOZ  .:O$.
                        OZOOOOOOOOOOO...OOOOOOOZ$ZO
                      ..OOOOOOOOOOOOO  .OOOOOOOOOOO..
                      .OOOOOOOOOOOOOOOOOOOOOOOOOOOOO.
                      .OOOOOOOOOOOOOOOOOOOOOOOOOOOOZ.
                      OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.
                     .OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.
                     :OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.
                     ZOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ.
                     OOOOOOOOOOOOOOOOOOOOOOOOOOOO7OO.
                     ZOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ.
                     OOOOOOZOOOOOOOO.ZOOOOOOOOOOO7OO.
                     ZOOOOO.OOOOOOOO.OOOOOOOOOO.  OO.
...     ..           OOOOO.OOOOOOOO.OOOOOOOOO.   .O:
.OOZ...OOO.        ..OOOOO.OOOOOOO.OOOOOOOOZ.    .Z..
.OOOOOOOOO         .ZOOOOO.OOOOO..OOOOOOOO~      .Z
 .OOOOOOO.         .OOOOOO.OZZ..OOOOOOOOO.      .?O
  .OOOOOI.        .OOOOOOO..,ZOOOOOOOOOO..      .O.
   .OOOOZ.      ..ZOOOOOOOOOOOOOOOOOOOO~        .O.
   .OOOOO= .....ZOOOOOOOOOOOOOOOOOOOOOO.      ..O.
   ..OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ       .,OO.
    .ZOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.     ...OO..
     .OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.   ...OO.
     ..ZOOOOOOOOOOOOOOOOOOOOOOOOOOOO.... OZO..
      ...OOOOOOOOOOOOOOOOOOOOOOOOOOZOOOZO...
          .....~OOOOOOOOOOOOOOOOO:........
                ................
--></head><body id='blog'><header id='mobile-header'><div class='wrap'><a class='header-logo' href='/'>DockYard</a><div class='menu-button'></div></div><ul class='flexnav' data-breakpoint='481' id='mobile-nav'><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com'><span class='mobile-nav-icon fontello'>h</span><p class='main-nav-item'>Home</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com/work'><span class='mobile-nav-icon fontello'>w</span><p class='main-nav-item'>Work</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com/team'><span class='mobile-nav-icon fontello'>p</span><p class='main-nav-item'>Team</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com/community'><span class='mobile-nav-icon fontello'>c</span><p class='main-nav-item'>Community</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='/'><span class='mobile-nav-icon fontello'>b</span><p class='main-nav-item'>Blog</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com/contact'><span class='mobile-nav-icon fontello'>m</span><p class='main-nav-item'>Contact</p></a></li></ul></header><header id='site-header'><div class='wrap'><h1><a class='header-logo' href='http://dockyard.com'>DockYard</a></h1><ul class='main-nav'><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/work'>Work</a></li><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/team'>Team</a></li><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/community'>Community</a></li><li class='nav-work'><a class='main-nav-item current' href='/'>Blog</a></li><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/contact'>Contact</a></li></ul></div></header><section id='content'><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-10-06T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Namespaced Pages</title>
    <link rel="alternate" href="/2013/10/06/namespaced-pages.html"/>
    <id>/2013/10/06/namespaced-pages.html</id>
    <published>2013-10-06T00:00:00Z</published>
    <updated>2013-10-06T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Simple Namespacing&lt;/h2&gt;

&lt;p&gt;We&amp;#39;ve been using our &lt;a href="https://github.com/dockyard/pages"&gt;Pages&lt;/a&gt; gem in
nearly all of our projects for over a year now. Its been great but could
only support pages on the root. I just released &lt;code&gt;0.2.0&lt;/code&gt; of the gem that
now supports namespacing:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;namespace &lt;span class="symbol"&gt;:work&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  pages &lt;span class="symbol"&gt;:client_1&lt;/span&gt;, &lt;span class="symbol"&gt;:client_2&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will give you the routes of &lt;code&gt;/work/client_1&lt;/code&gt; and &lt;code&gt;/work/client_2&lt;/code&gt;.
Your views will go into &lt;code&gt;app/views/work/pages&lt;/code&gt;. For more details see the
&lt;a href="https://github.com/dockyard/pages#namespacing"&gt;README&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Design Patterns: The Composite Pattern</title>
    <link rel="alternate" href="/2013/10/01/design-patterns-composite-pattern.html"/>
    <id>/2013/10/01/design-patterns-composite-pattern.html</id>
    <published>2013-10-01T00:00:00Z</published>
    <updated>2013-10-01T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Coffee Coffee&lt;/h2&gt;

&lt;p&gt;If you&amp;#39;re anything like me, you&amp;#39;ll agree that every morning needs to start
out with a cup of coffee. And, if you&amp;#39;re anything like me, you&amp;#39;ll have
at least three different coffee making apparatuses. And, if you&amp;#39;re
anything like me... you&amp;#39;ll soon realize you may have an addiction.&lt;/p&gt;

&lt;p&gt;Joke aside, each coffee contraption requires a specific procedure
to be completed in order to brew a cup of joe; each having multiple parts,
taking differing amounts of time, requiring various numbers of steps, etc.&lt;/p&gt;

&lt;p&gt;Our coffee making process can be described by a basic example
of the &lt;em&gt;Composite&lt;/em&gt; method pattern.&lt;/p&gt;

&lt;h2&gt;The Best Part of Waking Up is a Composite Pattern in Your Cup&lt;/h2&gt;

&lt;p&gt;We can start by thinking of each coffee maker and coffee related task as a &lt;em&gt;subclass&lt;/em&gt; of
our &lt;code&gt;CoffeeRoutine&lt;/code&gt;. &lt;code&gt;CoffeeRoutine&lt;/code&gt; will be known as the &lt;em&gt;component&lt;/em&gt;, the base
class or interface that possesses the commonalities of simple and complex
objects. &lt;code&gt;CoffeeRoutine#time&lt;/code&gt; is the common trait among all
coffee related classes.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;CoffeeRoutine&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:task&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(task)
    &lt;span class="instance-variable"&gt;@task&lt;/span&gt; = task
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time&lt;/span&gt;
    &lt;span class="float"&gt;0.0&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, we&amp;#39;ll create a couple of &lt;em&gt;leaf&lt;/em&gt; classes, which represent
indivisble portions of our pattern. Here are a couple of &lt;em&gt;leaf&lt;/em&gt; classes
that come to mind: &lt;code&gt;GrindCoffee&lt;/code&gt; and &lt;code&gt;BoilWater&lt;/code&gt;. These &lt;em&gt;leaf&lt;/em&gt; classes are
our most basic steps to making coffee.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;GrindCoffee&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CoffeeRoutine&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Grinding some coffee!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time&lt;/span&gt;
    &lt;span class="float"&gt;0.5&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;BoilWater&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CoffeeRoutine&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Boiling some water!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time&lt;/span&gt;
    &lt;span class="float"&gt;4.0&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;AddCoffee&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CoffeeRoutine&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Adding in the coffee!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time&lt;/span&gt;
    &lt;span class="float"&gt;1.0&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;g = GrindCoffee.new

g.task    # =&amp;gt; 'Grinding some coffee!'
g.time    # =&amp;gt; 0.5
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, we can get to the namesake of the pattern: the &lt;em&gt;composite&lt;/em&gt; class. A
&lt;em&gt;composite&lt;/em&gt; class is a &lt;em&gt;component&lt;/em&gt; that also contain
&lt;em&gt;subcomponents&lt;/em&gt;. &lt;em&gt;Composite&lt;/em&gt; classes can be made up of smaller
&lt;em&gt;composite&lt;/em&gt; classes or &lt;em&gt;leaf&lt;/em&gt; classes.&lt;/p&gt;

&lt;p&gt;Our various coffee making apparatuses can be thought of as &lt;em&gt;composites&lt;/em&gt;.
Let&amp;#39;s check out the &lt;code&gt;FrenchPress&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;FrenchPress&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CoffeeRoutine&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:task&lt;/span&gt;, &lt;span class="symbol"&gt;:steps&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(task)
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Using the French press to make coffee&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@steps&lt;/span&gt; = []
    add_step &lt;span class="constant"&gt;BoilWater&lt;/span&gt;.new
    add_step &lt;span class="constant"&gt;GrindCoffee&lt;/span&gt;.new
    add_step &lt;span class="constant"&gt;AddCoffee&lt;/span&gt;.new
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;add_step&lt;/span&gt;(step)
    steps &amp;lt;&amp;lt; step
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;remove_step&lt;/span&gt;(step)
    steps.delete step
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time_required&lt;/span&gt;
    total_time = &lt;span class="float"&gt;0.0&lt;/span&gt;
    steps.each { |step| total_time += step.time }
    total_time
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;However, we can simplify the &lt;code&gt;FrenchPress&lt;/code&gt; class by pulling out the
&lt;em&gt;composite&lt;/em&gt; functionality into its own class.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;CompositeTasks&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CoffeeRoutine&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:task&lt;/span&gt;, &lt;span class="symbol"&gt;:steps&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(task)
    &lt;span class="instance-variable"&gt;@steps&lt;/span&gt; = []
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;add_step&lt;/span&gt;(step)
    steps &amp;lt;&amp;lt; step
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;remove_step&lt;/span&gt;(step)
    steps.delete step
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time_required&lt;/span&gt;
    total_time = &lt;span class="float"&gt;0.0&lt;/span&gt;
    steps.each { |step| total_time += step.time }
    total_time
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we can create &lt;em&gt;composite&lt;/em&gt; coffee makers easily... They&amp;#39;ll look
something like this:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;FrenchPress&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CompositeTasks&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Using the FrenchPress to make coffee!!!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    add_step &lt;span class="constant"&gt;GrindCoffee&lt;/span&gt;.new
    add_step &lt;span class="constant"&gt;BoilWater&lt;/span&gt;.new
    add_step &lt;span class="constant"&gt;AddCoffee&lt;/span&gt;.new
    &lt;span class="comment"&gt;# ... Omitted actual steps to make coffee from a French press ...&lt;/span&gt;
    &lt;span class="comment"&gt;# ... Imagine PressPlunger class has been defined already ...&lt;/span&gt;
    add_step &lt;span class="constant"&gt;PressPlunger&lt;/span&gt;.new
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;DripMaker&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CompositeTasks&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Using the DripMaker to make coffee!!!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    add_step &lt;span class="constant"&gt;GrindCoffee&lt;/span&gt;.new
    add_step &lt;span class="constant"&gt;BoilWater&lt;/span&gt;
    add_step &lt;span class="constant"&gt;AddCoffee&lt;/span&gt;.new
    &lt;span class="comment"&gt;# ... Imagine PressStartButton class has been defined already ...&lt;/span&gt;
    add_step &lt;span class="constant"&gt;PressStartButton&lt;/span&gt;.new
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Swell... now we can call the &lt;code&gt;FrenchPress&lt;/code&gt; and &lt;code&gt;DripMaker&lt;/code&gt; coffee makers.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;frenchpress = FrenchPress.new

# =&amp;gt; #&amp;lt;FrenchPress:0x007f88fcf46410
       @task=&amp;quot;Using the FrenchPress to make coffee!!!&amp;quot;,
       @steps=
         [#&amp;lt;GrindCoffee:0x007f88fcf46370 @step=&amp;quot;Grinding some coffee!&amp;quot;&amp;gt;,
         #&amp;lt;BoilWater:0x007f88fcf46320 @step=&amp;quot;Boiling some water!&amp;quot;&amp;gt;]&amp;gt;
         #&amp;lt;AddCoffee:0x007f88fcf46329 @step=&amp;quot;Adding in the coffee!&amp;quot;&amp;gt;]&amp;gt;
         #&amp;lt;PressPlunger:0x007f88fcf46098 @step=&amp;quot;Pressing the plunger down!&amp;quot;&amp;gt;]&amp;gt;

dripmaker = DripMaker.new

# =&amp;gt; #&amp;lt;DripMaker:0x137t88fcf57109
       @task=&amp;quot;Using the DripMaker to make coffee!!!&amp;quot;,
       @steps=
         [#&amp;lt;GrindCoffee:0x007f88fcf46370 @step=&amp;quot;Grinding some coffee!&amp;quot;&amp;gt;,
         #&amp;lt;BoilWater:0x007f88fcf52520 @step=&amp;quot;Boiling some water!&amp;quot;&amp;gt;]&amp;gt;
         #&amp;lt;AddCoffee:0x007f88fcf46123 @step=&amp;quot;Adding in the coffee!&amp;quot;&amp;gt;]&amp;gt;
         #&amp;lt;PressStartButton:0x007f88fcf46432 @step=&amp;quot;Pushing the start button!&amp;quot;&amp;gt;]&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we can also check the time required for each coffee maker.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;frenchpress.time_required # =&amp;gt; 12.4
dripmaker.time_required   # =&amp;gt; 8.5
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Discussion&lt;/h2&gt;

&lt;p&gt;Implementing the &lt;em&gt;Composite&lt;/em&gt; pattern is pretty simple.&lt;/p&gt;

&lt;p&gt;We create a &lt;em&gt;component&lt;/em&gt; class that ties the numerous simple and
complex characteristics together. In our example, &lt;code&gt;CoffeeRoutine&lt;/code&gt;
defines an elementary method &lt;code&gt;#time&lt;/code&gt; and each child class implements
its own amount.&lt;/p&gt;

&lt;p&gt;Next, we create &lt;em&gt;leaf&lt;/em&gt; classes, &lt;code&gt;AddCoffee&lt;/code&gt;, &lt;code&gt;BoilWater&lt;/code&gt;, and &lt;code&gt;GrindCoffee&lt;/code&gt;,
that share the same characteristics with one another. Remember that it&amp;#39;s the nature
of &lt;em&gt;leaf&lt;/em&gt; classes to be simple. If you happen across a &lt;em&gt;leaf&lt;/em&gt; class that
could be broken up, it might potentially be a &lt;em&gt;composite&lt;/em&gt; class in disguise.
Break up those actions into individual &lt;em&gt;leaf&lt;/em&gt; classes and turn the original class
into a &lt;em&gt;composite&lt;/em&gt;. All of our &lt;em&gt;leaf&lt;/em&gt; classes had a &lt;code&gt;#time&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;composite&lt;/em&gt; class handles all the subtasks, essentially using the child classes
at its will. We can see that our two &lt;em&gt;composite&lt;/em&gt; classes and their methods, &lt;code&gt;FrenchPress#time_required&lt;/code&gt;
and &lt;code&gt;DripMaker#time_required&lt;/code&gt;. manipulate the method &lt;code&gt;#time&lt;/code&gt; from the &lt;em&gt;leaf&lt;/em&gt; classes.
Ultimately, our coffee makers are able to treat each step,
&lt;code&gt;GrindCoffee&lt;/code&gt;, &lt;code&gt;BoilWater&lt;/code&gt; and &lt;code&gt;AddCoffee&lt;/code&gt; uniformly.&lt;/p&gt;

&lt;p&gt;Hope this helps you with your morning routine!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Vim: Moving Lines Ain't Hard</title>
    <link rel="alternate" href="/2013/09/26/vim-moving-lines-aint-hard.html"/>
    <id>/2013/09/26/vim-moving-lines-aint-hard.html</id>
    <published>2013-09-26T00:00:00Z</published>
    <updated>2013-09-26T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;In the last post, we briefly discussed the power of the
&lt;a href="http://reefpoints.dockyard.com/2013/09/11/vim-staying-on-home-row-via-map.html"&gt;&lt;em&gt;map&lt;/em&gt; command&lt;/a&gt;.
In today&amp;#39;s post, we&amp;#39;re going to use &lt;em&gt;map&lt;/em&gt; again in order to move
lines and blocks around.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s use an example:
Our goal is to move the &lt;em&gt;first line&lt;/em&gt; to its proper location. From this:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- second line ---
--- third line ---
--- first line ---
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To this:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- first line ---
--- second line ---
--- third line ---
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Delete, Then Paste&lt;/h2&gt;

&lt;p&gt;Here is one of the most common ways, it ain&amp;#39;t pretty but it gets the job done.
We&amp;#39;ll delete the desired line and paste it to the target location.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- second line ---
--- third line ---
--- first line ---

# Delete the &amp;quot;first line&amp;quot;, move to the &amp;quot;second line&amp;quot;, and paste the registered
# &amp;quot;first line&amp;quot; above the &amp;quot;second line&amp;quot;.
#
# :3 --&amp;gt; &amp;lt;ENTER&amp;gt; --&amp;gt; dd --&amp;gt; j --&amp;gt; P
#
# or...
#
# :3d --&amp;gt; &amp;lt;ENTER&amp;gt; --&amp;gt; :2P --&amp;gt; &amp;lt;ENTER&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;I Like the Way You Move&lt;/h2&gt;

&lt;p&gt;The second way, use the &lt;em&gt;move&lt;/em&gt; command with &lt;code&gt;:m&lt;/code&gt;. I like this method a lot, as it
requires fewer keystrokes. It does require line numbers though. When using
absolute line numbers, the destination will be below the line number you specify,
so use &lt;code&gt;:m0&lt;/code&gt; to move to the top of the file.
Try using
&lt;a href="http://jeffkreeftmeijer.com/2013/vims-new-hybrid-line-number-mode/"&gt;hybrid mode&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- second line ---
--- third line ---
--- first line ---

# Move your cursor on the &amp;quot;first line&amp;quot; (the third line), use the *move* command and
# pass your desired line number as an argument. Hit enter.
#
# :3 --&amp;gt; &amp;lt;ENTER&amp;gt; --&amp;gt; :m0 --&amp;gt; &amp;lt;ENTER&amp;gt;
#
# or...
#
# :3m0 --&amp;gt; &amp;lt;ENTER&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Lazy Moving&lt;/h2&gt;

&lt;p&gt;Now getting to the &lt;em&gt;map&lt;/em&gt; command, I&amp;#39;ve found this pretty handy when
I need to move a line or block of lines a couple of lines upward or downward.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;quot; In your ~/.vimrc
&amp;quot;
&amp;quot; Normal mode
nnoremap &amp;lt;C-j&amp;gt; :m .+1&amp;lt;CR&amp;gt;==
nnoremap &amp;lt;C-k&amp;gt; :m .-2&amp;lt;CR&amp;gt;==

&amp;quot; Insert mode
inoremap &amp;lt;C-j&amp;gt; &amp;lt;ESC&amp;gt;:m .+1&amp;lt;CR&amp;gt;==gi
inoremap &amp;lt;C-k&amp;gt; &amp;lt;ESC&amp;gt;:m .-2&amp;lt;CR&amp;gt;==gi

&amp;quot; Visual mode
vnoremap &amp;lt;C-j&amp;gt; :m '&amp;gt;+1&amp;lt;CR&amp;gt;gv=gv
vnoremap &amp;lt;C-k&amp;gt; :m '&amp;lt;-2&amp;lt;CR&amp;gt;gv=gv
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now you can move lines by holding &lt;em&gt;CTRL&lt;/em&gt; and &lt;em&gt;j&lt;/em&gt; (for up a line) or
&lt;em&gt;k&lt;/em&gt; (for down a line).&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- second line ---
--- third line ---
--- first line ---

# Move to the &amp;quot;first line&amp;quot;, hold &amp;lt;CTRL&amp;gt; and move up twice.
#
# :3 --&amp;gt; &amp;lt;ENTER&amp;gt; --&amp;gt; &amp;lt;CTRL&amp;gt; + kk
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;#39;s move a block of lines:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- fourth line ---
--- fifth line ---
--- first line ---
--- second line ---
--- third line ---

# Move to the &amp;quot;first line&amp;quot;.
# Select the &amp;quot;first line&amp;quot;, &amp;quot;second line&amp;quot;, and the &amp;quot;third line&amp;quot; with Visual mode.
# Hit CTRL and move upwards twice.
#
# :3 -- &amp;lt;ENTER&amp;gt; --&amp;gt; &amp;lt;SHIFT&amp;gt; + V --&amp;gt; jj --&amp;gt; &amp;lt;CTRL&amp;gt; + kk
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Other Ways&lt;/h2&gt;

&lt;p&gt;There are plenty of other tricks that move around lines in Vim. The preceding
examples were just a few that I employ everyday. If you&amp;#39;ve got something cool to
share, please let me know!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Vim: Staying on Home Row via Map</title>
    <link rel="alternate" href="/2013/09/11/vim-staying-on-home-row-via-map.html"/>
    <id>/2013/09/11/vim-staying-on-home-row-via-map.html</id>
    <published>2013-09-11T00:00:00Z</published>
    <updated>2013-09-11T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Here at DockYard, the majority of us are using Vim. I don&amp;#39;t want to
write about the benefits of using this sweet editor, as that would take too long,
but instead, I&amp;#39;d like to share a couple of my favorite mappings for
escaping and saving files.&lt;/p&gt;

&lt;h2&gt;Vanilla Vim: Escaping and Saving&lt;/h2&gt;

&lt;p&gt;Escaping out to &lt;em&gt;Normal&lt;/em&gt; mode from the other modes in Vim is straightforward:
simply hit the &lt;code&gt;Esc&lt;/code&gt; key.
Saving files is accomplished by, from &lt;code&gt;Normal&lt;/code&gt; mode, pressing &lt;code&gt;:w&lt;/code&gt; and then &lt;code&gt;Enter&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;So... What&amp;#39;s the Problem?&lt;/h2&gt;

&lt;p&gt;During a session, especially when I&amp;#39;m writing large pieces of text,
I&amp;#39;d find myself in a repetitive rut:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I just typed out a couple of sentences and want to save my progress&lt;/li&gt;
&lt;li&gt;I&amp;#39;d remove my left hand from home row to hit the &lt;code&gt;Esc&lt;/code&gt; key&lt;/li&gt;
&lt;li&gt;Saving the file required me, once again to leave home row, to hit &lt;code&gt;:w&lt;/code&gt;
and then the &lt;code&gt;Enter&lt;/code&gt; or the &lt;code&gt;Return&lt;/code&gt; key&lt;/li&gt;
&lt;li&gt;To continue on, I&amp;#39;d press &lt;code&gt;i&lt;/code&gt; and type along&lt;/li&gt;
&lt;li&gt;Repeat, repeat, repeat...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See where I&amp;#39;m getting at?&lt;/p&gt;

&lt;h2&gt;Let&amp;#39;s Talk About Map&lt;/h2&gt;

&lt;p&gt;Before we review and
&lt;a href="http://www.flickr.com/search/?q=pasta"&gt;copy-pasta&lt;/a&gt;
the portion of my &lt;code&gt;.vimrc&lt;/code&gt;, let&amp;#39;s briefly go over the very basics of the
pertinent map commands.
You can find the entire &lt;a href="http://vimdoc.sourceforge.net/htmldoc/map.html"&gt;map documentation here&lt;/a&gt;
or by typing &lt;code&gt;:help map&lt;/code&gt; within a Vim session.&lt;/p&gt;

&lt;p&gt;Protip: To open help texts into a full buffer, &lt;code&gt;:h map | only&lt;/code&gt; or to open them in a separate tab &lt;code&gt;:tab h map&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Recursive Map&lt;/h3&gt;

&lt;p&gt;First, we&amp;#39;re going to talk about &lt;em&gt;recursive&lt;/em&gt; map commands. A &lt;em&gt;recursive&lt;/em&gt;
command will transform one result to another result, if there is another
binding to that key. An example can be found at the &lt;code&gt;.vimrc&lt;/code&gt; below.&lt;/p&gt;

&lt;p&gt;Here are the basic &lt;em&gt;recursive&lt;/em&gt; map commands.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;  - command to transform the operation of typed keys within &lt;em&gt;ALL&lt;/em&gt; modes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can prepend the first letter of the desired mode to &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nmap&lt;/code&gt; - transform the operation of typed keys within &lt;em&gt;Normal&lt;/em&gt;
mode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imap&lt;/code&gt; - transform the operations of typed keys within
&lt;em&gt;Insert&lt;/em&gt; mode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vmap&lt;/code&gt; - transform the operations of typed keys within
&lt;em&gt;Visual&lt;/em&gt; and &lt;em&gt;Select&lt;/em&gt; mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, if I had this within my &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;quot; ~/.vimrc
&amp;quot;
&amp;quot; Note: double quotes signifies comments

nmap 0 gg
imap n N

&amp;quot; Time for a little recursive map
imap d D
imap D wat
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Since &lt;code&gt;0&lt;/code&gt; is mapped to &lt;code&gt;gg&lt;/code&gt; within &lt;em&gt;Normal&lt;/em&gt; mode, I&amp;#39;ll be sent to the
top of the file by pressing &lt;code&gt;0&lt;/code&gt;.
Moreover, while in &lt;em&gt;Insert&lt;/em&gt; mode, every character &lt;code&gt;n&lt;/code&gt; that I type will turn into &lt;code&gt;N&lt;/code&gt;.
Lastly, because of the recursive mapping, typing &lt;code&gt;d&lt;/code&gt; in &lt;em&gt;Insert&lt;/em&gt; mode
will return &lt;code&gt;wat&lt;/code&gt;. You can think of it as something like: &lt;code&gt;d&lt;/code&gt; =&amp;gt; &lt;code&gt;D&lt;/code&gt; =&amp;gt;
&lt;code&gt;wat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thankfully, there&amp;#39;s a &lt;em&gt;non-recursive&lt;/em&gt; map.&lt;/p&gt;

&lt;h3&gt;Non-recursive Map&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Non-recursive&lt;/em&gt; map commands are signified by adding &lt;code&gt;nore&lt;/code&gt; after the
 mode modifier.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nnoremap&lt;/code&gt; - non-recursive map for &lt;em&gt;Normal&lt;/em&gt; mode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inoremap&lt;/code&gt; - non-recursive map for &lt;em&gt;Insert&lt;/em&gt; mode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vnoremap&lt;/code&gt; - non-recursive map for &lt;em&gt;Visual&lt;/em&gt; and &lt;em&gt;Select&lt;/em&gt; mode&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;quot; ~/.vimrc

inoremap c C
inoremap C nope
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, in &lt;em&gt;Insert&lt;/em&gt; mode, if we type &lt;code&gt;c&lt;/code&gt;, we will return &lt;code&gt;C&lt;/code&gt;; the transformation of
&lt;code&gt;c&lt;/code&gt; to &lt;code&gt;nope&lt;/code&gt; will not occur.&lt;/p&gt;

&lt;h2&gt;Enter the .vimrc&lt;/h2&gt;

&lt;p&gt;Now that we got the basics out of the way, here is an example of my
&lt;code&gt;.vimrc&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;quot; ~/.vimrc
&amp;quot; *** The Two Hand system ***
&amp;quot;
&amp;quot; &amp;lt;Cr&amp;gt; signifies the &amp;quot;return&amp;quot; key

inoremap ;a &amp;lt;Esc&amp;gt;
inoremap ;d &amp;lt;Esc&amp;gt;:update&amp;lt;Cr&amp;gt;
inoremap ;f &amp;lt;C-O&amp;gt;:update&amp;lt;Cr&amp;gt;
nnoremap ;f :update&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;m using &lt;code&gt;:update&lt;/code&gt; here, which is &amp;quot;like &lt;code&gt;:write&lt;/code&gt;, but only write when the buffer has been
modified.&amp;quot;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s go over these mappings.&lt;/p&gt;

&lt;p&gt;The first one, &lt;code&gt;inoremap ;a &amp;lt;Esc&amp;gt;&lt;/code&gt; maps the &lt;em&gt;semi-colon&lt;/em&gt; and &lt;em&gt;a&lt;/em&gt; key
together when in &lt;em&gt;Insert&lt;/em&gt; mode. By pressing &lt;code&gt;;&lt;/code&gt; and then &lt;code&gt;a&lt;/code&gt; immediately afterwards, we mimic
the functionality of the &lt;em&gt;Escape&lt;/em&gt; key.&lt;/p&gt;

&lt;p&gt;The second map, &lt;code&gt;inoremap ;d &amp;lt;Esc&amp;gt;:update&amp;lt;Cr&amp;gt;&lt;/code&gt; maps the &lt;em&gt;semi-colon&lt;/em&gt; and the &lt;em&gt;d&lt;/em&gt; key.
Pressing &lt;code&gt;;&lt;/code&gt; and then &lt;code&gt;d&lt;/code&gt; immediately afterwards returns the sequence of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;em&gt;Insert&lt;/em&gt; mode, escape to &lt;em&gt;Normal&lt;/em&gt; mode&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;:&lt;/code&gt; to get inside the &lt;em&gt;Command&lt;/em&gt; mode, and type the &lt;code&gt;update&lt;/code&gt;
command&lt;/li&gt;
&lt;li&gt;Complete the sequence by &amp;quot;hitting&amp;quot; &lt;em&gt;Return&lt;/em&gt;, thus saving the file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The third map command, &lt;code&gt;inoremap ;f &amp;lt;C-O&amp;gt;:update&amp;lt;Cr&amp;gt;&lt;/code&gt;, allows us to
type &lt;code&gt;;&lt;/code&gt; and then &lt;code&gt;f&lt;/code&gt; to return:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;em&gt;Insert&lt;/em&gt; mode, escape out to &lt;em&gt;Normal&lt;/em&gt; with &lt;code&gt;&amp;lt;C-O&amp;gt;&lt;/code&gt;, which allows
us to escape out for &lt;em&gt;ONE&lt;/em&gt; command.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;:&lt;/code&gt; to get inside &lt;em&gt;Command&lt;/em&gt; mode, and then type &lt;code&gt;udpate&lt;/code&gt;. This is
our one command for &lt;code&gt;&amp;lt;C-O&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;quot;Hit&amp;quot; the &lt;em&gt;Return&lt;/em&gt;, thus saving the file&lt;/li&gt;
&lt;li&gt;We&amp;#39;re back in &lt;em&gt;Insert&lt;/em&gt; mode, thanks to &lt;code&gt;&amp;lt;C-O&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, the &lt;code&gt;nnoremap ;f :update&amp;lt;CR&amp;gt;&lt;/code&gt; mapping means by typing &lt;code&gt;;&lt;/code&gt; and
then &lt;code&gt;f&lt;/code&gt; in &lt;em&gt;Normal&lt;/em&gt; mode, it will result in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since, we&amp;#39;re already in &lt;em&gt;Normal&lt;/em&gt; mode, we get into &lt;em&gt;Command&lt;/em&gt; mode by
typing &lt;code&gt;:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Type the &lt;code&gt;update&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;&amp;quot;Hit&amp;quot; the &lt;em&gt;Return&lt;/em&gt; key, and save the file&lt;/li&gt;
&lt;li&gt;We remain in &lt;em&gt;Normal&lt;/em&gt; mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The snippet below restricts these commands to your right hand.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;quot; ~/.vimrc
&amp;quot; *** The Right Hand system ***

inoremap ;l &amp;lt;Esc&amp;gt;
inoremap ;k &amp;lt;Esc&amp;gt;:update&amp;lt;Cr&amp;gt;
inoremap ;j &amp;lt;C-O&amp;gt;:update&amp;lt;Cr&amp;gt;
nnoremap ;j :update&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see, I kept &lt;code&gt;;&lt;/code&gt; as a prefix to my map commands. This
conveniently keeps me at homerow. I&amp;#39;ve played with mapping everything
with my right hand, but it just didn&amp;#39;t feel &amp;quot;right&amp;quot; (apologies for the
bad pun).&lt;/p&gt;

&lt;p&gt;Overall, this snippet makes me happy and I believe this will make your
day as well. If there are some other tricks
concerning escaping and saving files, please let me know in the
comments! Thanks!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Postgres_ext adds rank and common table expressions</title>
    <link rel="alternate" href="/2013/09/06/postgres_ext-adds-rank-and-common-table-expressions.html"/>
    <id>/2013/09/06/postgres_ext-adds-rank-and-common-table-expressions.html</id>
    <published>2013-09-06T00:00:00Z</published>
    <updated>2013-09-06T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This week, I released &lt;a href="https://github.com/dockyard/postgres_ext"&gt;postgres_ext&lt;/a&gt; 2.1.0, which includes
ActiveRecord::Relation methods to simplify queries that require the use
of &lt;a href="http://www.postgresql.org/docs/current/static/queries-with.html"&gt;Common Table
Expressions&lt;/a&gt;
(CTEs) and the &lt;a href="http://www.postgresql.org/docs/9.2/static/functions-window.html"&gt;&lt;code&gt;rank()&lt;/code&gt; windowing
function&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Common Table Expressions&lt;/h2&gt;

&lt;p&gt;In a sentence, CTEs allow you to define a temporary table to be used in
a larger query. Let&amp;#39;s look at an example:&lt;/p&gt;
&lt;div class="highlight SQL "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;WITH scores_for_game &lt;span class="keyword"&gt;AS&lt;/span&gt; (
&lt;span class="class"&gt;SELECT&lt;/span&gt; *
&lt;span class="keyword"&gt;FROM&lt;/span&gt; scores
&lt;span class="keyword"&gt;WHERE&lt;/span&gt; game_id = &lt;span class="integer"&gt;1&lt;/span&gt;
)
&lt;span class="class"&gt;SELECT&lt;/span&gt; *
&lt;span class="keyword"&gt;FROM&lt;/span&gt; scores_for_game
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the above, somewhat arbitrary, example, we create a temporary table
of &lt;code&gt;scores_for_game&lt;/code&gt; which we then select from. CTEs allow you to
organize your more complex queries, and can be really helpful in certain
cases.&lt;/p&gt;

&lt;p&gt;We can make the same SQL call in ActiveRecord with postgres_ext.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Score&lt;/span&gt;.from_cte(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;scores_for_game&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="constant"&gt;Score&lt;/span&gt;.where(&lt;span class="key"&gt;game_id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;))
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We can also query against the CTE expression by chaining off the
resulting ActiveRecord::Relation&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Score&lt;/span&gt;.from_cte(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;scores_for_game&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="constant"&gt;Score&lt;/span&gt;.where(&lt;span class="key"&gt;game_id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;)).where(&lt;span class="key"&gt;user_id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;would generate the following:&lt;/p&gt;
&lt;div class="highlight SQL "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;WITH scores_for_game &lt;span class="keyword"&gt;AS&lt;/span&gt; (
&lt;span class="class"&gt;SELECT&lt;/span&gt; *
&lt;span class="keyword"&gt;FROM&lt;/span&gt; scores
&lt;span class="keyword"&gt;WHERE&lt;/span&gt; game_id = &lt;span class="integer"&gt;1&lt;/span&gt;
)
&lt;span class="class"&gt;SELECT&lt;/span&gt; *
&lt;span class="keyword"&gt;FROM&lt;/span&gt; scores_for_game
&lt;span class="keyword"&gt;WHERE&lt;/span&gt; scores_for_game.user_id = &lt;span class="integer"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can also include CTEs in your normal queries to join against by
using &lt;code&gt;with&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Score&lt;/span&gt;.with(&lt;span class="key"&gt;my_games&lt;/span&gt;: &lt;span class="constant"&gt;Game&lt;/span&gt;.where(&lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;)).joins(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;JOIN my_games ON scores.game_id = my_games.id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;will generate the following SQL:&lt;/p&gt;
&lt;div class="highlight SQL "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;WITH my_games &lt;span class="keyword"&gt;AS&lt;/span&gt; (
&lt;span class="class"&gt;SELECT&lt;/span&gt; games.*
&lt;span class="keyword"&gt;FROM&lt;/span&gt; games
&lt;span class="keyword"&gt;WHERE&lt;/span&gt; games.id = &lt;span class="integer"&gt;1&lt;/span&gt;
)
&lt;span class="class"&gt;SELECT&lt;/span&gt; *
&lt;span class="keyword"&gt;FROM&lt;/span&gt; scores
&lt;span class="keyword"&gt;JOIN&lt;/span&gt; my_games
&lt;span class="keyword"&gt;ON&lt;/span&gt; scores.games_id = my_games.id
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Rank&lt;/h2&gt;

&lt;p&gt;PostgreSQL provides a &lt;code&gt;rank&lt;/code&gt; windowing function, which will take into
account ties when ranking results. You would add rank to your
projection, like the following example:&lt;/p&gt;
&lt;div class="highlight SQL "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="class"&gt;SELECT&lt;/span&gt; scores.*, rank() &lt;span class="keyword"&gt;OVER&lt;/span&gt; (&lt;span class="keyword"&gt;ORDER&lt;/span&gt; &lt;span class="keyword"&gt;BY&lt;/span&gt; scores.points &lt;span class="directive"&gt;DESC&lt;/span&gt;)
&lt;span class="keyword"&gt;FROM&lt;/span&gt; scores
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The results set will return ordered by the rank, which is determined the
order passed into the &lt;code&gt;rank&lt;/code&gt;&amp;#39;s &lt;code&gt;OVER&lt;/code&gt;. In the above example, the scores
would be ranked by their scores descending, so highest score first. If
there was a tie at first place between two scores, they would both
ranked 1, and the next result would be ranked &lt;code&gt;3&lt;/code&gt;. We can achieve the
same in ActiveRecord with postgres_ext:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Score&lt;/span&gt;.ranked(&lt;span class="key"&gt;points&lt;/span&gt;: &lt;span class="symbol"&gt;:desc&lt;/span&gt;)
&lt;span class="comment"&gt;# or&lt;/span&gt;
&lt;span class="constant"&gt;Score&lt;/span&gt;.ranked(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;points desc&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Rank will rank independently of any sort order applied to the query, so
you could have your scores ranked by points, but then ordered by their
creation time.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Score&lt;/span&gt;.ranked(&lt;span class="key"&gt;points&lt;/span&gt;: &lt;span class="symbol"&gt;:desc&lt;/span&gt;).order(&lt;span class="symbol"&gt;:created_at&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;will generate the following query:&lt;/p&gt;
&lt;div class="highlight sql "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="class"&gt;SELECT&lt;/span&gt; scores.*, rank() &lt;span class="keyword"&gt;OVER&lt;/span&gt; (&lt;span class="keyword"&gt;ORDER&lt;/span&gt; &lt;span class="keyword"&gt;BY&lt;/span&gt; scores.points &lt;span class="directive"&gt;DESC&lt;/span&gt;)
&lt;span class="keyword"&gt;FROM&lt;/span&gt; scores
&lt;span class="keyword"&gt;ORDER&lt;/span&gt; &lt;span class="keyword"&gt;BY&lt;/span&gt; scores.created_at &lt;span class="directive"&gt;ASC&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Also, if you apply a sort order to your relation, and want to sort by
it, you do not have to tell ranked what order you&amp;#39;d like to use, as it
will reuse the order. &lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Score&lt;/span&gt;.ranked.order(&lt;span class="key"&gt;points&lt;/span&gt;: &lt;span class="symbol"&gt;:desc&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;One thing to watch out for if you use &lt;code&gt;ranked&lt;/code&gt; without an explicit
order and want to call &lt;a href="http://api.rubyonrails.org/classes/ActiveRecord/FinderMethods.html#method-i-first"&gt;&lt;code&gt;first&lt;/code&gt;&lt;/a&gt;
off your relation, if the results of the
relation have yet to be retrieved, the first will use your table&amp;#39;s
primary key for an &lt;code&gt;ORDER BY&lt;/code&gt; statement on the query. This has already
bitten us before we discovered the behavior of &lt;code&gt;first&lt;/code&gt;. To avoid this
behavior in &lt;code&gt;first&lt;/code&gt;, use
&lt;a href="http://api.rubyonrails.org/classes/ActiveRecord/FinderMethods.html#method-i-take"&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt;
which does not use any implied order.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve been using CTEs and rank on one of our client projects, and it&amp;#39;s
already cleaned up the &lt;code&gt;from_sql&lt;/code&gt; queries we were previously
using. Let us know if you hit any snags, or have any suggestions on how
else we can make complex SQL queries easier to call from ActiveRecord!
We only implement the &lt;code&gt;rank&lt;/code&gt; windowing function right now, but plan to
add the others shortly.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Computed Properties in Ember.Js</title>
    <link rel="alternate" href="/2013/09/04/computed_properties_in_ember_js.html"/>
    <id>/2013/09/04/computed_properties_in_ember_js.html</id>
    <published>2013-09-04T00:00:00Z</published>
    <updated>2013-09-04T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Note: Short version of this post is a part of &lt;a href="http://emberjs.com/guides/object-model/computed-properties/"&gt;Ember.Js
Guides&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;What Are Computed Properties?&lt;/h2&gt;

&lt;p&gt;In a nutshell, it&amp;#39;s a property whose value is computed the first time
it&amp;#39;s asked for. You can define the computed property as a function and
when someone asks for it, Ember will automatically invoke the function
and treat the return value like value of the property.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a very well-known example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="key"&gt;firstName&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="key"&gt;lastName&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="function"&gt;fullName&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});

&lt;span class="keyword"&gt;var&lt;/span&gt; ironMan = Person.create({
  &lt;span class="key"&gt;firstName&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Tony&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;lastName&lt;/span&gt;:  &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Stark&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
});

ironMan.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;fullName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="comment"&gt;// &amp;quot;Tony Stark&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The code above defines a computed property &lt;code&gt;fullName&lt;/code&gt; by calling
&lt;code&gt;property()&lt;/code&gt; on the function with two dependencies &lt;code&gt;firstName&lt;/code&gt; and
&lt;code&gt;lastName&lt;/code&gt; and whenever it gets called, it returns &lt;code&gt;firstName&lt;/code&gt; + &lt;code&gt;lastName&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Inception&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s take a look at another example. Say we want to add a description 
computed property to &lt;code&gt;App.Person&lt;/code&gt;. It will aggregate other properties like
&lt;code&gt;fullName&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, &lt;code&gt;country&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="key"&gt;firstName&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="key"&gt;lastName&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="key"&gt;age&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="key"&gt;country&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="function"&gt;fullName&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="function"&gt;description&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;fullName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;; Age: &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; +
           &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;age&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;; Country: &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + 
           &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;country&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;fullName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;age&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;country&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});

&lt;span class="keyword"&gt;var&lt;/span&gt; captainAmerica = Person.create({
  &lt;span class="key"&gt;fullName&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Steve Rogers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;age&lt;/span&gt;: &lt;span class="integer"&gt;80&lt;/span&gt;,
  &lt;span class="key"&gt;country&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;USA&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});

captainAmerica.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;description&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="comment"&gt;// &amp;quot;Steve Rogers; Age: 80; Country: USA&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Notice that you can use an existing computed property as a dependency for a
new one.&lt;/p&gt;

&lt;h2&gt;Caching&lt;/h2&gt;

&lt;p&gt;By default, all computed properties are cached. That means that once you
requested the value of computed property (called &lt;code&gt;get&lt;/code&gt; on it), it&amp;#39;s going
to compute and cache its value:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;captainAmerica.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;description&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="comment"&gt;// computes the value and returns &amp;quot;Steve Rogers; Age: 80; Country: USA&amp;quot;&lt;/span&gt;
captainAmerica.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;description&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="comment"&gt;// returns cached &amp;quot;Steve Rogers; Age: 80; Country: USA&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A computed property gets recomputed when any of the properties it depends on change:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;captainAmerica.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;country&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;United States of America&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
captainAmerica.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;description&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="comment"&gt;// computes the value and returns&amp;quot;Steve Rogers; Age: 80; Country: United States of America&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Read Only&lt;/h2&gt;

&lt;p&gt;This property is &lt;code&gt;false&lt;/code&gt; by default. You won&amp;#39;t be able to set the value of
the computed property if you call &lt;code&gt;readOnly&lt;/code&gt; on it:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="function"&gt;description&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// implementation&lt;/span&gt;
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;fullName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;age&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;country&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).readOnly()
});

&lt;span class="keyword"&gt;var&lt;/span&gt; captainAmerica = Person.create();
captainAmerica.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;description&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;hero&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="comment"&gt;// &amp;quot;Cannot Set: description on: &amp;lt;(unknown mixin):ember133&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Alternative syntax for defining Computed Properties&lt;/h2&gt;

&lt;p&gt;This code:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="key"&gt;firstName&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="key"&gt;lastName&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="key"&gt;fullName&lt;/span&gt;: Ember.computed(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  })
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;does exactly the same thing as this code:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="key"&gt;firstName&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="key"&gt;lastName&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="function"&gt;fullName&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;with the difference that the first example works if you disable &lt;a href="http://emberjs.com/api/#property_EXTEND_PROTOTYPES"&gt;Ember&amp;#39;s
prototype extension&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;How are Computed Properties different from Observers and Bindings?&lt;/h2&gt;

&lt;p&gt;The concept of &lt;code&gt;observer&lt;/code&gt; is pretty simple. You have something that you want to track the change of. You add an observer to it, so next time it changes, a certain event is going to be fired notifying you that that something has changed.&lt;/p&gt;

&lt;p&gt;There are two types of observers: &lt;code&gt;before&lt;/code&gt; (observesBefore) and &lt;code&gt;after&lt;/code&gt; (observes). When observer event (callback) is fired, it&amp;#39;s called with two arguments: &lt;code&gt;obj&lt;/code&gt; and &lt;code&gt;keyName&lt;/code&gt;. It doesn&amp;#39;t pass the value of the property to the event (callback). The reason is because the property you&amp;#39;re watching might be lazily computed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Observers&lt;/code&gt; are used by CP internally to invalidate CP&amp;#39;s cache when its dependency keys were changed. Observers (like CPs) don&amp;#39;t use runloop magic (fired &amp;quot;right away&amp;quot;).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Observers&lt;/code&gt; are not going to fire if the value is unchanged from before (changing existing &lt;code&gt;lastName&lt;/code&gt; from &lt;code&gt;Stark&lt;/code&gt; to &lt;code&gt;Stark&lt;/code&gt; won&amp;#39;t trigger the observer callback).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Bindings&lt;/code&gt; is an internal concept that is not meant to be used. I&amp;#39;m not saying you can&amp;#39;t, it&amp;#39;s better not to. Typically, you don&amp;#39;t need to use it in your application, using CP is plenty enough.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Bindings&lt;/code&gt; are meant to keep a property of two objects in sync. Their update (sync) happens through run loop, so there might be a period of time when two objects have the same property with different values and only by the end of a &lt;code&gt;sync&lt;/code&gt; queue those values are going to be the same.&lt;/p&gt;

&lt;p&gt;For example, in Ember those two objects are controller and view (any time a controller&amp;#39;s property changes, view&amp;#39;s property changes as well).&lt;/p&gt;

&lt;h2&gt;What do I use and when?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Computed properties&lt;/strong&gt; are good for combining other properties or doing
transformations on the property.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observers&lt;/strong&gt; are good for tracking changes of a property and reacting to
them. Observers should contain behaviour that reacts to the change.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bindings&lt;/strong&gt; are used to make sure that the properties from the different objects
are in sync. They are rarely used and most of the times can be replaced
with computed properties.&lt;/p&gt;

&lt;h2&gt;Futher reading&lt;/h2&gt;

&lt;p&gt;You can read more about Computed Properties and Ember&amp;#39;s Object Model
over
&lt;a href="http://emberjs.com/guides/object-model/computed-properties/"&gt;here&lt;/a&gt;.
Happy Coding!&lt;/p&gt;
</content>
  </entry>
</feed>
</section><footer><ul class='footer-links'><li><a class='link link-in-footer fontello' href='https://github.com/DockYard' target='_blank'>g</a></li><li><a class='link link-in-footer fontello' href='https://twitter.com/DockYard' target='_blank'>t</a></li><li><a class='link link-in-footer fontello' href='http://reefpoints.dockyard.com/atom.xml' target='_blank'>r</a></li><li><a class='link link-in-footer fontello' href='http://dockyard.com/contact' target='_blank'>m</a></li></ul><form class='footer-form'><label class='footer-form-label'>Get in touch with us!</label><input class='footer-form-input' placeholder='Email' type='text'><button class='footer-form-submit fontello' href='http://dockyard.com/contact'>R</button></form><a class='footer-number' href='tel:855-362-5973'>(855) DOCK-YRD</a><p class='footer-copyright'>&copy; 2013 DockYard, LLC. All Rights Reserved.</p></footer><audio class='foghorn' preload='auto' src='/sound/foghorn.mp3'></audio><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>