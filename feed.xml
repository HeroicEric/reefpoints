<!DOCTYPE html><html><head><title>DockYard</title><link href="/stylesheets/all-55ff872b.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-c96a81f7.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta charset='utf-8'><meta content='DockYard.com - ' name='description'><link href='//cloud.typography.com/6496052/702882/css/fonts.css' rel='stylesheet' type='text/css'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/favicon.png' rel='shortcut icon' type='image/x-icon'><link href='/favicon.png' rel='icon' type='image/x-icon'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                             ..
                                           .O.
                                       .:OO.
                                      :OOO.
                                    :OOO:.
                         ...      :OOOO:
                   ..ZOOOOOOOOO..OZ.O.
                   OOOOOOOOOOOOOOOOI
                  OOOOOOOOOOOOOOOOI,
                 OOOOOOOO. .OOOOOOOO:
                 OOOOOOOO   OOOOOOOOO:
                OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO
                OOOOOO?:   .OOOOOOOOO
               .OOOOO      OOOOOOOOOO
,OO ZO~        OOOOO,     OOOOOOOOOO+
 OOOOO.        OOOOO     OOOOOOOOOOO+
  OOO?        OOOOO     .OOOOOOOOOOO:
   OOO,      OOOOO.    .OOOOOOOOOOOO
    OOOOOOOOOOOOO.    .OOOOOOOOOOOO.
     OOOOOOOOOOOO.  .OOOOOOOOOOOOO.
      8OOOOOOOOOOOOOOOOOOOOOOOODO:
         :OOOOOOOOOOOOOOOOOOOO::

--></head><body class='feed'><header><div class='extended-header-wrap has-border--bottom'><div class='l-wrap--wide'><nav class='extended-nav has-border--bottom'><a class='extended-nav--logo' data-icon='⌂' href='http://dockyard.com/'><span class='is-hidden'>Home</span></a><a class='extended-nav--close' data-icon='X'><span class='is-hidden'>Close</span></a><div class='extended-nav__items-wrap'><div class='extended-nav__items'><a class='extended-nav__item' href='http://dockyard.com/team'>Our Team</a><a class='extended-nav__item' href='http://dockyard.com/community'>Community</a><a class='extended-nav__item active' href='/'>Blog</a><a class='extended-nav__item' href='http://dockyard.com/hire-us'>Hire Us</a></div></div></nav><nav class='work-nav'><p>Selected Work</p><a class='work-nav-item' href='http://dockyard.com/work/credit-card-reviews'><h4 class='work-nav-item__title'>Credit Card Reviews</h4><p class='work-nav-item__desc'>Credit card advice from real people.</p></a><a class='work-nav-item' href='http://dockyard.com/work/coachup'><h4 class='work-nav-item__title'>CoachUp</h4><p class='work-nav-item__desc'>You should be training. Right now.</p></a><a class='work-nav-item' href='http://dockyard.com/work/askthem'><h4 class='work-nav-item__title'>AskThem</h4><p class='work-nav-item__desc'>Ask officials questions on city, state, and federal levels.</p></a><a class='work-nav-item' href='http://dockyard.com/work/beacon-hill-blitz'><h4 class='work-nav-item__title'>Beacon Hill Blitz</h4><p class='work-nav-item__desc'>How technology helped repeal the #TechTax.</p></a></nav></div></div><nav class='main-nav-wrap has-border--bottom'><div class='main-nav l-wrap--wide'><a class='logo' href='http://dockyard.com'>DockYard</a><a class='club-sandwich' data-icon='☰'><span class='is-hidden'>Navigation</span></a></div></nav></header><div class='push--header'></div><div class='l-wrap'><a class='logo--reefpoints' href='/'>ReefPoints</a><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-11-27T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Buffers, Windows, Tabs... Oh My! Part 2: Vim Windows</title>
    <link rel="alternate" href="/2013/11/27/vim-windows.html"/>
    <id>/2013/11/27/vim-windows.html</id>
    <published>2013-11-27T00:00:00Z</published>
    <updated>2013-11-27T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;In the second part of this series, we&amp;#39;ll be covering Vim windows. Windows are simply
the &lt;strong&gt;viewports&lt;/strong&gt; into &lt;a href="http://reefpoints.dockyard.com/2013/10/22/vim-buffers.html"&gt;buffers&lt;/a&gt;
and I&amp;#39;m 110% sure that they are a huge part of your daily workflow.&lt;/p&gt;

&lt;p&gt;Yes, there are numerous plugins that make our lives a lot easier, but let&amp;#39;s
dive into a powerful defaults that Vim offers us.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll first cover the basics, and then learn some neat window management commands.&lt;/p&gt;

&lt;h2&gt;Starting a Vim Session&lt;/h2&gt;

&lt;h3&gt;One File&lt;/h3&gt;

&lt;p&gt;Vim windows are not complicated to use; if you want to open a file, &lt;code&gt;file_one.txt&lt;/code&gt;, simply:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;$ vim file_one.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Multiple Files&lt;/h3&gt;

&lt;p&gt;If you want to open multiple files, &lt;code&gt;file_one.txt&lt;/code&gt;, &lt;code&gt;file_two.txt&lt;/code&gt;, and &lt;code&gt;file_three.txt&lt;/code&gt;, you can
do the following:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;$ vim file_one.txt file_two.txt file_three.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This opens the first file, &lt;code&gt;file_one.txt&lt;/code&gt;, into a window.
Files &lt;code&gt;file_two.txt&lt;/code&gt; and &lt;code&gt;file_three.txt&lt;/code&gt; are opened as inactive buffers.&lt;/p&gt;

&lt;h3&gt;Multiple Horizontal Splits&lt;/h3&gt;

&lt;p&gt;Say you want to view multiple files at once. Good news! You can
open all files and place them into &lt;strong&gt;horizontal splits&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;$ vim -o file_one.txt file_two.txt file_three.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Multiple Vertical Splits&lt;/h3&gt;

&lt;p&gt;Don&amp;#39;t like horizontal splits? Better news! You can open them all as &lt;strong&gt;vertical splits&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;$ vim -O file_one.txt file_two.txt file_three.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Within a Vim Session&lt;/h2&gt;

&lt;p&gt;There are two main arrangements for splitting windows, vertical and horizontal. Let&amp;#39;s say
we&amp;#39;re editing a file and want to open up another file. We can do the following:&lt;/p&gt;

&lt;h3&gt;Horizontal Splits&lt;/h3&gt;

&lt;p&gt;This will open &lt;code&gt;another_file.txt&lt;/code&gt; as &lt;strong&gt;horizontal split&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:split another_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can use this abbreviation:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:sp another_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In addition, you can specify how large the new split will be by passing
in a numerical value. This value will represent the line numbers shown within the
split.&lt;/p&gt;

&lt;p&gt;For example, this will reveal 25 lines of &lt;code&gt;another_file.txt&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:25sp another_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Lastly, you can open a &lt;strong&gt;split&lt;/strong&gt; window with &lt;code&gt;CTRL-W s&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Vertical Splits&lt;/h3&gt;

&lt;p&gt;You can open files as &lt;strong&gt;vertical splits&lt;/strong&gt; as well.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:vsplit another_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Which is abbreviated as:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:vsp another_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Vertical splits&lt;/strong&gt; can also take in a numerical value, which corresponds to the
character width of the column.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:30vsp another_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally, you can open a &lt;strong&gt;vertical split&lt;/strong&gt; with &lt;code&gt;CTRL-W v&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;New Files&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s create a new file.&lt;/p&gt;

&lt;p&gt;Use, &lt;code&gt;:new&lt;/code&gt; to create a new file inside the current window.
After you save the file, it will be created within your current directory.
You can also use the abbreviation &lt;code&gt;:n&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:n new_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If we specify the path, we can also create files inside existing directories.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:n ../existing_dir/new_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Use &lt;code&gt;:vnew&lt;/code&gt; or &lt;code&gt;:vne&lt;/code&gt; to create a new file inside a new &lt;strong&gt;vertical split&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:vne new_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Lastly, we can use &lt;code&gt;CTRL-w n&lt;/code&gt; to create a new file inside a &lt;strong&gt;horizontal split&lt;/strong&gt;.
Note that we have not specified a file name. Upon saving the file with &lt;code&gt;:w&lt;/code&gt;, we
can give the file a name. Such that:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;# CTRL-w n

:w this_is_a_new_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Switching Windows&lt;/h3&gt;

&lt;p&gt;Switching windows ain&amp;#39;t hard either!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL-w h&lt;/code&gt; = Switch to the window to the left&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w j&lt;/code&gt; = Switch to the window below&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w k&lt;/code&gt; = Switch to the window above&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w l&lt;/code&gt; = Switch to the window to the right&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Moving Windows&lt;/h3&gt;

&lt;p&gt;I&amp;#39;ve realized that window placement is incredibly useful
when pairing with another person. Here&amp;#39;s are a some ways to adjust
the windows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL-w T&lt;/code&gt; = Move current window to a new tab&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w r&lt;/code&gt; = &lt;em&gt;Rotates&lt;/em&gt; the windows from left to right - only if the windows
are split vertically&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w R&lt;/code&gt; = &lt;em&gt;Rotates&lt;/em&gt; the windows from right to left - only if the windows
are split vertically&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w H&lt;/code&gt; = Move current window the far left and use the full height of the screen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w J&lt;/code&gt; = Move current window the far bottom and use the full width of the screen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w K&lt;/code&gt; = Move current window the far top and full width of the screen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w L&lt;/code&gt; = Move current window the far right and full height of the screen&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Resizing Windows&lt;/h3&gt;

&lt;p&gt;Sometimes windows open up funny or are rendered incorrectly after separating from
an external monitor. Or maybe you want to make more room for an important file.&lt;/p&gt;

&lt;p&gt;We can easily solve those problems with the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL-w =&lt;/code&gt; = Resize the windows &lt;em&gt;equally&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w &amp;gt;&lt;/code&gt; = Incrementally increase the window to the right

&lt;ul&gt;
&lt;li&gt;Takes a parameter, e.g. &lt;code&gt;CTRL-w 20 &amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w &amp;lt;&lt;/code&gt; = Incrementally increase the window to the left

&lt;ul&gt;
&lt;li&gt;Takes a parameter, e.g. &lt;code&gt;CTRL-w 20 &amp;lt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w -&lt;/code&gt; = Incrementally decrease the window&amp;#39;s height

&lt;ul&gt;
&lt;li&gt;Takes a parameter, e.g. &lt;code&gt;CTRL-w 10 -&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w +&lt;/code&gt; = Incrementally increase the window&amp;#39;s height

&lt;ul&gt;
&lt;li&gt;Takes a parameter, e.g. &lt;code&gt;CTRL-w 10 +&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;That was a lot to cover, but I do believe incorporating these commands into
your workflow will prove pretty helpful. Thanks for reading!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Think</title>
    <link rel="alternate" href="/2013/11/15/think.html"/>
    <id>/2013/11/15/think.html</id>
    <published>2013-11-15T00:00:00Z</published>
    <updated>2013-11-15T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Ever since &lt;a href="http://wickedgoodruby.com/2013/speakers/matt_aimonetti"&gt;Matt Aimonetti&amp;#39;s talk at
Wicked Good Ruby&lt;/a&gt;
on there being such thing as bad code, I&amp;#39;ve felt I&amp;#39;ve
needed to write a blog post about the &lt;a href="https://en.wikipedia.org/wiki/Cargo_cult"&gt;cargo
culting&lt;/a&gt; that happens in
the development world.&lt;/p&gt;

&lt;h2&gt;Sandi Metz&amp;#39;s Rules&lt;/h2&gt;

&lt;p&gt;Back in January, &lt;a href="http://rubyrogues.com/087-rr-book-clubpractical-object-oriented-design-in-ruby-with-sandi-metz/"&gt;Sandi Metz was on Ruby
Rogues&lt;/a&gt;
to discuss her book, &lt;strong&gt;&lt;a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330/"&gt;Practical Object-Oriented Design in Ruby&lt;/a&gt;&lt;/strong&gt;.
Out of this conversation came &amp;quot;&lt;a href="https://gist.github.com/henrik/4509394"&gt;Sandi Metz&amp;#39;s
rules&lt;/a&gt;&amp;quot;. Many
in the Ruby community took these rules as gospel, without knowing the
context in which these rules were created.&lt;/p&gt;

&lt;p&gt;The rules, for those unfamilar:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your class can be no longer than 100 lines of code&lt;/li&gt;
&lt;li&gt;Your methods can be no longer than five lines of code&lt;/li&gt;
&lt;li&gt;You can pass no more than four parameters and you can&amp;#39;t just make it one big hash&lt;/li&gt;
&lt;li&gt;When a call comes into your Rails controller, you can only instantiate one object to do whatever it is that needs to be done&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sandi joined Matt during his talk at Wicked Good Ruby and &lt;a href="http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=VO-NvnZfMA4#t=1380"&gt;gave some background to the
story of her rules&lt;/a&gt;.
To paraphase Sandi, at the time she was working with a group that had multi-thousand line controllers with
multi-hundred line methods. These controllers and methods represented
one end of a spectrum, which made code incredibly hard to read and maintain.
They were begging Sandi for guidelines with which they could try to
correct this problem. What she did was create a set of rules that
lived on the opposite side of the extreme, to force them to meet
somewhere in the middle.&lt;/p&gt;

&lt;p&gt;In reality, these rules are a different way of looking at rules many of
us strive for in the first place. An example: The 100 lines per class
rule is really forcing you to create classes with the &lt;a href="https://en.wikipedia.org/wiki/Single_responsibility_principle"&gt;Single
Responsibility Principle&lt;/a&gt; in mind.&lt;/p&gt;

&lt;p&gt;My issue is not with these rules as they exist, but with the
community&amp;#39;s cargo culting of these rules and treating them as The Four
Commandments. I don&amp;#39;t have an issue with you following them, as long as
you understand why they exist, and you feel as though they are
principles you believe in. Don&amp;#39;t just make five line methods because
Sandi said so, and if you follow these rules, you feel like you&amp;#39;ll be a
great developer. Adhering to Sandi&amp;#39;s rules does not make one great, it&amp;#39;s
understanding where these, or any rules, should and shouldn&amp;#39;t apply.
Sometimes a method that spans more than five lines will be more readable
and maintainable than the same method spread across five or six 5-line
methods. Striking that balance is where the power lies.&lt;/p&gt;

&lt;h2&gt;REMOTE&lt;/h2&gt;

&lt;p&gt;37signals just published
&lt;a href="http://www.amazon.com/Remote-Office-Required-Jason-Fried/dp/0804137501/"&gt;REMOTE&lt;/a&gt;, a book about
the benefits of allowing remote workers. I don&amp;#39;t disagree that
working remote has many benefits. At DockYard, we work from home from time
to time. We also strive to have people in the office more often than
not, not because Brian doesn&amp;#39;t think we aren&amp;#39;t working when we aren&amp;#39;t in
the office, but because it enables greater collaboration.&lt;/p&gt;

&lt;p&gt;DockYard is a consultancy; we have client work with deadlines we have to
meet. With having our developers and designers in the office together more
often than not, it removes the latency from discussing issues. I can
walk over to Steve and we can hash out an issue in a few minutes. If we
were all remote, I&amp;#39;d have to ping him on HipChat, hope he&amp;#39;s at his desk,
try to go over the issue text-only until we realize we need to have a
Google Hangout, etc. It makes more sense for us to be in the same place.&lt;/p&gt;

&lt;p&gt;The other benefit of DockYard working from the office is that our junior
developers enjoy the same face-to-face benefits. Also, body language
makes a huge difference when teaching or learning topic. When someone pauses,
has a slightly puzzled look on their face and says &amp;quot;....Ok&amp;quot;, it easy to
realize that a bit more background on the topic will really let them
grasp the topic, but an &amp;quot;ok&amp;quot; in HipChat removes all the body language we
could leverage.&lt;/p&gt;

&lt;p&gt;Removing the latency between a junior developer having a
question and getting the answer is crucial. If a junior developer has a
question that&amp;#39;s a show stopper, they can feel helpless while they wait
for someone to be around to answer that question. That helplessness is
killer; it makes someone feel like they aren&amp;#39;t helping, and can
potentially prevent them from asking other questions. If the that delay
is interpreted as the senior developer blowing them off, they will be
less inclined to ask questions in the future, hurting both themselves
and the team.&lt;/p&gt;

&lt;p&gt;A product company that employs experts (or creators) of a framework has
a much different situation, where working remote makes a lot more sense.
The conversations they have will be at a different level. They&amp;#39;ll all
have intimate knowledge of the code base, and so a few questions back
and forth or a quick Google Hangout achieves a great deal. The
conclusion was a result of the context they exist in. Remote workers
work great for them because they have the perfect mix of experts in
their domain; are working on products, which have very different
requirements and issues of client work; and have a customer support
group, which don&amp;#39;t necessarily need to collaborate while working a
customer through issues.&lt;/p&gt;

&lt;h2&gt;Figure Out What Works for YOU&lt;/h2&gt;

&lt;p&gt;In no way am I saying you should all work in the same office and
disregard Sandi&amp;#39;s rules. What I&amp;#39;m asking of the community is a bit of
critical thought. Just because someone smart said one thing, it doesn&amp;#39;t
mean it&amp;#39;s gospel. Realize that experience has led that person to that
conclusion, weigh your experience against it, and apply it if you can.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s just not hope that the gods give us food because we made bamboo
airplanes. Let&amp;#39;s realize that moving to XYZ comes with both drawbacks and
benefits, not just the benefits that everyone is touting.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Introducing Capybara-Extensions</title>
    <link rel="alternate" href="/2013/11/11/capybara-extensions.html"/>
    <id>/2013/11/11/capybara-extensions.html</id>
    <published>2013-11-11T00:00:00Z</published>
    <updated>2013-11-11T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Today we&amp;#39;re happy to announce &lt;a href="https://github.com/dockyard/capybara-extensions"&gt;CapybaraExtensions&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Testing with Capybara&lt;/h2&gt;

&lt;p&gt;We love Capybara at DockYard. We use it for virtually all of our integration tests and
rely on it for writing tests that not only replicate how users flow
through an application, but also for how they interact with page
elements.&lt;/p&gt;

&lt;p&gt;Briefly, let&amp;#39;s take a look at a Rails application with and without
Capybara. Without Capybara, inheriting from &lt;code&gt;ActionDispatch::IntegrationTest&lt;/code&gt; provides
some helpful &lt;code&gt;RequestHelpers&lt;/code&gt; like &lt;code&gt;get&lt;/code&gt;, which takes a path, some
parameters, and headers (via &lt;a href="http://guides.rubyonrails.org/testing.html#integration-testing-examples"&gt;RailsGuides&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;test_helper&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;UserFlowsTest&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActionDispatch&lt;/span&gt;::&lt;span class="constant"&gt;IntegrationTest&lt;/span&gt;
  fixtures &lt;span class="symbol"&gt;:users&lt;/span&gt;

  test &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;login and browse site&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    &lt;span class="comment"&gt;# login via https&lt;/span&gt;
    https!
    get &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;/login&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    assert_response &lt;span class="symbol"&gt;:success&lt;/span&gt;

    post_via_redirect &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;/login&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;username&lt;/span&gt;: users(&lt;span class="symbol"&gt;:david&lt;/span&gt;).username, &lt;span class="key"&gt;password&lt;/span&gt;: users(&lt;span class="symbol"&gt;:david&lt;/span&gt;).password
    assert_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/welcome&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, path
    assert_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Welcome david!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, flash[&lt;span class="symbol"&gt;:notice&lt;/span&gt;]

    https!(&lt;span class="predefined-constant"&gt;false&lt;/span&gt;)
    get &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;/posts/all&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    assert_response &lt;span class="symbol"&gt;:success&lt;/span&gt;
    assert assigns(&lt;span class="symbol"&gt;:products&lt;/span&gt;)
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Capybara adds some syntactic sugar with its
&lt;code&gt;Capybara::Session#visit&lt;/code&gt; method, and produces code that reads a lot cleaner and mimics
how a user engages with the application:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;test_helper&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;capybara&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;capybara_minitest_spec&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="comment"&gt;# MiniTest::Spec expectations for Capybara&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;PostsTest&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActionDispatch&lt;/span&gt;::&lt;span class="constant"&gt;IntegrationTest&lt;/span&gt;
  fixtures &lt;span class="symbol"&gt;:users&lt;/span&gt;

  test &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;login and browse site&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    visit login_path

    within find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;form#session-new&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="keyword"&gt;do&lt;/span&gt;
      fill_in &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;username&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;with&lt;/span&gt;: users(&lt;span class="symbol"&gt;:david&lt;/span&gt;).username
      fill_in &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;password&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;with&lt;/span&gt;: users(&lt;span class="symbol"&gt;:david&lt;/span&gt;).password
      click_button &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Submit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;end&lt;/span&gt;

    current_path.must_equal welcome_path
    page.must_have_content &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Welcome david!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

    visit posts_path
    page.must_have_content &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Welcome to ReefPoints!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Jonas Nicklas, who maintains Capybara, writes how the library leads to &lt;a href="http://www.elabs.se/blog/51-simple-tricks-to-clean-up-your-capybara-tests"&gt;cleaner tests and clearer intent&lt;/a&gt;. This is exactly what we
want from our tests, which not only test our code, but also
document our application&amp;#39;s behavior. A lot more could be written about
this idea, but I&amp;#39;m going to assume I&amp;#39;m preaching to the choir here and
jump into DockYard&amp;#39;s newest gem:
&lt;a href="https://rubygems.org/gems/capybara-extensions"&gt;CapybaraExtensions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CapybaraExtensions extends Capybara&amp;#39;s finders and matchers. Our goal is
to cull many of the &lt;code&gt;find&lt;/code&gt; statements from our tests and remove the
verbose CSS and
xpath locators that come along with them.&lt;/p&gt;

&lt;h2&gt;Finders&lt;/h2&gt;

&lt;h3&gt;find_&amp;lt;element&amp;gt;&lt;/h3&gt;

&lt;p&gt;The library contains helper
methods for finding elements like &lt;code&gt;form&lt;/code&gt;, &lt;code&gt;table&lt;/code&gt;, and lists, as well as
many HTML5 elements like &lt;code&gt;article&lt;/code&gt;, &lt;code&gt;aside&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt;, and &lt;code&gt;header&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So the above code in which we pass a CSS selector&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;within find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;form#session-new&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="keyword"&gt;do&lt;/span&gt;
  ...
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;becomes the following:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;within form(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Login&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="keyword"&gt;do&lt;/span&gt;
  ...
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this example, &amp;quot;Login&amp;quot; is text found in the form. Passing the text contained within the element we&amp;#39;re looking for better reflects what a user is thinking when she sees a form that
says &amp;quot;Login.&amp;quot;&lt;/p&gt;

&lt;p&gt;Finder methods are also aliased so that you can call &lt;code&gt;#form&lt;/code&gt;
instead of &lt;code&gt;#find_form&lt;/code&gt; (which you might expect from a finder method).
This makes for better readability with the oft-used &lt;code&gt;Capybara::Session#within&lt;/code&gt; method.&lt;/p&gt;

&lt;h3&gt;first_&amp;lt;element&amp;gt;&lt;/h3&gt;

&lt;p&gt;Each &amp;quot;find&amp;quot; method also has a corresponding &amp;quot;first&amp;quot; method. So when you
have multiple &lt;code&gt;article&lt;/code&gt; elements on a page with the text &amp;#39;Lorem ipsum,&amp;#39; you can call
&lt;code&gt;first_article(&amp;#39;Lorem ipsum&amp;#39;)&lt;/code&gt; without returning an ambiguous match in
Capybara.&lt;/p&gt;

&lt;h3&gt;&amp;lt;element&amp;gt;_number&lt;/h3&gt;

&lt;p&gt;In instances when you have lists or tables and you&amp;#39;d like to verify the
content of a specific &lt;code&gt;li&lt;/code&gt; or &lt;code&gt;tr&lt;/code&gt;, CapybaraExtensions allows
you to target the nth occurence of the element via
&lt;code&gt;#list_item_number&lt;/code&gt; and &lt;code&gt;#row_number&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So given the following HTML:&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;John Doe&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Jane Doe&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Juan Doe&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can find the second &lt;code&gt;li&lt;/code&gt; with:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;list_item_number(&lt;span class="integer"&gt;2&lt;/span&gt;) &lt;span class="comment"&gt;# =&amp;gt; 'Jane Doe'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Use these methods for testing how elements are being ordered.&lt;/p&gt;

&lt;h2&gt;Matchers&lt;/h2&gt;

&lt;p&gt;CapybaraExtensions extends Capybara&amp;#39;s matchers with methods for
verifying the presence of images, the value of input fields, and the
presence of meta tags. All of these methods return a boolean.&lt;/p&gt;

&lt;h3&gt;field_values&lt;/h3&gt;

&lt;p&gt;CapybaraExtensions comes with a &lt;code&gt;#has_field_value?&lt;/code&gt; method which checks
the value of a form field. Ensuring that your records save and update
correctly should be the domain of your unit tests, however this method
can come in handy when you&amp;#39;re not persisting data to the back-end. For
example, after performing a search, you may want to ensure that the
query persists in the search field after redirect.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;within form(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Search&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="keyword"&gt;do&lt;/span&gt;
  has_field_value?(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;search&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;capybara images&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="comment"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;images&lt;/h3&gt;

&lt;p&gt;Asserting that text appears on the page is easy with Capybara&amp;#39;s
&lt;code&gt;#must_have_content&lt;/code&gt; method; asserting
that a particular image appears has always been a little tougher.
&lt;code&gt;#must_have_image&lt;/code&gt; takes a hash with the &lt;code&gt;src&lt;/code&gt; and/or &lt;code&gt;alt&lt;/code&gt; attributes
you&amp;#39;re looking for.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;page.has_image?(&lt;span class="key"&gt;src&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;http://gallery.photo.net/photo/8385754-md.jpg&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
&lt;span class="key"&gt;alt&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Capybara&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="comment"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;meta_tags&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;#has_meta_tag&lt;/code&gt; checks the &lt;code&gt;head&lt;/code&gt; for meta tags. Just pass in the &lt;code&gt;name&lt;/code&gt;
and &lt;code&gt;content&lt;/code&gt; you&amp;#39;re expecting to find. We use this method quite a bit to ensure that our pages are looking good
from a search engine optimization standpoint.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;page.has_meta_tag?(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Introducing CapybaraExtensions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="comment"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We hope this gem makes your tests a little more descriptive and your &lt;code&gt;test_helper.rb&lt;/code&gt; a little lighter. As always, we welcome pull requests and issues via Github. Thanks!&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install CapybaraExtensions from &lt;a href="http://rubygems.org/gems/capybara-extensions"&gt;Rubygems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow CapybaraExtensions on &lt;a href="https://github.com/dockyard/capybara-extensions"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read up on CapybaraExtensions on
&lt;a href="http://rubydoc.info/gems/capybara-extensions/frames"&gt;RubyDoc.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Design Patterns: The Command Pattern</title>
    <link rel="alternate" href="/2013/11/05/design-patterns-command-pattern.html"/>
    <id>/2013/11/05/design-patterns-command-pattern.html</id>
    <published>2013-11-05T00:00:00Z</published>
    <updated>2013-11-05T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Let&amp;#39;s get ready for some football!&lt;/h2&gt;

&lt;p&gt;One of my favorite sports is American football; it&amp;#39;s strategic, physical,
and wild! As a fan - and once high school player - of the sport, I&amp;#39;ve gained some
valuable lessons from my experiences. For example, I&amp;#39;ve learned that &amp;quot;persistence
is key&amp;quot;, &amp;quot;giving up is for losers&amp;quot;, and that &amp;quot;water sucks, Gatorade is better.&amp;quot;&lt;/p&gt;

&lt;p&gt;While those are fine gems of wisdom, today we&amp;#39;ll be
covering one of the most overlooked teachings in football: the power
of &lt;strong&gt;Command&lt;/strong&gt; pattern.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Command&lt;/strong&gt; design pattern intends to separate and decouple an object of invocation
from the object that receives the message of invocation. We will
encapsulate all pertinent information of a method and execute the method
at a later time. Essentially, the &lt;strong&gt;Command&lt;/strong&gt; pattern gives us the ability
to queue a series of operations for a later time. Let&amp;#39;s dig in.&lt;/p&gt;

&lt;h2&gt;Put me in, Coach!&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s start by creating a &lt;code&gt;BostonNarwin&lt;/code&gt; class from which our
football players will inherit from.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# football.rb&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;BostonNarwin&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:action&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(action)
    &lt;span class="instance-variable"&gt;@action&lt;/span&gt; = action
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;name&lt;/span&gt;
    &lt;span class="predefined-constant"&gt;self&lt;/span&gt;.class
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, we&amp;#39;ll need some key players; let&amp;#39;s create &lt;code&gt;Quarterback&lt;/code&gt; and &lt;code&gt;Receiver&lt;/code&gt; classes.
For fun, we&amp;#39;re going to add a &lt;code&gt;TeamOwner&lt;/code&gt; class too.
All three of these classes are going to possess a method called &lt;code&gt;#execute&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each of these classes can be considered as instances of separate
&lt;strong&gt;commands&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# football.rb&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Quarterback&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;BostonNarwin&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:path&lt;/span&gt;, &lt;span class="symbol"&gt;:play&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(path, play)
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Hut! Hut! Red 19! Red 19! Hike!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@path&lt;/span&gt; = path
    &lt;span class="instance-variable"&gt;@play&lt;/span&gt; = play
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;execute&lt;/span&gt;
    file = &lt;span class="constant"&gt;File&lt;/span&gt;.open path, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;w&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    file.write &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;name&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;play&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="char"&gt;\n&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    file.close
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Receiver&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;BostonNarwin&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:path&lt;/span&gt;, &lt;span class="symbol"&gt;:play&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(path, play)
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Run, run, run!!!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@path&lt;/span&gt; = path
    &lt;span class="instance-variable"&gt;@play&lt;/span&gt; = play
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;execute&lt;/span&gt;
    file = &lt;span class="constant"&gt;File&lt;/span&gt;.open path, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    file.write &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;name&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;play&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="char"&gt;\n&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    file.close
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;TeamOwner&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;BostonNarwin&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:path&lt;/span&gt;, &lt;span class="symbol"&gt;:target&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(path, target)
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;We are moving the team from &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;prettify path&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt; to &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;prettify target&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@path&lt;/span&gt; = path
    &lt;span class="instance-variable"&gt;@target&lt;/span&gt; = target
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;execute&lt;/span&gt;
    &lt;span class="constant"&gt;FileUtils&lt;/span&gt;.mv path, target
    file = &lt;span class="constant"&gt;File&lt;/span&gt;.open target, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    file.write &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;name&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;: We moved from &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;prettify path&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt; to &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;prettify target&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    file.close
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;prettify&lt;/span&gt;(pathname)
    (pathname.chomp &lt;span class="constant"&gt;File&lt;/span&gt;.extname(pathname)).capitalize
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, let&amp;#39;s create a class that keeps track of the &lt;code&gt;Quarterback&lt;/code&gt;, &lt;code&gt;Receiver&lt;/code&gt;, and
&lt;code&gt;TeamOwner&lt;/code&gt; commands. We can use the
&lt;a href="http://reefpoints.dockyard.com/2013/10/01/design-patterns-composite-pattern.html"&gt;&lt;strong&gt;Composite&lt;/strong&gt; pattern&lt;/a&gt;
to create this new class.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# football.rb&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;CompositeCommand&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;BostonNarwin&lt;/span&gt;
  attr_accessor &lt;span class="symbol"&gt;:commands&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@commands&lt;/span&gt; = []
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;add_command&lt;/span&gt;(*args)
    args.each { |arg| commands &amp;lt;&amp;lt; arg }
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;execute&lt;/span&gt;
    commands.each { |command| command.execute }
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, we can kickoff some football commands!&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;load 'football.rb'

quarterback = Quarterback.new('boston.txt', 'I'm going to throw a perfect pass!')
# =&amp;gt; #&amp;lt;Quarterback:0x007ff6f5c5c148
     @action=&amp;quot;Hut! Hut! Red 19! Red 19! Hike!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @play=&amp;quot;I'm going to throw a perfect pass!&amp;quot;&amp;gt;

receiver = Receiver.new('boston.txt', 'I'm going to catch the ball!')
# =&amp;gt; #&amp;lt;Receiver:0x007ff6f5c949f8
     @action=&amp;quot;Run, run, run!!!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @play=&amp;quot;I'm going to catch the ball!&amp;quot;&amp;gt;

team_owner = TeamOwner.new('boston.txt', 'somerville.txt')
# =&amp;gt; #&amp;lt;TeamOwner:0x007ff6f5ccd028
     @action=&amp;quot;We are moving the team from Boston to Somerville!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @target=&amp;quot;somerville.txt&amp;quot;&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Great! Now we&amp;#39;ll create an instance of the &lt;code&gt;CompositeCommand&lt;/code&gt;, add
each sub-command with &lt;code&gt;#add_command&lt;/code&gt;, and then execute each command
with &lt;code&gt;#execute&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;command = CompositeCommand.new
# =&amp;gt; #&amp;lt;CompositeCommand:0x007ff6f5b82948 @commands=[]&amp;gt;

command.add_command quarterback, receiver, team_owner
# =&amp;gt; [#&amp;lt;Quarterback:0x007ff6f5c5c148
     @action=&amp;quot;Hut! Hut! Red 19! Red 19! Hike!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @play=&amp;quot;I'm going to throw a perfect pass!&amp;quot;&amp;gt;,
     #&amp;lt;Receiver:0x007ff6f5c949f8
     @action=&amp;quot;Run, run, run!!!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @play=&amp;quot;I'm going to catch the ball!&amp;quot;&amp;gt;,
     #&amp;lt;TeamOwner:0x007ff6f5ccd028
     @action=&amp;quot;We are moving the team from Boston to Somerville!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @target=&amp;quot;somerville.txt&amp;quot;&amp;gt;]

command.execute
# ...  Omitted for brevity ...

exit
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally, let&amp;#39;s list out the files in our current directory and view the contents
of our recently created text file.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;$ ls
# =&amp;gt; football.rb   somerville.txt

$ less somerville.txt
# =&amp;gt; Quarterback: I'm going to throw a perfect pass!
     Receiver: I'm going to catch the ball!
     TeamOwner: We moved from Boston to Somerville!
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Wow! The &lt;strong&gt;Command&lt;/strong&gt; pattern in action!&lt;/p&gt;

&lt;h2&gt;Discussion&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Command&lt;/strong&gt; pattern suggests that we create objects that perform
specific tasks and actions. For our example, the &lt;code&gt;Quarterback&lt;/code&gt; object
created a file, the &lt;code&gt;Receiver&lt;/code&gt; appended to the file, and the &lt;code&gt;TeamOwner&lt;/code&gt;
object moved it. Each of the command objects completed their action
through &lt;code&gt;CompositeCommand#execute&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Having one object, an instance of &lt;code&gt;CompositeCommand&lt;/code&gt;, that executes all
stored commands presents us with solutions ranging from simple file
manipulation to user triggered interaction. The &lt;strong&gt;Command&lt;/strong&gt; pattern
also allows us to &amp;quot;store&amp;quot; and &amp;quot;remember&amp;quot; commands prior to and after
execution.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed our example and go Boston Narwins!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Buffers, Windows, Tabs... Oh My! Part 1: Vim Buffers</title>
    <link rel="alternate" href="/2013/10/22/vim-buffers.html"/>
    <id>/2013/10/22/vim-buffers.html</id>
    <published>2013-10-22T00:00:00Z</published>
    <updated>2013-10-22T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;First off, &lt;a href="http://boston.redsox.mlb.com"&gt;GO SOX&lt;/a&gt;!!!11&lt;/p&gt;

&lt;p&gt;Now that I&amp;#39;ve reinforced my allegiance to America&amp;#39;s favorite baseball team, let&amp;#39;s
talk about Vim. In this series of posts, we&amp;#39;ll explore buffers,
windows, and tabs.&lt;/p&gt;

&lt;p&gt;Today, our topic will be &lt;em&gt;buffers&lt;/em&gt;, editable files that are
available in-memory.&lt;/p&gt;

&lt;p&gt;When you first open a file through a Vim session, you are creating and working
in a buffer, typically through a window. For the sake of today&amp;#39;s discussion,
we will consider working with multiple buffers through only one window, our
viewport of the working buffer.&lt;/p&gt;

&lt;h3&gt;Let&amp;#39;s open a buffer&lt;/h3&gt;

&lt;p&gt;We&amp;#39;re going to setup an easy exercise for today&amp;#39;s post. If you don&amp;#39;t want to
follow along, feel free to try the exercise in your own project.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s create a dummy directory and some of text files:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;mkdir dummy &amp;amp;&amp;amp; cd dummy
echo 'The Red Sox rule!' &amp;gt; redsox.txt &amp;amp;&amp;amp; echo 'Cardinals drool!' &amp;gt; cardinals.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, open up the &lt;code&gt;redsox.txt&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;vim redsox.txt      # =&amp;gt; The Red Sox rule!
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Congratulations, you&amp;#39;re already using buffers!&lt;/p&gt;

&lt;h3&gt;Buffer indicators&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s open the &lt;code&gt;cardinals.txt&lt;/code&gt; file in a &lt;em&gt;hidden&lt;/em&gt; buffer. We can accomplish
this through the current &lt;code&gt;redsox.txt&lt;/code&gt; buffer by using &lt;code&gt;:badd&lt;/code&gt; or &lt;code&gt;:bad&lt;/code&gt;. Next, we&amp;#39;ll
list out all buffers, hidden or active, with &lt;code&gt;:ls&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;# Inside the current buffer, get into Vim's command mode and use the command `:badd`.
# List all buffers with `:ls`.

:badd candinals.txt     # 'badd' =&amp;gt; 'Buffer ADD'
                        # You can also use `:bad`
:ls
  ### =&amp;gt;   1    %a   &amp;quot;redsox.txt&amp;quot;              line 1
           2         &amp;quot;cardinals.txt&amp;quot;           line 1
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;:ls&lt;/code&gt; command returns information about each buffer: the unique buffer
number, buffer indicators, file name, and the line number of your current
position within the file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Buffer number: A unique number to identify individual buffers.&lt;/li&gt;
&lt;li&gt;Buffer indicators:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;: buffer in the current window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;: alternate buffer, which can be accessed by &lt;code&gt;CTRL-6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;: active buffer, loaded and visible&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt;: hidden buffer, loaded but not visible&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;: a buffer that cannot be modified, &lt;code&gt;modifiable&lt;/code&gt; off&lt;/li&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt;: a buffer that is readonly&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;: a buffer that has been successfully modified&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;: a buffer with read errors&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;/code&gt;: if there is no buffer indicator, it signifies a buffer that has not been
loaded yet&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Buffer name: The name of the file.&lt;/li&gt;
&lt;li&gt;Buffer line number: The current line number that the cursor is on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Working with multiple buffers&lt;/h3&gt;

&lt;p&gt;As we can see, our &lt;code&gt;cardinals.txt&lt;/code&gt; has yet to be loaded. Let&amp;#39;s open it into
our window and view our current buffers.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:e cardinals.txt   # =&amp;gt; Cardinals drool!

:ls
  ### =&amp;gt;   1    #    &amp;quot;redsox.txt&amp;quot;              line 1
           2    %a   &amp;quot;cardinals.txt&amp;quot;           line 1
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Nice! We can see that our &lt;code&gt;redsox.txt&lt;/code&gt; file is our alternate buffer. Let&amp;#39;s switch
to the &lt;code&gt;redsox.txt&lt;/code&gt; by hitting &lt;code&gt;CTRL-6&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we&amp;#39;ll create a new text file, &lt;code&gt;worldseries.txt&lt;/code&gt;, write &lt;code&gt;World Series!&lt;/code&gt; inside that file,
and check out our list of buffers.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:e worldseries.txt   # Write &amp;quot;World Series!&amp;quot; inside the file and save it.
:ls
  ### =&amp;gt;   1    #    &amp;quot;redsox.txt&amp;quot;              line 1
           2         &amp;quot;cardinals.txt&amp;quot;           line 1
           3    %a   &amp;quot;worldseries.txt&amp;quot;         line 1
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Our alternate buffer is the &lt;code&gt;redsox.txt&lt;/code&gt; file. Remember, if we want to quickly
switch to the alternate buffer, we can use &lt;code&gt;CTRL-6&lt;/code&gt;. What if we want to open the
&lt;code&gt;cardinals.txt&lt;/code&gt; into our current window?&lt;/p&gt;

&lt;p&gt;Well, we have a couple of options. From the &lt;code&gt;worldseries.txt&lt;/code&gt; file, we can use the
following vim commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:bp&lt;/code&gt; :  Switch to the previous buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:b2&lt;/code&gt; :  Switch to buffer number 2

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:b&lt;/code&gt; : Takes a buffer number as an argument&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go ahead and give it a try.&lt;/p&gt;

&lt;p&gt;Here are some other pertinent buffer commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:bn&lt;/code&gt; : Switch to the next buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:ball&lt;/code&gt; : Open all buffers into windows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:brew&lt;/code&gt; : Go back to the first buffer in the list - &amp;quot;Buffer REWind&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bd&lt;/code&gt; : Delete the buffer - also takes buffer numbers as arguments

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:bd 1 2 3&lt;/code&gt; : Will remove buffer numbers 1, 2, and 3&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;code&gt;:q&lt;/code&gt; is not the same as &lt;code&gt;:bd&lt;/code&gt;... try it and verify with &lt;code&gt;:ls&lt;/code&gt;!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;So what good are buffers?&lt;/h3&gt;

&lt;p&gt;To be honest, I just realized the power of buffers about a month ago.
Previously, thanks to a large monitor, I would have multtple windows
- as many as 6-8 - open during one Vim session.
Multiple windows are great, however, if I really needed to focus on a few
files, I&amp;#39;d have to close each insignificant file window.&lt;/p&gt;

&lt;p&gt;Nowadays, my workflow comprises of two or three windows, with multiple buffers in the background.
This has allowed me to rapidly move between files that I actively open and edit.&lt;/p&gt;

&lt;h3&gt;Remapping buffer commands&lt;/h3&gt;

&lt;p&gt;Here are some key remappings that speed up buffer movement:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;quot; ~/.vimrc (or wherever else you keep your .vimrc)

&amp;quot; Move to the previous buffer with &amp;quot;gp&amp;quot;
nnoremap gp :bp&amp;lt;CR&amp;gt;

&amp;quot; Move to the next buffer with &amp;quot;gn&amp;quot;
nnoremap gn :bn&amp;lt;CR&amp;gt;

&amp;quot; List all possible buffers with &amp;quot;gl&amp;quot;
nnoremap gl :ls&amp;lt;CR&amp;gt;

&amp;quot; List all possible buffers with &amp;quot;gb&amp;quot; and accept a new buffer argument [1]
nnoremap gb :ls&amp;lt;CR&amp;gt;:b
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Remapping &lt;code&gt;gp&lt;/code&gt; will remove the Vim default functionality of &lt;code&gt;gp&lt;/code&gt;.
Use &lt;code&gt;:h gp&lt;/code&gt; to read more about it.&lt;/p&gt;

&lt;p&gt;Hope that provides some insight into the capabilities of Vim buffers!
If there is anything you&amp;#39;d like to add, please feel free and
comment in the discussion area. Thanks!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[1] Special thanks to &lt;a href="http://www.reddit.com/r/vim/comments/1p2a62/a_painless_tutorial_on_vim_buffers/ccxzq7e"&gt;romainl&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Namespaced Pages</title>
    <link rel="alternate" href="/2013/10/06/namespaced-pages.html"/>
    <id>/2013/10/06/namespaced-pages.html</id>
    <published>2013-10-06T00:00:00Z</published>
    <updated>2013-10-06T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Simple Namespacing&lt;/h2&gt;

&lt;p&gt;We&amp;#39;ve been using our &lt;a href="https://github.com/dockyard/pages"&gt;Pages&lt;/a&gt; gem in
nearly all of our projects for over a year now. Its been great but could
only support pages on the root. I just released &lt;code&gt;0.2.0&lt;/code&gt; of the gem that
now supports namespacing:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;namespace &lt;span class="symbol"&gt;:work&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  pages &lt;span class="symbol"&gt;:client_1&lt;/span&gt;, &lt;span class="symbol"&gt;:client_2&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will give you the routes of &lt;code&gt;/work/client_1&lt;/code&gt; and &lt;code&gt;/work/client_2&lt;/code&gt;.
Your views will go into &lt;code&gt;app/views/work/pages&lt;/code&gt;. For more details see the
&lt;a href="https://github.com/dockyard/pages#namespacing"&gt;README&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a future release of &lt;code&gt;Pages&lt;/code&gt; we plan on adding support automatic
pages. For example, you will no longer need to declare the pages in your
&lt;code&gt;config/routes.rb&lt;/code&gt; file. As long as the templates exist in the
&lt;code&gt;app/views/pages&lt;/code&gt; directory the route will happen automatically. In
addition we will also add support for pages nested under different
namespaces, or accessible from certain authentication state. All in the
name of serving up static page goodness!&lt;/p&gt;
</content>
  </entry>
</feed>
<h2 class='nothin'>Your search returned no results. Perhaps you should try again.</h2></div><div class='push--big'></div><footer><div class='l-wrap'><div class='footer-group'><h3 class='footer-group__title'>EVENTS</h3><nav><a class='footer__event' href='http://wickedgoodruby.com/' target='_blank'><div class='footer__event--wgr'></div><h4 class='footer-title'>Wicked Good Ruby Conf</h4></a><a class='footer__event' href='http://www.meetup.com/Boston-Ember-js/' target='_blank'><div class='footer__event--ember'></div><h4 class='footer-title'>Boston Ember.js Meetup</h4></a><a class='footer__event' href='http://www.meetup.com/uxboston/' target='_blank'><div class='footer__event--ux'></div><h4 class='footer-title'>UX Boston Meetup</h4></a><a class='footer__event' href='http://openhack.github.io/boston/' target='_blank'><div class='footer__event--openhack'></div><h4 class='footer-title'>OpenHack Boston</h4></a></nav></div><div class='footer-group'><a href='/'><h3 class='footer-group__title'>BLOG</h3></a><nav class='blog-nav--footer'><a class='blog-nav-item--footer' href='/2013/11/27/vim-windows.html'><h4 class='footer-title'>Buffers, Windows, Tabs... Oh My! Part 2: Vim Windows</h4><p class='footer-desc'>A painless tutorial on Vim windows</p></a><a class='blog-nav-item--footer' href='/2013/11/15/think.html'><h4 class='footer-title'>Think</h4><p class='footer-desc'>Don't do what others tell you to do without thinking about it</p></a><a class='blog-nav-item--footer' href='/2013/11/11/capybara-extensions.html'><h4 class='footer-title'>Introducing Capybara-Extensions</h4><p class='footer-desc'>Write more descriptive tests with additional finders and matchers for Capybara.</p></a></nav></div><div class='footer-group'><a href='/hire-us'><h3 class='footer-group__title'>CONTACT</h3></a><p class='footer-desc'>DockYard HQ is located in Boston. Stop in sometime and meet our team!</p><a class='footer-address has-border--top' href='https://www.google.com/maps/preview#!q=DockYard%2C+Tremont+Street+%23200%2C+Boston%2C+MA&amp;data=!4m15!2m14!1m13!1s0x89e37083512ceab3%3A0x1e657c639844318d!3m8!1m3!1d197180!2d-70.970284!3d42.31435!3m2!1i400!2i802!4f13.1!4m2!3d42.357236!4d-71.061077' target='_blank'><p class='footer-desc'>DockYard Inc.</p><p class='footer-desc'>101 Tremont Street</p><p class='footer-desc'>Suite 200</p><p class='footer-desc'>Boston, MA 02108</p></a><a class="text-link" href="http://dockyard.com/hire-us">Get in touch.</a><div class='footer-social has-border--top'><a class='social-nav-item' data-icon='#' href='https://twitter.com/dockyard' target='_blank'><span class='is-hidden'>Twitter</span></a><a class='social-nav-item' data-icon='★' href='https://github.com/dockyard' target='_blank'><span class='is-hidden'>GitHub</span></a><a class='social-nav-item' data-icon='✒' href='http://reefpoints.dockyard.com/atom.xml' target='_blank'><span class='is-hidden'>RSS</span></a></div></div></div></footer><audio class='foghorn' preload='auto' src='/sound/foghorn.mp3'></audio><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>