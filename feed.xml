<!DOCTYPE html><html><head><title>DockYard</title><link href="/stylesheets/all-95e8dd0f.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-ce68a29a.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta charset='utf-8'><meta content='DockYard.com - ' name='description'><link href='//cloud.typography.com/6496052/702882/css/fonts.css' rel='stylesheet' type='text/css'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/favicon.png' rel='shortcut icon' type='image/x-icon'><link href='/favicon.png' rel='icon' type='image/x-icon'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                             ..
                                           .O.
                                       .:OO.
                                      :OOO.
                                    :OOO:.
                         ...      :OOOO:
                   ..ZOOOOOOOOO..OZ.O.
                   OOOOOOOOOOOOOOOOI
                  OOOOOOOOOOOOOOOOI,
                 OOOOOOOO. .OOOOOOOO:
                 OOOOOOOO   OOOOOOOOO:
                OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO
                OOOOOO?:   .OOOOOOOOO
               .OOOOO      OOOOOOOOOO
,OO ZO,        OOOOO,     OOOOOOOOOO+
 OOOOO.        OOOOO     OOOOOOOOOOO+
  OOO?        OOOOO     .OOOOOOOOOOO:
   OOO,      OOOOO.    .OOOOOOOOOOOO
    OOOOOOOOOOOOO.    .OOOOOOOOOOOO.
     OOOOOOOOOOOO.  .OOOOOOOOOOOOO.
      8OOOOOOOOOOOOOOOOOOOOOOOODO:
         :OOOOOOOOOOOOOOOOOOOO::

--></head><body class='feed'><header><div class='extended-nav-wrap'><div class='l-wrap--wide'><nav class='extended-nav'><a class="extended-nav--logo" data-icon="⌂" href="http://dockyard.com/"><span class='is-hidden'>Home</span></a>
<a class="extended-nav--close" data-icon="X" href="#"><span class='is-hidden'>Close</span></a><div class='extended-nav__items'><div class='extended-nav__items--mobile'><a class="extended-nav__item--work extended-nav__item" href="#">Work</a><nav class='work-nav--mobile'><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong></a></nav></div><a class="extended-nav__item" href="http://dockyard.com/team">Our Team</a><a class="extended-nav__item" href="http://dockyard.com/process">Process</a><a class="extended-nav__item" href="http://dockyard.com/community">Community</a><a class="extended-nav__item active" href="/">Blog</a><a class="extended-nav__item" href="http://dockyard.com/hire-us">Hire Us</a></div></nav><nav class='work-nav'><h6>Selected Work</h6><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong><p>Credit card advice from real people.</p></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong><p>You should be training. Right now.</p></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong><p>Ask officials questions on city, state, and federal levels.</p></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong><p>How technology helped repeal the #TechTax.</p></a></nav></div></div><nav class='main-nav-wrap'><div class='main-nav l-wrap--wide'><a class="logo" href="http://dockyard.com">DockYard</a><a class="club-sandwich" data-icon="☰" href="#"><span class='is-hidden'>Navigation</span></a></div></nav></header><div class='push--header'></div><div class='l-wrap--blog'><a href="/"><strong class='logo--blog'>ReefPoints</strong><strong class='logo--blog__tagline'>Blog</strong></a><nav class='blog-nav'><a class="blog-nav__item " href="/">Posts</a><a class="blog-nav__item " href="/categories.html">Categories</a><a class="blog-nav__item " href="/authors.html">Authors</a></nav></div><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-05-04T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Stop using Ember Appkit Rails</title>
    <link rel="alternate" href="/2014/05/04/stop-using-ember-appkit-rails.html"/>
    <id>/2014/05/04/stop-using-ember-appkit-rails.html</id>
    <published>2014-05-04T00:00:00Z</published>
    <updated>2014-05-04T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;A few months ago I released a gem called &lt;a href="https://github.com/dockyard/ember-appkit-rails"&gt;Ember Appkit
Rails&lt;/a&gt;. Let me start by
apologizing for its existence. For those that began projects around
eak-rails it started with good intentions and felt right at first but we
have abandoned the gem at DockYard.&lt;/p&gt;

&lt;p&gt;eak-rails was/is a merging of &lt;a href="https://github.com/stefanpenner/ember-app-kit"&gt;Ember App
Kit&lt;/a&gt; and Rails. It does
some heavy monkey patching to Rails&amp;#39; Asset Pipeline to give as much
project hierarchical power to your Ember code as your Rails code
enjoys.&lt;/p&gt;

&lt;p&gt;We used eak-rails in smaller projects, and intro to Ember courses. In
small doses eak-rails felt right. However, when the surface area of an
application increased eak-rails did not scale well. Having your Ember
and Rails files mixed into the same directories created more problems
than it solved.&lt;/p&gt;

&lt;p&gt;This week I will be focusing on how we are building Ember apps
backed with Rails at DockYard. Part of that will be in-line with what
fellow DockYarder &lt;a href="https://www.youtube.com/watch?v=ceFNLdswFxs&amp;amp;t=1h8m20s"&gt;Dan McClain presented at Boston Ember last
month&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For eak-rails users, we have not abandoned you. Anybody refusing to
migrate we&amp;#39;ll continue any &lt;strong&gt;critical&lt;/strong&gt; bug fixes but no new features.
We actually sunset the gem about 2 months ago.&lt;/p&gt;

&lt;p&gt;ember-cli is the future.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Guarding with arrays</title>
    <link rel="alternate" href="/2014/05/03/guarding-with-arrays.html"/>
    <id>/2014/05/03/guarding-with-arrays.html</id>
    <published>2014-05-03T00:00:00Z</published>
    <updated>2014-05-03T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This week I applied a pattern I&amp;#39;ve been using for years to two
separate pull requests from our devs. (I like to review almost all of the
code that DockYard devs write)&lt;/p&gt;

&lt;p&gt;In both cases I was able to help them refactor their code to use an
enumerator as code guards instead of conditional statements. Let&amp;#39;s take a
look at each example:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;users = &lt;span class="constant"&gt;User&lt;/span&gt;.where(&lt;span class="key"&gt;type&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;employee&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)

&lt;span class="keyword"&gt;if&lt;/span&gt; users.any?
  users.each &lt;span class="keyword"&gt;do&lt;/span&gt; |user|
    &lt;span class="comment"&gt;# ...&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this first example the &lt;code&gt;each&lt;/code&gt; is avoided if the &lt;code&gt;users&lt;/code&gt;
collection is empty. However, with arrays the enumerator only acts on each
member of the collection so we don&amp;#39;t need to avoid if the collection is
empty. We can refactor the above code into something like this:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;User&lt;/span&gt;.where(&lt;span class="key"&gt;type&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;employee&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).each &lt;span class="keyword"&gt;do&lt;/span&gt; |user|
   &lt;span class="comment"&gt;# ...&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Much cleaner!&lt;/p&gt;

&lt;p&gt;The next example may not be as straight forward but as we&amp;#39;ll see with
Ruby we can clean this up nicely.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;if&lt;/span&gt; params[&lt;span class="symbol"&gt;:ids&lt;/span&gt;]
  params[&lt;span class="symbol"&gt;:ids&lt;/span&gt;].each &lt;span class="keyword"&gt;do&lt;/span&gt; |id|
    &lt;span class="comment"&gt;# ...&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here we have a situation where &lt;code&gt;params[:ids]&lt;/code&gt; could contain a collection
of data. Or it could be &lt;code&gt;nil&lt;/code&gt;. Because of this we cannot just assume we
can always iterate over that value. In Ruby we can create a new &lt;code&gt;Array&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Array([&lt;span class="integer"&gt;1&lt;/span&gt;,&lt;span class="integer"&gt;2&lt;/span&gt;,&lt;span class="integer"&gt;3&lt;/span&gt;])
&lt;span class="comment"&gt;# =&amp;gt; [1,2,3]&lt;/span&gt;

Array(&lt;span class="predefined-constant"&gt;nil&lt;/span&gt;)
&lt;span class="comment"&gt;# =&amp;gt; []&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Notice in the second example that when we pass &lt;code&gt;nil&lt;/code&gt; it creates an
&lt;strong&gt;empty array&lt;/strong&gt;. Knowing this we can refactor our code:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Array(params[&lt;span class="symbol"&gt;:ids&lt;/span&gt;]).each &lt;span class="keyword"&gt;do&lt;/span&gt; |id|
  &lt;span class="comment"&gt;# ...&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you find yourself putting guards around enumerators odds are you can
refactor in a similar manner as I&amp;#39;ve shown above.&lt;/p&gt;

&lt;p&gt;BTW, I&amp;#39;ve been using this pattern for years but I don&amp;#39;t know if there is
an actual name for this. If you do please share!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>What is holding up the uniqueness validator?</title>
    <link rel="alternate" href="/2014/05/02/what-is-holding-up-uniqueness-validator.html"/>
    <id>/2014/05/02/what-is-holding-up-uniqueness-validator.html</id>
    <published>2014-05-02T00:00:00Z</published>
    <updated>2014-05-02T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/dockyard/ember-validations"&gt;ember-validations&lt;/a&gt; has
nearly all of the &lt;a href="https://github.com/dockyard/ember-validations#validators"&gt;validator
rules&lt;/a&gt; one needs.
One glarring omission is the &lt;code&gt;Uniqueness&lt;/code&gt; validator.&lt;/p&gt;

&lt;h3&gt;Not as straight forward as one would think&lt;/h3&gt;

&lt;p&gt;Before we even talk about the complication with implementing the remote
validator, we should talk about if &lt;code&gt;uniqueness&lt;/code&gt; should be both a remote 
&lt;strong&gt;and&lt;/strong&gt; local validator.&lt;/p&gt;

&lt;p&gt;Imagine you are working with
&lt;a href="https://github.com/emberjs/data"&gt;ember-data&lt;/a&gt;, you attempt to create a
new record with an email &lt;code&gt;test@example.com&lt;/code&gt;. If you already have a
record with that value for email in ember-data&amp;#39;s store should
&lt;code&gt;uniqueness&lt;/code&gt; first defer here before we hit remote? This ends up being a
strange thing because what if you have not persisted that first record
yet. Do we only run uniqueness checks against local records that have
been persisted? And how exactly would this fit in if you are mixing your
validations into the controller instead of the model?&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;email&lt;/code&gt; example isn&amp;#39;t working for you, imagine you are adding a
bunch of line items to a parent record. None of these line items have
been persisted yet. And you don&amp;#39;t want to allow your users to add
another until the current one they are working on is &amp;quot;valid&amp;quot;. Validating
uniqueness locally is all of a sudden very valuable. But also very
complex to implement properly.&lt;/p&gt;

&lt;h3&gt;No standard yet&lt;/h3&gt;

&lt;p&gt;If the local validator is too complex of an animal to tackle perhaps the
remote validator implementation will be easier. It is, in part at least.
We can rely on &lt;code&gt;Ember.run.debounce&lt;/code&gt; to ensure the the remote validator
doesn&amp;#39;t fire too frequenly when many changes are happening to the value
of a property. (i.e. entering text into a field)&lt;/p&gt;

&lt;p&gt;But where do we send this request for uniqueness? This is where I am
currently hung up. I really don&amp;#39;t want to implement a backend api
expectation into ember-validations. I was hoping that something like
[json-api][http:/jsonapi.org) would define this for me then I could rely upon that as a
starting expected endpoint. But I don&amp;#39;t think this is anywhere on their
radar.&lt;/p&gt;

&lt;p&gt;This being said, there is a possible solution. One of my co-workers &lt;a href="https://twitter.com/linstula"&gt;Lin
Reid&lt;/a&gt; has put together a PR for
introducing remote uniqueness to ember-validations. It is lacking tests
(hint hint, Lin!) but I think &lt;a href="https://github.com/dockyard/ember-validations/pull/117"&gt;this is moving in the right
direction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To summarize, uniqueness is not forgotten. It is just a pain in the ass
to do properly. Personally, I would prefer not to implement an API have
people buy into it now and have to change it (or be locked into it) a
few months from now.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Alert messages in Ember Apps</title>
    <link rel="alternate" href="/2014/05/01/alert-messages-in-ember-apps.html"/>
    <id>/2014/05/01/alert-messages-in-ember-apps.html</id>
    <published>2014-05-01T00:00:00Z</published>
    <updated>2014-05-01T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Something that feels missing from Ember is a way to send, from anywhere
in my app, a general alert message. Something that would pop up in my
app, display for a few seconds and disappear.&lt;/p&gt;

&lt;p&gt;Clearly, this is something that should not be part of Ember itself but it
is a common enough feature that someone should build it.&lt;/p&gt;

&lt;p&gt;I call it &lt;code&gt;Woof&lt;/code&gt;.&lt;/p&gt;

&lt;iframe width="620" height="465"
src="//www.youtube.com/embed/8wfG8ngFvPk" frameborder="0"
allowfullscreen&gt;&lt;/iframe&gt; 

&lt;p&gt;It currently only exists on &lt;a href="http://jsbin.com"&gt;jsbin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class="jsbin-embed"
href="http://jsbin.com/luhoquxi/7/embed?output"&gt;WoofWoof! Notifier for
Ember&lt;/a&gt;&lt;script src="http://static.jsbin.com/js/embed.js"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;So for the time being you&amp;#39;ll need to copy/paste. We&amp;#39;ll be extracting it
into a plugin soon enough.&lt;/p&gt;

&lt;p&gt;Basically, Woof will inject itself into your routes, controllers, and
components. You will need to embed the Woof component somewhere in your
templates:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;x-woof&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Woof injects a &lt;code&gt;woof&lt;/code&gt; object similar to how &lt;code&gt;ember-data&lt;/code&gt; injects a
&lt;code&gt;store&lt;/code&gt; object. You can push a message onto Woof using some of the
pre-defined types or create your own:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="local-variable"&gt;this&lt;/span&gt;.woof.info(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;This is an info message&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="local-variable"&gt;this&lt;/span&gt;.woof.pushObject({&lt;span class="key"&gt;type&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;customType&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;message&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Woof! Woof!
Woof!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This code comes with Twitter Bootstrap types setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;danger&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;info&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;success&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;warning&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;x-woof&lt;/code&gt; component will loop through all woofs in the array and
print out a div with the type as the class for specific styling
purposes.&lt;/p&gt;

&lt;p&gt;The code in the JSBin is setup and styled for Twitter Bootstrap.
The event handling is setup for removing the woof when the
css opacity transition completes. Browser support may vary.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Understanding validation graphs</title>
    <link rel="alternate" href="/2014/04/30/understanding-validation-graphs.html"/>
    <id>/2014/04/30/understanding-validation-graphs.html</id>
    <published>2014-04-30T00:00:00Z</published>
    <updated>2014-04-30T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;If you have heard me speak about
&lt;a href="https://github.com/dockyard/ember-validations"&gt;ember-validations&lt;/a&gt; then
you may have heard me mention the term &lt;strong&gt;validation graph&lt;/strong&gt;. What is
this? Why is it important?&lt;/p&gt;

&lt;p&gt;If you come from a Rails background then you are used to the validations
being stored in an array on the instance of the model. When you validate
your model all of those validations will be run and an errors object is
produced. If you make a change to a property you have to run the
validations again to determine the validity of the model.&lt;/p&gt;

&lt;p&gt;I would refer to the style of
validations described above as &lt;em&gt;lazy validations&lt;/em&gt;. Meaning the
validity of the model may not be truly representative of its
current state. We have to opt-into running the validations again to
determine this. Fortunately in most cases, the validations will run for us
before we save. On the server this all happens within a request/response
cycle so we don&amp;#39;t really care too much about the validations
being lazy because we care about the final result, not the state of the
model at any given point during that cycle.&lt;/p&gt;

&lt;p&gt;ember-validations has &lt;em&gt;eager validations&lt;/em&gt;. This means when the property
that is associated with any number of validations changes those
validations will run again to determine the state of the model. This is
great for client side apps that need to show the current state of the
entire model any time you make a change, say during a user sign up. I
might want to disable the Submit button if there are any failing
validations. If I make a correction I want the error message to go away
once the correction is made. I should not have to wait upon form
submission to see my errors.&lt;/p&gt;

&lt;p&gt;How does ember-validations do this? Let&amp;#39;s say you have the following
validations:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; UsersController =
Ember.ObjectController.extend(Ember.Validations.Mixin, {
  &lt;span class="key"&gt;validations&lt;/span&gt;: {
    &lt;span class="key"&gt;firstName&lt;/span&gt;: {
      &lt;span class="key"&gt;presence&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;,
      &lt;span class="key"&gt;length&lt;/span&gt;: &lt;span class="integer"&gt;5&lt;/span&gt;
    },
    &lt;span class="key"&gt;password&lt;/span&gt;: {
      &lt;span class="key"&gt;confirmation&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
    }
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There are 3 validations on 2 properties. Each validation is an
instantiated class that can observe the one or more properties. In the
case of the &lt;code&gt;firstName&lt;/code&gt; property the &lt;code&gt;Presence&lt;/code&gt; and &lt;code&gt;Length&lt;/code&gt; validators
are observing it. The &lt;code&gt;Confirmation&lt;/code&gt; validator is actually
observing &lt;code&gt;password&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;passwordConfirmation&lt;/code&gt; for changes. Each
validator has a &lt;code&gt;isValid&lt;/code&gt; flag that is set to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;
depending upon the result. Each of these validators are pushed onto a
&lt;code&gt;_validators&lt;/code&gt; array and the parent object is observing
&lt;code&gt;_validators.@each.isValid&lt;/code&gt; for any changes. If any of the validators
are &lt;code&gt;false&lt;/code&gt; the parent&amp;#39;s &lt;code&gt;isValid&lt;/code&gt; state is now &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please take a moment to re-read the above paragraph because it is very
important to have a good handle on this before we move forward. &lt;strong&gt;The
validating object&amp;#39;s &lt;code&gt;isValid&lt;/code&gt; flag is the result of its validator&amp;#39;s
&lt;code&gt;isValid&lt;/code&gt; flags&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because we are in quack-quack duck-typed JavaScript we don&amp;#39;t &lt;strong&gt;have&lt;/strong&gt; to
pass validator instances into the &lt;code&gt;_validators&lt;/code&gt; array. &lt;em&gt;What if we pass
another validatable object?&lt;/em&gt; Now things get interesting.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say we have a &lt;code&gt;Profile&lt;/code&gt; that belongs to a &lt;code&gt;User&lt;/code&gt;. The &lt;code&gt;Profile&lt;/code&gt;
can have its own set of validations as well as its own &lt;code&gt;isValid&lt;/code&gt; flag.
If the &lt;code&gt;Profile&lt;/code&gt; is mixed into the &lt;code&gt;Users&lt;/code&gt;&amp;#39;s validation graph then the
&lt;code&gt;User&lt;/code&gt; will be invalid when the &lt;code&gt;Profile&lt;/code&gt; is invalid. We can use this
pattern to build an incredibly deep and complex graph where the validation
state bubbles up to the root whenever a property change takes place
anywhere in the graph.&lt;/p&gt;

&lt;p&gt;We can do this simply with:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; UsersController =
Ember.ObjectController.extend(Ember.Validations.Mixin, {
  &lt;span class="key"&gt;validations&lt;/span&gt;: {
    &lt;span class="key"&gt;firstName&lt;/span&gt;: {
      &lt;span class="key"&gt;presence&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;,
      &lt;span class="key"&gt;length&lt;/span&gt;: &lt;span class="integer"&gt;5&lt;/span&gt;
    },
    &lt;span class="key"&gt;password&lt;/span&gt;: {
      &lt;span class="key"&gt;confirmation&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
    },
    &lt;span class="key"&gt;profile&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Notice &lt;code&gt;profile: true&lt;/code&gt; in the graph. As long as &lt;code&gt;profile&lt;/code&gt; is the path to
the object to validate against ember-validations will work its magic.&lt;/p&gt;

&lt;p&gt;However, the above only really works if the validations exist on the
&lt;code&gt;Profile&lt;/code&gt; &lt;strong&gt;model&lt;/strong&gt; and not the controller.&lt;/p&gt;

&lt;p&gt;A visualization of a complex validation graph might look like this. We
can see the &lt;code&gt;isValid&lt;/code&gt; states bubbling up to the original root node:&lt;/p&gt;

&lt;p&gt;&lt;img style="width: auto" src="http://i.imgur.com/QP2sYWT.gif"/&gt;&lt;/p&gt;

&lt;p&gt;I welcome suggestions and thoughts on this API as well as the validation graph in general.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The problem with server-rendered errors</title>
    <link rel="alternate" href="/2014/04/29/the-problem-with-server-rendered-errors.html"/>
    <id>/2014/04/29/the-problem-with-server-rendered-errors.html</id>
    <published>2014-04-29T00:00:00Z</published>
    <updated>2014-04-29T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The 3rd most popular question with
&lt;a href="https://github.com/dockyard/ember-validations"&gt;ember-validations&lt;/a&gt; is
how can the library work with server-rendered validation errors, such as
the ones returned with &lt;a href="https://github.com/emberjs/data"&gt;ember-data&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The short answer for now: it can&amp;#39;t.&lt;/p&gt;

&lt;p&gt;(btw, 2nd most popular question is about &lt;code&gt;uniqueness&lt;/code&gt;/remote validations
and the 1st most popular question is when will I provide a &lt;code&gt;dist/&lt;/code&gt;
directory... I&amp;#39;ll cover the 2nd Q in an upcoming blog post. As far as
&lt;code&gt;dist/&lt;/code&gt; its never going to happen, ever)&lt;/p&gt;

&lt;p&gt;Here is the problem. When you are dealing with a client-side model and a
server-rendered model there won&amp;#39;t always be a 1-to-1 representation of the
model. In those cases you can rely on ember-data&amp;#39;s serializer to
transform the properties on a server-rendered error object to ones that
exist on the client data model. How about properties that don&amp;#39;t exist at
all in any form on the client? You could have a validation error on
something only meant for server-rendered purposes. How do we best handle
this?&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s imagine for a moment that we can properly map all the properties
back to their client-side equivalents. Now what? How do you resolve
these validation errors? How do you know in the UI when the validation
error has been resolved to clear the error message? Are you preventing data
submission until your client model is valid? If the errors are happening
server-side the odds are high that these are not validations that can be
known to be resolved on the client unless you do another data
submission and wait to see how the server responds.&lt;/p&gt;

&lt;p&gt;So to re-cap the two isses are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Potential lack of context on which properties errors can map back to&lt;/li&gt;
&lt;li&gt;Inability to know when server-rendered validation errors are
satisfied on the client&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To start to consider a possible solution I think we need to step back
and consider the ultimate goal of client side validations. In my mind
this is puropse: &lt;em&gt;to help the user submit valid data to the server&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Client side validations are just UI sugar. They are there to guide your
users. ember-validations only has model-layer concerns, which means you
have to provide how the validation errors are displayed on your UI. This
is why I also wrote
&lt;a href="https://github.com/dockyard/ember-easyForm"&gt;ember-easyForm&lt;/a&gt; which
handles the complexity of what I consider to be best practices of how
validation messages should be displayed and cleared. To fix this problem
would have to tackle it from both sides:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How will server-rendered errors be stored in the validation graph?
(ember-validations)&lt;/li&gt;
&lt;li&gt;How will server-rendered errors be displayed and resolved in the client?
(ember-easyForm)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Storing server-rendered errors&lt;/h3&gt;

&lt;p&gt;If you are already using ember-data then your data model is handling
this for you already. IMO you should never mix your validations into
your data model, they should be mixed into your controller:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; UserController =
Ember.ObjectController.extend(Ember.Validations.Mixin, {
  &lt;span class="key"&gt;validations&lt;/span&gt;: {
    &lt;span class="key"&gt;firstName&lt;/span&gt;: {
      &lt;span class="key"&gt;presence&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
    }
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This way the controller has its own &lt;code&gt;errors&lt;/code&gt; object which will not clash
with the &lt;code&gt;errors&lt;/code&gt; object on your data model. One possiblity of
referencing the model&amp;#39;s server-rendered errors is to have a &lt;code&gt;base&lt;/code&gt;
validator that is not part of the validation graph but who&amp;#39;s errors can
be used for presentation purposes.&lt;/p&gt;

&lt;h3&gt;Displaying server-rendered errors&lt;/h3&gt;

&lt;p&gt;So how do you properly display these error messages? Do you try to
associate them with a property? What if that property is not represented
by a form input? What if you aren&amp;#39;t even using a form? How do you know
when to clear the errors?&lt;/p&gt;

&lt;p&gt;I believe this is a complex issue. My first pass at handling this in
EasyForm will be to display all of the server-rendered errors in a
single place. An upcoming version of EasyForm will simply group all
errors in &lt;code&gt;base&lt;/code&gt; and display them. These errors will not clear out due
to any corrections made by the client. They will only clear when some
other action clears out those errors, for example when ember-data itself
clears out or changes the content of its &lt;code&gt;errors&lt;/code&gt; object.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This is far from ideal. This moves us away from the &amp;quot;best practices&amp;quot; for
&lt;a href="http://alistapart.com/article/inline-validation-in-web-forms"&gt;high conversion forms outlined by Luke
Wroblewski&lt;/a&gt;.
But it is better than not guiding your users. If the server errors for
any given reason we don&amp;#39;t want our users sitting there without any
feedback.&lt;/p&gt;

&lt;p&gt;I am very interested in other approaches and brainstorming on the best
direction for this. Please feel free to comment below.&lt;/p&gt;
</content>
  </entry>
</feed>
<div class='push--footer'></div><footer><div class='l-wrap'><div class='l-footer-group'><h3 class='footer-group__title'>EVENTS</h3><a class="footer__event--wgr" target="_blank" href="http://wickedgoodruby.com/">Wicked Good Ruby Conf</a><a class="footer__event--ember" target="_blank" href="http://www.meetup.com/Boston-Ember-js/">Boston Ember.js Meetup</a><a class="footer__event--ux" target="_blank" href="http://www.meetup.com/uxboston/">UX Boston Meetup</a><a class="footer__event--openhack" target="_blank" href="http://openhack.github.io/boston/">OpenHack Boston</a></div><div class='l-footer-group'><a href="/"><h3 class='footer-group__title'>BLOG</h3></a>
<a class="footer__post" href="/2014/05/04/stop-using-ember-appkit-rails.html"><strong>Stop using Ember Appkit Rails</strong><h6 class='footer-desc'>Just stop</h6></a>
<a class="footer__post" href="/2014/05/03/guarding-with-arrays.html"><strong>Guarding with arrays</strong><h6 class='footer-desc'>A common pattern we use</h6></a>
<a class="footer__post" href="/2014/05/02/what-is-holding-up-uniqueness-validator.html"><strong>What is holding up the uniqueness validator?</strong><h6 class='footer-desc'>One of the more requested features of ember-validations</h6></a></div><div class='l-footer-group'><a href="http://dockyard.com/hire-us"><h3 class='footer-group__title'>CONTACT</h3></a><h6 class='footer-desc'>DockYard HQ is located in Boston. Stop in sometime and meet our team!</h6><a class="footer__address" target="_blank" href="http://goo.gl/maps/zBGfn"><h6>DockYard Inc.<br>101 Tremont Street<br>Suite 200<br>Boston, MA 02108</h6></a>
<a class="text-link" href="http://dockyard.com/hire-us">Get in touch.</a><div class='social-links--footer'><a target="_blank" data-icon="#" class="social-link" href="https://twitter.com/dockyard"><span class='is-hidden'>Twitter</span></a>
<a target="_blank" data-icon="★" class="social-link" href="https://github.com/dockyard"><span class='is-hidden'>GitHub</span></a>
<a target="_blank" data-icon="✒" class="social-link" href="http://reefpoints.dockyard.com/atom.xml"><span class='is-hidden'>RSS</span></a></div></div></div></footer><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>