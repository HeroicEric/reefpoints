<!DOCTYPE html><html><head><title>DockYard ~ Ruby on Rails and Ember.js Development | Boston-based Web &amp; Mobile Software Consultancy</title><link href="/stylesheets/all-2fe3bae3.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-d0af4672.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta content='DockYard.com - ' name='description'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                                                    ..
                                                                 ,Z+O.
                                                              .OO.O..
                                                             OZ..O.
                                                         ..OO..87.
                                                        .O7O..O...
                                                      .O...Z~O.
                                                   .:Z~. ..Z..
                                                  +O.O   .8..
                                     ...       .OO.  O  O?.
                             ..ZOOOOOOOOOZOOO.ZOZ.   .OO..
                           .OOOOOOOOOOOOOOOOOO..Z.   $O.
                         .ZOOOOOOOOOOOOOOOOOO.  .O..O.
                        .ZOOOOOOOOOOOOOOOOOOOZ  .:O$.
                        OZOOOOOOOOOOO...OOOOOOOZ$ZO
                      ..OOOOOOOOOOOOO  .OOOOOOOOOOO..
                      .OOOOOOOOOOOOOOOOOOOOOOOOOOOOO.
                      .OOOOOOOOOOOOOOOOOOOOOOOOOOOOZ.
                      OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.
                     .OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.
                     :OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.
                     ZOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ.
                     OOOOOOOOOOOOOOOOOOOOOOOOOOOO7OO.
                     ZOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ.
                     OOOOOOZOOOOOOOO.ZOOOOOOOOOOO7OO.
                     ZOOOOO.OOOOOOOO.OOOOOOOOOO.  OO.
...     ..           OOOOO.OOOOOOOO.OOOOOOOOO.   .O:
.OOZ...OOO.        ..OOOOO.OOOOOOO.OOOOOOOOZ.    .Z..
.OOOOOOOOO         .ZOOOOO.OOOOO..OOOOOOOO~      .Z
 .OOOOOOO.         .OOOOOO.OZZ..OOOOOOOOO.      .?O
  .OOOOOI.        .OOOOOOO..,ZOOOOOOOOOO..      .O.
   .OOOOZ.      ..ZOOOOOOOOOOOOOOOOOOOO~        .O.
   .OOOOO= .....ZOOOOOOOOOOOOOOOOOOOOOO.      ..O.
   ..OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ       .,OO.
    .ZOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.     ...OO..
     .OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.   ...OO.
     ..ZOOOOOOOOOOOOOOOOOOOOOOOOOOOO.... OZO..
      ...OOOOOOOOOOOOOOOOOOOOOOOOOOZOOOZO...
          .....~OOOOOOOOOOOOOOOOO:........
                ................
--></head><body id='blog'><header id='mobile-header'><div class='wrap'><a class='header-logo' href='/'>DockYard</a><div class='menu-button'></div></div><ul class='flexnav' data-breakpoint='481' id='mobile-nav'><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com'><span class='mobile-nav-icon fontello'>h</span><p class='main-nav-item'>Home</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com'><span class='mobile-nav-icon fontello'>w</span><p class='main-nav-item'>Work</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com'><span class='mobile-nav-icon fontello'>p</span><p class='main-nav-item'>Team</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com'><span class='mobile-nav-icon fontello'>c</span><p class='main-nav-item'>Community</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='/'><span class='mobile-nav-icon fontello'>b</span><p class='main-nav-item'>Blog</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com/hire-us'><span class='mobile-nav-icon fontello'>m</span><p class='main-nav-item'>Contact</p></a></li></ul></header><header id='site-header'><div class='wrap'><h1><a class='header-logo' href='http://dockyard.com'>DockYard</a></h1><ul class='main-nav'><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/work'>Work</a></li><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/team'>Team</a></li><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/community'>Community</a></li><li class='nav-work'><a class='main-nav-item current' href='/'>Blog</a></li><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/contact'>Contact</a></li></ul></div></header><section id='content'><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-11-11T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Introducing Capybara-Extensions</title>
    <link rel="alternate" href="/2013/11/11/capybara-extensions.html"/>
    <id>/2013/11/11/capybara-extensions.html</id>
    <published>2013-11-11T00:00:00Z</published>
    <updated>2013-11-11T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Today we&amp;#39;re happy to announce &lt;a href="https://github.com/dockyard/capybara-extensions"&gt;CapybaraExtensions&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Testing with Capybara&lt;/h2&gt;

&lt;p&gt;We love Capybara at DockYard. We use it for virtually all of our integration tests and
rely on it for writing tests that not only replicate how users flow
through an application, but also for how they interact with page
elements.&lt;/p&gt;

&lt;p&gt;Briefly, let&amp;#39;s take a look at a Rails application with and without
Capybara. Without Capybara, inheriting from &lt;code&gt;ActionDispatch::IntegrationTest&lt;/code&gt; provides
some helpful &lt;code&gt;RequestHelpers&lt;/code&gt; like &lt;code&gt;get&lt;/code&gt;, which takes a path, some
parameters, and headers (via &lt;a href="http://guides.rubyonrails.org/testing.html#integration-testing-examples"&gt;RailsGuides&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;test_helper&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;UserFlowsTest&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActionDispatch&lt;/span&gt;::&lt;span class="constant"&gt;IntegrationTest&lt;/span&gt;
  fixtures &lt;span class="symbol"&gt;:users&lt;/span&gt;

  test &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;login and browse site&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    &lt;span class="comment"&gt;# login via https&lt;/span&gt;
    https!
    get &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;/login&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    assert_response &lt;span class="symbol"&gt;:success&lt;/span&gt;

    post_via_redirect &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;/login&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;username&lt;/span&gt;: users(&lt;span class="symbol"&gt;:david&lt;/span&gt;).username, &lt;span class="key"&gt;password&lt;/span&gt;: users(&lt;span class="symbol"&gt;:david&lt;/span&gt;).password
    assert_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/welcome&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, path
    assert_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Welcome david!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, flash[&lt;span class="symbol"&gt;:notice&lt;/span&gt;]

    https!(&lt;span class="predefined-constant"&gt;false&lt;/span&gt;)
    get &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;/posts/all&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    assert_response &lt;span class="symbol"&gt;:success&lt;/span&gt;
    assert assigns(&lt;span class="symbol"&gt;:products&lt;/span&gt;)
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Capybara adds some syntactic sugar with its
&lt;code&gt;Capybara::Session#visit&lt;/code&gt; method, and produces code that reads a lot cleaner and mimics
how a user engages with the application:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;test_helper&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;capybara&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;capybara_minitest_spec&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="comment"&gt;# MiniTest::Spec expectations for Capybara&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;PostsTest&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActionDispatch&lt;/span&gt;::&lt;span class="constant"&gt;IntegrationTest&lt;/span&gt;
  fixtures &lt;span class="symbol"&gt;:users&lt;/span&gt;

  test &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;login and browse site&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    visit login_path

    within find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;form#session-new&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="keyword"&gt;do&lt;/span&gt;
      fill_in &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;username&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;with&lt;/span&gt;: users(&lt;span class="symbol"&gt;:david&lt;/span&gt;).username
      fill_in &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;password&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;with&lt;/span&gt;: users(&lt;span class="symbol"&gt;:david&lt;/span&gt;).password
      click_button &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Submit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;end&lt;/span&gt;

    current_path.must_equal welcome_path
    page.must_have_content &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Welcome david!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

    visit posts_path
    page.must_have_content &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Welcome to ReefPoints!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Jonas Nicklas, who maintains Capybara, writes how the library leads to &lt;a href="http://www.elabs.se/blog/51-simple-tricks-to-clean-up-your-capybara-tests"&gt;cleaner tests and clearer intent&lt;/a&gt;. This is exactly what we
want from our tests, which not only test our code, but also
document our application&amp;#39;s behavior. A lot more could be written about
this idea, but I&amp;#39;m going to assume I&amp;#39;m preaching to the choir here and
jump into DockYard&amp;#39;s newest gem:
&lt;a href="https://rubygems.org/gems/capybara-extensions"&gt;CapybaraExtensions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CapybaraExtensions extends Capybara&amp;#39;s finders and matchers. Our goal is
to cull many of the &lt;code&gt;find&lt;/code&gt; statements from our tests and remove the
verbose CSS and
xpath locators that come along with them.&lt;/p&gt;

&lt;h2&gt;Finders&lt;/h2&gt;

&lt;h3&gt;find_&amp;lt;element&amp;gt;&lt;/h3&gt;

&lt;p&gt;The library contains helper
methods for finding elements like &lt;code&gt;form&lt;/code&gt;, &lt;code&gt;table&lt;/code&gt;, and lists, as well as
many HTML5 elements like &lt;code&gt;article&lt;/code&gt;, &lt;code&gt;aside&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt;, and &lt;code&gt;header&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So the above code in which we pass a CSS selector&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;within find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;form#session-new&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="keyword"&gt;do&lt;/span&gt;
  ...
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;becomes the following:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;within form(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Login&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="keyword"&gt;do&lt;/span&gt;
  ...
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this example, &amp;quot;Login&amp;quot; is text found in the form. Passing the text contained within the element we&amp;#39;re looking for better reflects what a user is thinking when she sees a form that
says &amp;quot;Login.&amp;quot;&lt;/p&gt;

&lt;p&gt;Finder methods are also aliased so that you can call &lt;code&gt;#form&lt;/code&gt;
instead of &lt;code&gt;#find_form&lt;/code&gt; (which you might expect from a finder method).
This makes for better readability with the oft-used &lt;code&gt;Capybara::Session#within&lt;/code&gt; method.&lt;/p&gt;

&lt;h3&gt;first_&amp;lt;element&amp;gt;&lt;/h3&gt;

&lt;p&gt;Each &amp;quot;find&amp;quot; method also has a corresponding &amp;quot;first&amp;quot; method. So when you
have multiple &lt;code&gt;article&lt;/code&gt; elements on a page with the text &amp;#39;Lorem ipsum,&amp;#39; you can call
&lt;code&gt;first_article(&amp;#39;Lorem ipsum&amp;#39;)&lt;/code&gt; without returning an ambiguous match in
Capybara.&lt;/p&gt;

&lt;h3&gt;&amp;lt;element&amp;gt;_number&lt;/h3&gt;

&lt;p&gt;In instances when you have lists or tables and you&amp;#39;d like to verify the
content of a specific &lt;code&gt;li&lt;/code&gt; or &lt;code&gt;tr&lt;/code&gt;, CapybaraExtensions allows
you to target the nth occurence of the element via
&lt;code&gt;#list_item_number&lt;/code&gt; and &lt;code&gt;#row_number&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So given the following HTML:&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;John Doe&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Jane Doe&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Juan Doe&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can find the second &lt;code&gt;li&lt;/code&gt; with:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;list_item_number(&lt;span class="integer"&gt;2&lt;/span&gt;) &lt;span class="comment"&gt;# =&amp;gt; 'Jane Doe'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Use these methods for testing how elements are being ordered.&lt;/p&gt;

&lt;h2&gt;Matchers&lt;/h2&gt;

&lt;p&gt;CapybaraExtensions extends Capybara&amp;#39;s matchers with methods for
verifying the presence of images, the value of input fields, and the
presence of meta tags. All of these methods return a boolean.&lt;/p&gt;

&lt;h3&gt;field_values&lt;/h3&gt;

&lt;p&gt;CapybaraExtensions comes with a &lt;code&gt;#has_field_value?&lt;/code&gt; method which checks
the value of a form field. Ensuring that your records save and update
correctly should be the domain of your unit tests, however this method
can come in handy when you&amp;#39;re not persisting data to the back-end. For
example, after performing a search, you may want to ensure that the
query persists in the search field after redirect.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;within form(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Search&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="keyword"&gt;do&lt;/span&gt;
  has_field_value?(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;search&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;capybara images&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="comment"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;images&lt;/h3&gt;

&lt;p&gt;Asserting that text appears on the page is easy with Capybara&amp;#39;s
&lt;code&gt;#must_have_content&lt;/code&gt; method; asserting
that a particular image appears has always been a little tougher.
&lt;code&gt;#must_have_image&lt;/code&gt; takes a hash with the &lt;code&gt;src&lt;/code&gt; and/or &lt;code&gt;alt&lt;/code&gt; attributes
you&amp;#39;re looking for.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;page.has_image?(&lt;span class="key"&gt;src&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;http://gallery.photo.net/photo/8385754-md.jpg&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
&lt;span class="key"&gt;alt&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Capybara&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="comment"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;meta_tags&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;#has_meta_tag&lt;/code&gt; checks the &lt;code&gt;head&lt;/code&gt; for meta tags. Just pass in the &lt;code&gt;name&lt;/code&gt;
and &lt;code&gt;content&lt;/code&gt; you&amp;#39;re expecting to find. We use this method quite a bit to ensure that our pages are looking good
from a search engine optimization standpoint.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;page.has_meta_tag?(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Introducing CapybaraExtensions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="comment"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We hope this gem makes your tests a little more descriptive and your &lt;code&gt;test_helper.rb&lt;/code&gt; a little lighter. As always, we welcome pull requests and issues via Github. Thanks!&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install CapybaraExtensions from &lt;a href="http://rubygems.org/gems/capybara-extensions"&gt;Rubygems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow CapybaraExtensions on &lt;a href="https://github.com/dockyard/capybara-extensions"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read up on CapybaraExtensions on
&lt;a href="http://rubydoc.info/gems/capybara-extensions/frames"&gt;RubyDoc.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Design Patterns: The Command Pattern</title>
    <link rel="alternate" href="/2013/11/05/design-patterns-command-pattern.html"/>
    <id>/2013/11/05/design-patterns-command-pattern.html</id>
    <published>2013-11-05T00:00:00Z</published>
    <updated>2013-11-05T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Let&amp;#39;s get ready for some football!&lt;/h2&gt;

&lt;p&gt;One of my favorite sports is American football; it&amp;#39;s strategic, physical,
and wild! As a fan - and once high school player - of the sport, I&amp;#39;ve gained some
valuable lessons from my experiences. For example, I&amp;#39;ve learned that &amp;quot;persistence
is key&amp;quot;, &amp;quot;giving up is for losers&amp;quot;, and that &amp;quot;water sucks, Gatorade is better.&amp;quot;&lt;/p&gt;

&lt;p&gt;While those are fine gems of wisdom, today we&amp;#39;ll be
covering one of the most overlooked teachings in football: the power
of &lt;strong&gt;Command&lt;/strong&gt; pattern.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Command&lt;/strong&gt; design pattern intends to separate and decouple an object of invocation
from the object that receives the message of invocation. We will
encapsulate all pertinent information of a method and execute the method
at a later time. Essentially, the &lt;strong&gt;Command&lt;/strong&gt; pattern gives us the ability
to queue a series of operations for a later time. Let&amp;#39;s dig in.&lt;/p&gt;

&lt;h2&gt;Put me in, Coach!&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s start by creating a &lt;code&gt;BostonNarwin&lt;/code&gt; class from which our
football players will inherit from.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# football.rb&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;BostonNarwin&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:action&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(action)
    &lt;span class="instance-variable"&gt;@action&lt;/span&gt; = action
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;name&lt;/span&gt;
    &lt;span class="predefined-constant"&gt;self&lt;/span&gt;.class
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, we&amp;#39;ll need some key players; let&amp;#39;s create &lt;code&gt;Quarterback&lt;/code&gt; and &lt;code&gt;Receiver&lt;/code&gt; classes.
For fun, we&amp;#39;re going to add a &lt;code&gt;TeamOwner&lt;/code&gt; class too.
All three of these classes are going to possess a method called &lt;code&gt;#execute&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each of these classes can be considered as instances of separate
&lt;strong&gt;commands&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# football.rb&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Quarterback&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;BostonNarwin&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:path&lt;/span&gt;, &lt;span class="symbol"&gt;:play&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(path, play)
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Hut! Hut! Red 19! Red 19! Hike!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@path&lt;/span&gt; = path
    &lt;span class="instance-variable"&gt;@play&lt;/span&gt; = play
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;execute&lt;/span&gt;
    file = &lt;span class="constant"&gt;File&lt;/span&gt;.open path, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;w&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    file.write &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;name&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;play&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="char"&gt;\n&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    file.close
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Receiver&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;BostonNarwin&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:path&lt;/span&gt;, &lt;span class="symbol"&gt;:play&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(path, play)
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Run, run, run!!!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@path&lt;/span&gt; = path
    &lt;span class="instance-variable"&gt;@play&lt;/span&gt; = play
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;execute&lt;/span&gt;
    file = &lt;span class="constant"&gt;File&lt;/span&gt;.open path, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    file.write &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;name&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;play&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="char"&gt;\n&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    file.close
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;TeamOwner&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;BostonNarwin&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:path&lt;/span&gt;, &lt;span class="symbol"&gt;:target&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(path, target)
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;We are moving the team from &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;prettify path&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt; to &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;prettify target&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@path&lt;/span&gt; = path
    &lt;span class="instance-variable"&gt;@target&lt;/span&gt; = target
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;execute&lt;/span&gt;
    &lt;span class="constant"&gt;FileUtils&lt;/span&gt;.mv path, target
    file = &lt;span class="constant"&gt;File&lt;/span&gt;.open target, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    file.write &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;name&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;: We moved from &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;prettify path&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt; to &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;prettify target&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    file.close
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;prettify&lt;/span&gt;(pathname)
    (pathname.chomp &lt;span class="constant"&gt;File&lt;/span&gt;.extname(pathname)).capitalize
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, let&amp;#39;s create a class that keeps track of the &lt;code&gt;Quarterback&lt;/code&gt;, &lt;code&gt;Receiver&lt;/code&gt;, and
&lt;code&gt;TeamOwner&lt;/code&gt; commands. We can use the
&lt;a href="http://reefpoints.dockyard.com/2013/10/01/design-patterns-composite-pattern.html"&gt;&lt;strong&gt;Composite&lt;/strong&gt; pattern&lt;/a&gt;
to create this new class.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# football.rb&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;CompositeCommand&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;BostonNarwin&lt;/span&gt;
  attr_accessor &lt;span class="symbol"&gt;:commands&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@commands&lt;/span&gt; = []
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;add_command&lt;/span&gt;(*args)
    args.each { |arg| commands &amp;lt;&amp;lt; arg }
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;execute&lt;/span&gt;
    commands.each { |command| command.execute }
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, we can kickoff some football commands!&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;load 'football.rb'

quarterback = Quarterback.new('boston.txt', 'I'm going to throw a perfect pass!')
# =&amp;gt; #&amp;lt;Quarterback:0x007ff6f5c5c148
     @action=&amp;quot;Hut! Hut! Red 19! Red 19! Hike!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @play=&amp;quot;I'm going to throw a perfect pass!&amp;quot;&amp;gt;

receiver = Receiver.new('boston.txt', 'I'm going to catch the ball!')
# =&amp;gt; #&amp;lt;Receiver:0x007ff6f5c949f8
     @action=&amp;quot;Run, run, run!!!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @play=&amp;quot;I'm going to catch the ball!&amp;quot;&amp;gt;

team_owner = TeamOwner.new('boston.txt', 'somerville.txt')
# =&amp;gt; #&amp;lt;TeamOwner:0x007ff6f5ccd028
     @action=&amp;quot;We are moving the team from Boston to Somerville!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @target=&amp;quot;somerville.txt&amp;quot;&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Great! Now we&amp;#39;ll create an instance of the &lt;code&gt;CompositeCommand&lt;/code&gt;, add
each sub-command with &lt;code&gt;#add_command&lt;/code&gt;, and then execute each command
with &lt;code&gt;#execute&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;command = CompositeCommand.new
# =&amp;gt; #&amp;lt;CompositeCommand:0x007ff6f5b82948 @commands=[]&amp;gt;

command.add_command quarterback, receiver, team_owner
# =&amp;gt; [#&amp;lt;Quarterback:0x007ff6f5c5c148
     @action=&amp;quot;Hut! Hut! Red 19! Red 19! Hike!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @play=&amp;quot;I'm going to throw a perfect pass!&amp;quot;&amp;gt;,
     #&amp;lt;Receiver:0x007ff6f5c949f8
     @action=&amp;quot;Run, run, run!!!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @play=&amp;quot;I'm going to catch the ball!&amp;quot;&amp;gt;,
     #&amp;lt;TeamOwner:0x007ff6f5ccd028
     @action=&amp;quot;We are moving the team from Boston to Somerville!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @target=&amp;quot;somerville.txt&amp;quot;&amp;gt;]

command.execute
# ...  Omitted for brevity ...

exit
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally, let&amp;#39;s list out the files in our current directory and view the contents
of our recently created text file.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;$ ls
# =&amp;gt; football.rb   somerville.txt

$ less somerville.txt
# =&amp;gt; Quarterback: I'm going to throw a perfect pass!
     Receiver: I'm going to catch the ball!
     TeamOwner: We moved from Boston to Somerville!
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Wow! The &lt;strong&gt;Command&lt;/strong&gt; pattern in action!&lt;/p&gt;

&lt;h2&gt;Discussion&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Command&lt;/strong&gt; pattern suggests that we create objects that perform
specific tasks and actions. For our example, the &lt;code&gt;Quarterback&lt;/code&gt; object
created a file, the &lt;code&gt;Receiver&lt;/code&gt; appended to the file, and the &lt;code&gt;TeamOwner&lt;/code&gt;
object moved it. Each of the command objects completed their action
through &lt;code&gt;CompositeCommand#execute&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Having one object, an instance of &lt;code&gt;CompositeCommand&lt;/code&gt;, that executes all
stored commands presents us with solutions ranging from simple file
manipulation to user triggered interaction. The &lt;strong&gt;Command&lt;/strong&gt; pattern
also allows us to &amp;quot;store&amp;quot; and &amp;quot;remember&amp;quot; commands prior to and after
execution.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed our example and go Boston Narwins!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Buffers, Windows, Tabs... Oh My! Part 1: Vim Buffers</title>
    <link rel="alternate" href="/2013/10/22/vim-buffers.html"/>
    <id>/2013/10/22/vim-buffers.html</id>
    <published>2013-10-22T00:00:00Z</published>
    <updated>2013-10-22T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;First off, &lt;a href="http://boston.redsox.mlb.com"&gt;GO SOX&lt;/a&gt;!!!11&lt;/p&gt;

&lt;p&gt;Now that I&amp;#39;ve reinforced my allegiance to America&amp;#39;s favorite baseball team, let&amp;#39;s
talk about Vim. In this series of posts, we&amp;#39;ll explore buffers,
windows, and tabs.&lt;/p&gt;

&lt;p&gt;Today, our topic will be &lt;em&gt;buffers&lt;/em&gt;, editable files that are
available in-memory.&lt;/p&gt;

&lt;p&gt;When you first open a file through a Vim session, you are creating and working
in a buffer, typically through a window. For the sake of today&amp;#39;s discussion,
we will consider working with multiple buffers through only one window, our
viewport of the working buffer.&lt;/p&gt;

&lt;h3&gt;Let&amp;#39;s open a buffer&lt;/h3&gt;

&lt;p&gt;We&amp;#39;re going to setup an easy exercise for today&amp;#39;s post. If you don&amp;#39;t want to
follow along, feel free to try the exercise in your own project.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s create a dummy directory and some of text files:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;mkdir dummy &amp;amp;&amp;amp; cd dummy
echo 'The Red Sox rule!' &amp;gt; redsox.txt &amp;amp;&amp;amp; echo 'Cardinals drool!' &amp;gt; cardinals.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, open up the &lt;code&gt;redsox.txt&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;vim redsox.txt      # =&amp;gt; The Red Sox rule!
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Congratulations, you&amp;#39;re already using buffers!&lt;/p&gt;

&lt;h3&gt;Buffer indicators&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s open the &lt;code&gt;cardinals.txt&lt;/code&gt; file in a &lt;em&gt;hidden&lt;/em&gt; buffer. We can accomplish
this through the current &lt;code&gt;redsox.txt&lt;/code&gt; buffer by using &lt;code&gt;:badd&lt;/code&gt; or &lt;code&gt;:bad&lt;/code&gt;. Next, we&amp;#39;ll
list out all buffers, hidden or active, with &lt;code&gt;:ls&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;# Inside the current buffer, get into Vim's command mode and use the command `:badd`.
# List all buffers with `:ls`.

:badd candinals.txt     # 'badd' =&amp;gt; 'Buffer ADD'
                        # You can also use `:bad`
:ls
  ### =&amp;gt;   1    %a   &amp;quot;redsox.txt&amp;quot;              line 1
           2         &amp;quot;cardinals.txt&amp;quot;           line 1
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;:ls&lt;/code&gt; command returns information about each buffer: the unique buffer
number, buffer indicators, file name, and the line number of your current
position within the file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Buffer number: A unique number to identify individual buffers.&lt;/li&gt;
&lt;li&gt;Buffer indicators:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;: buffer in the current window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;: alternate buffer, which can be accessed by &lt;code&gt;CTRL-6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;: active buffer, loaded and visible&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt;: hidden buffer, loaded but not visible&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;: a buffer that cannot be modified, &lt;code&gt;modifiable&lt;/code&gt; off&lt;/li&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt;: a buffer that is readonly&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;: a buffer that has been successfully modified&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;: a buffer with read errors&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;/code&gt;: if there is no buffer indicator, it signifies a buffer that has not been
loaded yet&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Buffer name: The name of the file.&lt;/li&gt;
&lt;li&gt;Buffer line number: The current line number that the cursor is on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Working with multiple buffers&lt;/h3&gt;

&lt;p&gt;As we can see, our &lt;code&gt;cardinals.txt&lt;/code&gt; has yet to be loaded. Let&amp;#39;s open it into
our window and view our current buffers.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:e cardinals.txt   # =&amp;gt; Cardinals drool!

:ls
  ### =&amp;gt;   1    #    &amp;quot;redsox.txt&amp;quot;              line 1
           2    %a   &amp;quot;cardinals.txt&amp;quot;           line 1
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Nice! We can see that our &lt;code&gt;redsox.txt&lt;/code&gt; file is our alternate buffer. Let&amp;#39;s switch
to the &lt;code&gt;redsox.txt&lt;/code&gt; by hitting &lt;code&gt;CTRL-6&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we&amp;#39;ll create a new text file, &lt;code&gt;worldseries.txt&lt;/code&gt;, write &lt;code&gt;World Series!&lt;/code&gt; inside that file,
and check out our list of buffers.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:e worldseries.txt   # Write &amp;quot;World Series!&amp;quot; inside the file and save it.
:ls
  ### =&amp;gt;   1    #    &amp;quot;redsox.txt&amp;quot;              line 1
           2         &amp;quot;cardinals.txt&amp;quot;           line 1
           3    %a   &amp;quot;worldseries.txt&amp;quot;         line 1
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Our alternate buffer is the &lt;code&gt;redsox.txt&lt;/code&gt; file. Remember, if we want to quickly
switch to the alternate buffer, we can use &lt;code&gt;CTRL-6&lt;/code&gt;. What if we want to open the
&lt;code&gt;cardinals.txt&lt;/code&gt; into our current window?&lt;/p&gt;

&lt;p&gt;Well, we have a couple of options. From the &lt;code&gt;worldseries.txt&lt;/code&gt; file, we can use the
following vim commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:bp&lt;/code&gt; :  Switch to the previous buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:b2&lt;/code&gt; :  Switch to buffer number 2

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:b&lt;/code&gt; : Takes a buffer number as an argument&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go ahead and give it a try.&lt;/p&gt;

&lt;p&gt;Here are some other pertinent buffer commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:bn&lt;/code&gt; : Switch to the next buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:ball&lt;/code&gt; : Open all buffers into windows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:brew&lt;/code&gt; : Go back to the first buffer in the list - &amp;quot;Buffer REWind&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bd&lt;/code&gt; : Delete the buffer - also takes buffer numbers as arguments

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:bd 1 2 3&lt;/code&gt; : Will remove buffer numbers 1, 2, and 3&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;code&gt;:q&lt;/code&gt; is not the same as &lt;code&gt;:bd&lt;/code&gt;... try it and verify with &lt;code&gt;:ls&lt;/code&gt;!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;So what good are buffers?&lt;/h3&gt;

&lt;p&gt;To be honest, I just realized the power of buffers about a month ago.
Previously, thanks to a large monitor, I would have multtple windows
- as many as 6-8 - open during one Vim session.
Multiple windows are great, however, if I really needed to focus on a few
files, I&amp;#39;d have to close each insignificant file window.&lt;/p&gt;

&lt;p&gt;Nowadays, my workflow comprises of two or three windows, with multiple buffers in the background.
This has allowed me to rapidly move between files that I actively open and edit.&lt;/p&gt;

&lt;h3&gt;Remapping buffer commands&lt;/h3&gt;

&lt;p&gt;Here are some key remappings that speed up buffer movement:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;quot; ~/.vimrc (or wherever else you keep your .vimrc)

&amp;quot; Move to the previous buffer with &amp;quot;gp&amp;quot;
nnoremap gp :bp&amp;lt;CR&amp;gt;

&amp;quot; Move to the next buffer with &amp;quot;gn&amp;quot;
nnoremap gn :bn&amp;lt;CR&amp;gt;

&amp;quot; List all possible buffers with &amp;quot;gl&amp;quot;
nnoremap gl :ls&amp;lt;CR&amp;gt;

&amp;quot; List all possible buffers with &amp;quot;gb&amp;quot; and accept a new buffer argument [1]
nnoremap gb :ls&amp;lt;CR&amp;gt;:b
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Remapping &lt;code&gt;gp&lt;/code&gt; will remove the Vim default functionality of &lt;code&gt;gp&lt;/code&gt;.
Use &lt;code&gt;:h gp&lt;/code&gt; to read more about it.&lt;/p&gt;

&lt;p&gt;Hope that provides some insight into the capabilities of Vim buffers!
If there is anything you&amp;#39;d like to add, please feel free and
comment in the discussion area. Thanks!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[1] Special thanks to &lt;a href="http://www.reddit.com/r/vim/comments/1p2a62/a_painless_tutorial_on_vim_buffers/ccxzq7e"&gt;romainl&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Namespaced Pages</title>
    <link rel="alternate" href="/2013/10/06/namespaced-pages.html"/>
    <id>/2013/10/06/namespaced-pages.html</id>
    <published>2013-10-06T00:00:00Z</published>
    <updated>2013-10-06T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Simple Namespacing&lt;/h2&gt;

&lt;p&gt;We&amp;#39;ve been using our &lt;a href="https://github.com/dockyard/pages"&gt;Pages&lt;/a&gt; gem in
nearly all of our projects for over a year now. Its been great but could
only support pages on the root. I just released &lt;code&gt;0.2.0&lt;/code&gt; of the gem that
now supports namespacing:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;namespace &lt;span class="symbol"&gt;:work&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  pages &lt;span class="symbol"&gt;:client_1&lt;/span&gt;, &lt;span class="symbol"&gt;:client_2&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will give you the routes of &lt;code&gt;/work/client_1&lt;/code&gt; and &lt;code&gt;/work/client_2&lt;/code&gt;.
Your views will go into &lt;code&gt;app/views/work/pages&lt;/code&gt;. For more details see the
&lt;a href="https://github.com/dockyard/pages#namespacing"&gt;README&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Design Patterns: The Composite Pattern</title>
    <link rel="alternate" href="/2013/10/01/design-patterns-composite-pattern.html"/>
    <id>/2013/10/01/design-patterns-composite-pattern.html</id>
    <published>2013-10-01T00:00:00Z</published>
    <updated>2013-10-01T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Coffee Coffee&lt;/h2&gt;

&lt;p&gt;If you&amp;#39;re anything like me, you&amp;#39;ll agree that every morning needs to start
out with a cup of coffee. And, if you&amp;#39;re anything like me, you&amp;#39;ll have
at least three different coffee making apparatuses. And, if you&amp;#39;re
anything like me... you&amp;#39;ll soon realize you may have an addiction.&lt;/p&gt;

&lt;p&gt;Joke aside, each coffee contraption requires a specific procedure
to be completed in order to brew a cup of joe; each having multiple parts,
taking differing amounts of time, requiring various numbers of steps, etc.&lt;/p&gt;

&lt;p&gt;Our coffee making process can be described by a basic example
of the &lt;em&gt;Composite&lt;/em&gt; method pattern.&lt;/p&gt;

&lt;h2&gt;The Best Part of Waking Up is a Composite Pattern in Your Cup&lt;/h2&gt;

&lt;p&gt;We can start by thinking of each coffee maker and coffee related task as a &lt;em&gt;subclass&lt;/em&gt; of
our &lt;code&gt;CoffeeRoutine&lt;/code&gt;. &lt;code&gt;CoffeeRoutine&lt;/code&gt; will be known as the &lt;em&gt;component&lt;/em&gt;, the base
class or interface that possesses the commonalities of simple and complex
objects. &lt;code&gt;CoffeeRoutine#time&lt;/code&gt; is the common trait among all
coffee related classes.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;CoffeeRoutine&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:task&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(task)
    &lt;span class="instance-variable"&gt;@task&lt;/span&gt; = task
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time&lt;/span&gt;
    &lt;span class="float"&gt;0.0&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, we&amp;#39;ll create a couple of &lt;em&gt;leaf&lt;/em&gt; classes, which represent
indivisble portions of our pattern. Here are a couple of &lt;em&gt;leaf&lt;/em&gt; classes
that come to mind: &lt;code&gt;GrindCoffee&lt;/code&gt; and &lt;code&gt;BoilWater&lt;/code&gt;. These &lt;em&gt;leaf&lt;/em&gt; classes are
our most basic steps to making coffee.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;GrindCoffee&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CoffeeRoutine&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Grinding some coffee!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time&lt;/span&gt;
    &lt;span class="float"&gt;0.5&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;BoilWater&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CoffeeRoutine&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Boiling some water!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time&lt;/span&gt;
    &lt;span class="float"&gt;4.0&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;AddCoffee&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CoffeeRoutine&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Adding in the coffee!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time&lt;/span&gt;
    &lt;span class="float"&gt;1.0&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;g = GrindCoffee.new

g.task    # =&amp;gt; 'Grinding some coffee!'
g.time    # =&amp;gt; 0.5
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, we can get to the namesake of the pattern: the &lt;em&gt;composite&lt;/em&gt; class. A
&lt;em&gt;composite&lt;/em&gt; class is a &lt;em&gt;component&lt;/em&gt; that also contain
&lt;em&gt;subcomponents&lt;/em&gt;. &lt;em&gt;Composite&lt;/em&gt; classes can be made up of smaller
&lt;em&gt;composite&lt;/em&gt; classes or &lt;em&gt;leaf&lt;/em&gt; classes.&lt;/p&gt;

&lt;p&gt;Our various coffee making apparatuses can be thought of as &lt;em&gt;composites&lt;/em&gt;.
Let&amp;#39;s check out the &lt;code&gt;FrenchPress&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;FrenchPress&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CoffeeRoutine&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:task&lt;/span&gt;, &lt;span class="symbol"&gt;:steps&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(task)
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Using the French press to make coffee&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@steps&lt;/span&gt; = []
    add_step &lt;span class="constant"&gt;BoilWater&lt;/span&gt;.new
    add_step &lt;span class="constant"&gt;GrindCoffee&lt;/span&gt;.new
    add_step &lt;span class="constant"&gt;AddCoffee&lt;/span&gt;.new
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;add_step&lt;/span&gt;(step)
    steps &amp;lt;&amp;lt; step
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;remove_step&lt;/span&gt;(step)
    steps.delete step
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time_required&lt;/span&gt;
    total_time = &lt;span class="float"&gt;0.0&lt;/span&gt;
    steps.each { |step| total_time += step.time }
    total_time
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;However, we can simplify the &lt;code&gt;FrenchPress&lt;/code&gt; class by pulling out the
&lt;em&gt;composite&lt;/em&gt; functionality into its own class.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;CompositeTasks&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CoffeeRoutine&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:task&lt;/span&gt;, &lt;span class="symbol"&gt;:steps&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(task)
    &lt;span class="instance-variable"&gt;@steps&lt;/span&gt; = []
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;add_step&lt;/span&gt;(step)
    steps &amp;lt;&amp;lt; step
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;remove_step&lt;/span&gt;(step)
    steps.delete step
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time_required&lt;/span&gt;
    total_time = &lt;span class="float"&gt;0.0&lt;/span&gt;
    steps.each { |step| total_time += step.time }
    total_time
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we can create &lt;em&gt;composite&lt;/em&gt; coffee makers easily... They&amp;#39;ll look
something like this:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;FrenchPress&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CompositeTasks&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Using the FrenchPress to make coffee!!!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    add_step &lt;span class="constant"&gt;GrindCoffee&lt;/span&gt;.new
    add_step &lt;span class="constant"&gt;BoilWater&lt;/span&gt;.new
    add_step &lt;span class="constant"&gt;AddCoffee&lt;/span&gt;.new
    &lt;span class="comment"&gt;# ... Omitted actual steps to make coffee from a French press ...&lt;/span&gt;
    &lt;span class="comment"&gt;# ... Imagine PressPlunger class has been defined already ...&lt;/span&gt;
    add_step &lt;span class="constant"&gt;PressPlunger&lt;/span&gt;.new
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;DripMaker&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CompositeTasks&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Using the DripMaker to make coffee!!!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    add_step &lt;span class="constant"&gt;GrindCoffee&lt;/span&gt;.new
    add_step &lt;span class="constant"&gt;BoilWater&lt;/span&gt;
    add_step &lt;span class="constant"&gt;AddCoffee&lt;/span&gt;.new
    &lt;span class="comment"&gt;# ... Imagine PressStartButton class has been defined already ...&lt;/span&gt;
    add_step &lt;span class="constant"&gt;PressStartButton&lt;/span&gt;.new
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Swell... now we can call the &lt;code&gt;FrenchPress&lt;/code&gt; and &lt;code&gt;DripMaker&lt;/code&gt; coffee makers.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;frenchpress = FrenchPress.new

# =&amp;gt; #&amp;lt;FrenchPress:0x007f88fcf46410
       @task=&amp;quot;Using the FrenchPress to make coffee!!!&amp;quot;,
       @steps=
         [#&amp;lt;GrindCoffee:0x007f88fcf46370 @step=&amp;quot;Grinding some coffee!&amp;quot;&amp;gt;,
         #&amp;lt;BoilWater:0x007f88fcf46320 @step=&amp;quot;Boiling some water!&amp;quot;&amp;gt;]&amp;gt;
         #&amp;lt;AddCoffee:0x007f88fcf46329 @step=&amp;quot;Adding in the coffee!&amp;quot;&amp;gt;]&amp;gt;
         #&amp;lt;PressPlunger:0x007f88fcf46098 @step=&amp;quot;Pressing the plunger down!&amp;quot;&amp;gt;]&amp;gt;

dripmaker = DripMaker.new

# =&amp;gt; #&amp;lt;DripMaker:0x137t88fcf57109
       @task=&amp;quot;Using the DripMaker to make coffee!!!&amp;quot;,
       @steps=
         [#&amp;lt;GrindCoffee:0x007f88fcf46370 @step=&amp;quot;Grinding some coffee!&amp;quot;&amp;gt;,
         #&amp;lt;BoilWater:0x007f88fcf52520 @step=&amp;quot;Boiling some water!&amp;quot;&amp;gt;]&amp;gt;
         #&amp;lt;AddCoffee:0x007f88fcf46123 @step=&amp;quot;Adding in the coffee!&amp;quot;&amp;gt;]&amp;gt;
         #&amp;lt;PressStartButton:0x007f88fcf46432 @step=&amp;quot;Pushing the start button!&amp;quot;&amp;gt;]&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we can also check the time required for each coffee maker.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;frenchpress.time_required # =&amp;gt; 12.4
dripmaker.time_required   # =&amp;gt; 8.5
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Discussion&lt;/h2&gt;

&lt;p&gt;Implementing the &lt;em&gt;Composite&lt;/em&gt; pattern is pretty simple.&lt;/p&gt;

&lt;p&gt;We create a &lt;em&gt;component&lt;/em&gt; class that ties the numerous simple and
complex characteristics together. In our example, &lt;code&gt;CoffeeRoutine&lt;/code&gt;
defines an elementary method &lt;code&gt;#time&lt;/code&gt; and each child class implements
its own amount.&lt;/p&gt;

&lt;p&gt;Next, we create &lt;em&gt;leaf&lt;/em&gt; classes, &lt;code&gt;AddCoffee&lt;/code&gt;, &lt;code&gt;BoilWater&lt;/code&gt;, and &lt;code&gt;GrindCoffee&lt;/code&gt;,
that share the same characteristics with one another. Remember that it&amp;#39;s the nature
of &lt;em&gt;leaf&lt;/em&gt; classes to be simple. If you happen across a &lt;em&gt;leaf&lt;/em&gt; class that
could be broken up, it might potentially be a &lt;em&gt;composite&lt;/em&gt; class in disguise.
Break up those actions into individual &lt;em&gt;leaf&lt;/em&gt; classes and turn the original class
into a &lt;em&gt;composite&lt;/em&gt;. All of our &lt;em&gt;leaf&lt;/em&gt; classes had a &lt;code&gt;#time&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;composite&lt;/em&gt; class handles all the subtasks, essentially using the child classes
at its will. We can see that our two &lt;em&gt;composite&lt;/em&gt; classes and their methods, &lt;code&gt;FrenchPress#time_required&lt;/code&gt;
and &lt;code&gt;DripMaker#time_required&lt;/code&gt;. manipulate the method &lt;code&gt;#time&lt;/code&gt; from the &lt;em&gt;leaf&lt;/em&gt; classes.
Ultimately, our coffee makers are able to treat each step,
&lt;code&gt;GrindCoffee&lt;/code&gt;, &lt;code&gt;BoilWater&lt;/code&gt; and &lt;code&gt;AddCoffee&lt;/code&gt; uniformly.&lt;/p&gt;

&lt;p&gt;Hope this helps you with your morning routine!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Vim: Moving Lines Ain't Hard</title>
    <link rel="alternate" href="/2013/09/26/vim-moving-lines-aint-hard.html"/>
    <id>/2013/09/26/vim-moving-lines-aint-hard.html</id>
    <published>2013-09-26T00:00:00Z</published>
    <updated>2013-09-26T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;In the last post, we briefly discussed the power of the
&lt;a href="http://reefpoints.dockyard.com/2013/09/11/vim-staying-on-home-row-via-map.html"&gt;&lt;em&gt;map&lt;/em&gt; command&lt;/a&gt;.
In today&amp;#39;s post, we&amp;#39;re going to use &lt;em&gt;map&lt;/em&gt; again in order to move
lines and blocks around.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s use an example:
Our goal is to move the &lt;em&gt;first line&lt;/em&gt; to its proper location. From this:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- second line ---
--- third line ---
--- first line ---
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To this:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- first line ---
--- second line ---
--- third line ---
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Delete, Then Paste&lt;/h2&gt;

&lt;p&gt;Here is one of the most common ways, it ain&amp;#39;t pretty but it gets the job done.
We&amp;#39;ll delete the desired line and paste it to the target location.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- second line ---
--- third line ---
--- first line ---

# Delete the &amp;quot;first line&amp;quot;, move to the &amp;quot;second line&amp;quot;, and paste the registered
# &amp;quot;first line&amp;quot; above the &amp;quot;second line&amp;quot;.
#
# :3 --&amp;gt; &amp;lt;ENTER&amp;gt; --&amp;gt; dd --&amp;gt; j --&amp;gt; P
#
# or...
#
# :3d --&amp;gt; &amp;lt;ENTER&amp;gt; --&amp;gt; :2P --&amp;gt; &amp;lt;ENTER&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;I Like the Way You Move&lt;/h2&gt;

&lt;p&gt;The second way, use the &lt;em&gt;move&lt;/em&gt; command with &lt;code&gt;:m&lt;/code&gt;. I like this method a lot, as it
requires fewer keystrokes. It does require line numbers though. When using
absolute line numbers, the destination will be below the line number you specify,
so use &lt;code&gt;:m0&lt;/code&gt; to move to the top of the file.
Try using
&lt;a href="http://jeffkreeftmeijer.com/2013/vims-new-hybrid-line-number-mode/"&gt;hybrid mode&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- second line ---
--- third line ---
--- first line ---

# Move your cursor on the &amp;quot;first line&amp;quot; (the third line), use the *move* command and
# pass your desired line number as an argument. Hit enter.
#
# :3 --&amp;gt; &amp;lt;ENTER&amp;gt; --&amp;gt; :m0 --&amp;gt; &amp;lt;ENTER&amp;gt;
#
# or...
#
# :3m0 --&amp;gt; &amp;lt;ENTER&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Lazy Moving&lt;/h2&gt;

&lt;p&gt;Now getting to the &lt;em&gt;map&lt;/em&gt; command, I&amp;#39;ve found this pretty handy when
I need to move a line or block of lines a couple of lines upward or downward.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;quot; In your ~/.vimrc
&amp;quot;
&amp;quot; Normal mode
nnoremap &amp;lt;C-j&amp;gt; :m .+1&amp;lt;CR&amp;gt;==
nnoremap &amp;lt;C-k&amp;gt; :m .-2&amp;lt;CR&amp;gt;==

&amp;quot; Insert mode
inoremap &amp;lt;C-j&amp;gt; &amp;lt;ESC&amp;gt;:m .+1&amp;lt;CR&amp;gt;==gi
inoremap &amp;lt;C-k&amp;gt; &amp;lt;ESC&amp;gt;:m .-2&amp;lt;CR&amp;gt;==gi

&amp;quot; Visual mode
vnoremap &amp;lt;C-j&amp;gt; :m '&amp;gt;+1&amp;lt;CR&amp;gt;gv=gv
vnoremap &amp;lt;C-k&amp;gt; :m '&amp;lt;-2&amp;lt;CR&amp;gt;gv=gv
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now you can move lines by holding &lt;em&gt;CTRL&lt;/em&gt; and &lt;em&gt;j&lt;/em&gt; (for up a line) or
&lt;em&gt;k&lt;/em&gt; (for down a line).&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- second line ---
--- third line ---
--- first line ---

# Move to the &amp;quot;first line&amp;quot;, hold &amp;lt;CTRL&amp;gt; and move up twice.
#
# :3 --&amp;gt; &amp;lt;ENTER&amp;gt; --&amp;gt; &amp;lt;CTRL&amp;gt; + kk
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;#39;s move a block of lines:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- fourth line ---
--- fifth line ---
--- first line ---
--- second line ---
--- third line ---

# Move to the &amp;quot;first line&amp;quot;.
# Select the &amp;quot;first line&amp;quot;, &amp;quot;second line&amp;quot;, and the &amp;quot;third line&amp;quot; with Visual mode.
# Hit CTRL and move upwards twice.
#
# :3 -- &amp;lt;ENTER&amp;gt; --&amp;gt; &amp;lt;SHIFT&amp;gt; + V --&amp;gt; jj --&amp;gt; &amp;lt;CTRL&amp;gt; + kk
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Other Ways&lt;/h2&gt;

&lt;p&gt;There are plenty of other tricks that move around lines in Vim. The preceding
examples were just a few that I employ everyday. If you&amp;#39;ve got something cool to
share, please let me know!&lt;/p&gt;
</content>
  </entry>
</feed>
</section><footer><ul class='footer-links'><li><a class='link link-in-footer fontello' href='https://github.com/DockYard' target='_blank'>g</a></li><li><a class='link link-in-footer fontello' href='https://twitter.com/DockYard' target='_blank'>t</a></li><li><a class='link link-in-footer fontello' href='http://reefpoints.dockyard.com/atom.xml' target='_blank'>r</a></li><li><a class='link link-in-footer fontello' href='http://dockyard.com/hire-us' target='_blank'>m</a></li></ul><form class='footer-form'><label class='footer-form-label'>Get in touch with us!</label><input class='footer-form-input' placeholder='Email' type='text'><button class='footer-form-submit fontello' href='http://dockyard.com/contact'>R</button></form><a class='footer-number' href='tel:855-362-5973'>(855) DOCK-YRD</a><p class='footer-copyright'>&copy; 2013 DockYard, LLC. All Rights Reserved.</p></footer><audio class='foghorn' preload='auto' src='/sound/foghorn.mp3'></audio><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>