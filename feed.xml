<!DOCTYPE html><html><head><title>DockYard</title><link href="/stylesheets/all-572a0599.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-ce68a29a.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta charset='utf-8'><meta content='DockYard.com - ' name='description'><link href='//cloud.typography.com/6496052/702882/css/fonts.css' rel='stylesheet' type='text/css'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/favicon.png' rel='shortcut icon' type='image/x-icon'><link href='/favicon.png' rel='icon' type='image/x-icon'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                             ..
                                           .O.
                                       .:OO.
                                      :OOO.
                                    :OOO:.
                         ...      :OOOO:
                   ..ZOOOOOOOOO..OZ.O.
                   OOOOOOOOOOOOOOOOI
                  OOOOOOOOOOOOOOOOI,
                 OOOOOOOO. .OOOOOOOO:
                 OOOOOOOO   OOOOOOOOO:
                OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO
                OOOOOO?:   .OOOOOOOOO
               .OOOOO      OOOOOOOOOO
,OO ZO,        OOOOO,     OOOOOOOOOO+
 OOOOO.        OOOOO     OOOOOOOOOOO+
  OOO?        OOOOO     .OOOOOOOOOOO:
   OOO,      OOOOO.    .OOOOOOOOOOOO
    OOOOOOOOOOOOO.    .OOOOOOOOOOOO.
     OOOOOOOOOOOO.  .OOOOOOOOOOOOO.
      8OOOOOOOOOOOOOOOOOOOOOOOODO:
         :OOOOOOOOOOOOOOOOOOOO::

--></head><body class='feed'><header><div class='extended-nav-wrap'><div class='l-wrap--wide'><nav class='extended-nav'><a class="extended-nav--logo" data-icon="⌂" href="http://dockyard.com/"><span class='is-hidden'>Home</span></a>
<a class="extended-nav--close" data-icon="X" href="#"><span class='is-hidden'>Close</span></a><div class='extended-nav__items'><div class='extended-nav__items--mobile'><a class="extended-nav__item--work extended-nav__item" href="#">Work</a><nav class='work-nav--mobile'><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong></a></nav></div><a class="extended-nav__item" href="http://dockyard.com/team">Our Team</a><a class="extended-nav__item" href="http://dockyard.com/process">Process</a><a class="extended-nav__item" href="http://dockyard.com/community">Community</a><a class="extended-nav__item active" href="/">Blog</a><a class="extended-nav__item" href="http://dockyard.com/hire-us">Hire Us</a></div></nav><nav class='work-nav'><h6>Selected Work</h6><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong><p>Credit card advice from real people.</p></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong><p>You should be training. Right now.</p></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong><p>Ask officials questions on city, state, and federal levels.</p></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong><p>How technology helped repeal the #TechTax.</p></a></nav></div></div><nav class='main-nav-wrap'><div class='main-nav l-wrap--wide'><a class="logo" href="http://dockyard.com">DockYard</a><a class="club-sandwich" data-icon="☰" href="#"><span class='is-hidden'>Navigation</span></a></div></nav></header><div class='push--header'></div><div class='l-wrap--blog'><a href="/"><strong class='logo--blog'>ReefPoints</strong><strong class='logo--blog__tagline'>Blog</strong></a><nav class='blog-nav'><a class="blog-nav__item " href="/">Posts</a><a class="blog-nav__item " href="/categories.html">Categories</a><a class="blog-nav__item " href="/authors.html">Authors</a></nav></div><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-04-10T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Vim: On Your Mark...</title>
    <link rel="alternate" href="/2014/04/10/vim-on-your-mark.html"/>
    <id>/2014/04/10/vim-on-your-mark.html</id>
    <published>2014-04-10T00:00:00Z</published>
    <updated>2014-04-10T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The strength of Vim&amp;#39;s basic &lt;strong&gt;movement&lt;/strong&gt; commands are immediately apparent.
We can jump four words over with &lt;code&gt;4w&lt;/code&gt; or move to the beginning
of a sentence with &lt;code&gt;(&lt;/code&gt;. Once these movements are engrained to muscle memory,
we can move within files with ease. However, there are certain limitations
to these basic movement commands; wouldn&amp;#39;t it be great if we could move
to different and specific spots within multiple files?&lt;/p&gt;

&lt;p&gt;Today, we&amp;#39;re going to briefly cover a poweful motion strategy:
&lt;strong&gt;mark&lt;/strong&gt; motion.&lt;/p&gt;

&lt;h2&gt;What is a Mark?&lt;/h2&gt;

&lt;p&gt;Marks are essentially &lt;em&gt;hidden&lt;/em&gt; positions that, when set, allow us to
jump back to that specific location or line. What we mean by &lt;em&gt;hidden&lt;/em&gt; is that these marks
are not visible by default; marks are simply invisible points within a file.&lt;/p&gt;

&lt;p&gt;The mark motion command starts with hitting &lt;code&gt;m&lt;/code&gt; - &lt;code&gt;m&lt;/code&gt; for mark - and then setting
a &lt;strong&gt;destination marker&lt;/strong&gt; - either a lowercase letter or uppercase letter.
We&amp;#39;ll introduce the differences among the destination markers soon.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s start by covering a simple example of setting a &lt;strong&gt;lowercase mark&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;Example: Moving With A Lowercase Mark&lt;/h4&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;# ~/example1.txt

Here is Line 3
Here is Line 4
Here is Line 5

# On Line #3, use `mn` to set a mark on the letter `n` within the word `Line`.
# Move around the file.
# Go back to the previous mark by hitting: `n
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, in &lt;code&gt;Normal&lt;/code&gt; mode, move to Line #3. Place your cursor on the letter &lt;code&gt;n&lt;/code&gt;
within the word &lt;code&gt;Line&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, set a mark by hitting &lt;code&gt;m&lt;/code&gt; and then the lowercase letter
&lt;code&gt;n&lt;/code&gt;. &lt;code&gt;n&lt;/code&gt; is our lowercase &lt;strong&gt;destination marker&lt;/strong&gt;.
Congratulations, we&amp;#39;ve just set a &lt;strong&gt;lowercase mark&lt;/strong&gt;!
We could of used any lowercase character, but by using the letter &lt;code&gt;n&lt;/code&gt;, we&amp;#39;ve
setup a nice mnemonic device.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now move to Line #5. We&amp;#39;re going to move to our mark now.
Hit &lt;code&gt;`n&lt;/code&gt; - &lt;em&gt;backtick&lt;/em&gt; and &lt;code&gt;n&lt;/code&gt;, our previous destination marker.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Notice where our cursor is (&lt;em&gt;hint&lt;/em&gt;: it should be located on the letter &lt;code&gt;n&lt;/code&gt;
within the word &lt;code&gt;Line&lt;/code&gt;).
Huzzah, we are now back to our previous position within the file!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go back to Line #5.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, hit &lt;code&gt;&amp;#39;n&lt;/code&gt; - &lt;em&gt;single quote&lt;/em&gt; and &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We are now at the beginning of Line #3!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Jumps, Marks and a Few Commands&lt;/h2&gt;

&lt;p&gt;We know how to set a mark with &lt;code&gt;m&lt;/code&gt;, but let&amp;#39;s clarify the two types of mark jumps
and the different types of marks.&lt;/p&gt;

&lt;h2&gt;Two Types of Mark Jumps&lt;/h2&gt;

&lt;h3&gt;Backtick&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;`&amp;lt;mark&amp;gt;&lt;/code&gt; - The &lt;em&gt;backtick&lt;/em&gt; places our cursor directly on the mark.&lt;/p&gt;

&lt;h3&gt;Single Quote&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;#39;&amp;lt;mark&amp;gt;&lt;/code&gt; - The &lt;em&gt;single quote&lt;/em&gt; takes us to the first non-blank character of the
mark&amp;#39;s line.&lt;/p&gt;

&lt;h2&gt;Three Types of Marks&lt;/h2&gt;

&lt;h3&gt;Lowercase Marks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;a - z&lt;/strong&gt; - These marks preserve locations within a &lt;em&gt;single&lt;/em&gt; file. Each individual file
possesses 26 settable lowercase marks. Lowercase marks are valid as long as the file
remains in the buffer list. Furthermore, lowercase marks can be combined with other
operators.  For example, &lt;code&gt;c`n&lt;/code&gt;, will change everything between the cursor to the
mark, &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Uppercase Marks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;A - Z&lt;/strong&gt; - These marks preserve locations within &lt;em&gt;multiple&lt;/em&gt; files. Also known
as &lt;strong&gt;file marks&lt;/strong&gt;. These marks, which are shared among all files within the buffer list,
can be used to jump from file to file. File marks can only be used in combination with
operators if the mark is in the current file, i.e. when the current file opened contains
the global file mark.&lt;/p&gt;

&lt;h3&gt;Numbered Marks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;0 - 9&lt;/strong&gt; - Numbered marks cannot be set directly, instead they are created
automagically and used by the &lt;strong&gt;viminfo-file&lt;/strong&gt; (&lt;code&gt;:help viminfo-file&lt;/code&gt;).
Essentially, the numbered marks store the location of your cursor after closing Vim.
For example, mark &lt;code&gt;0&lt;/code&gt; returns the position of the cursor during your last Vim session,
while mark &lt;code&gt;1&lt;/code&gt; returns the next to last Vim session, and so forth.&lt;/p&gt;

&lt;h2&gt;Some Pertinent Commands&lt;/h2&gt;

&lt;h3&gt;Viewing current marks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;:marks {argument}&lt;/strong&gt; - &lt;strong&gt;:marks&lt;/strong&gt; will show you all current marks, their file location and
destination marker. We can pass in an &lt;em&gt;argument&lt;/em&gt; to view a range of marks between two marks.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;:marks aC&lt;/strong&gt; - will return all marks that are between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Deleting Marks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;:delm[arks] {marks}&lt;/strong&gt; - We can use &lt;code&gt;:delm&lt;/code&gt; or &lt;code&gt;:delmarks&lt;/code&gt; and then pass in marks
that we want to delete.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;:delm aAbB&lt;/strong&gt; - will delete marks labeled &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Okay, What&amp;#39;s So Cool About Marks?&lt;/h2&gt;

&lt;p&gt;Marks can speed up our navigation workflow! Here are a few examples:&lt;/p&gt;

&lt;h4&gt;Discussion: Editing One Large File With Lowercase Marks&lt;/h4&gt;

&lt;p&gt;I&amp;#39;ve found &lt;strong&gt;lowercase marks&lt;/strong&gt; extremely useful when editing multiple portions of
a file. Instead of using &lt;code&gt;CTRL+u&lt;/code&gt;, &lt;code&gt;CTRL+d&lt;/code&gt;, &lt;code&gt;H&lt;/code&gt;, or &lt;code&gt;L&lt;/code&gt; to move up and down
the file, you can set local marks at heavily treaded locations at jump back
and forth among them. Moveover, marks give us the ability to jump to an
exact location - &lt;em&gt;backtick&lt;/em&gt; - or to the beginning of the line - &lt;em&gt;single quote&lt;/em&gt;.&lt;/p&gt;

&lt;h4&gt;Example: Editing Multiple Files With Uppercase (File) Marks&lt;/h4&gt;

&lt;p&gt;When I first started using Vim (and began programming), I had multiple windows
open constantly on the monitor.  Not only does it quickly become cluttered,
remembering which file is which becomes hairy.&lt;/p&gt;

&lt;p&gt;Files marks to the rescue!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Here are three files we are want to work on. Let&amp;#39;s add some &lt;strong&gt;file marks&lt;/strong&gt;.
Just like lowercase marks, the actual uppercase letter we use does not matter
as long as it is unique.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# ~/sheep.rb&lt;/span&gt;

&lt;span class="comment"&gt;# On the word `speak`, place a file mark with `mS` - `S` for &amp;quot;sheep&amp;quot;&lt;/span&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;speak&lt;/span&gt;
  puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Baah! Baah!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# ~/cat.rb&lt;/span&gt;

&lt;span class="comment"&gt;# On the word `speak`, place a file mark with `mC` - `C` for &amp;quot;cat&amp;quot;&lt;/span&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;speak&lt;/span&gt;
  puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Meow! Meow!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# ~/doge.rb&lt;/span&gt;

&lt;span class="comment"&gt;# On the word `speak`, place a file mark with `mD` - `D` for &amp;quot;doge&amp;quot;&lt;/span&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;speak&lt;/span&gt;
  puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Wow! Ahh yes method! Such quality!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;If we are in &lt;code&gt;~/sheep.rb&lt;/code&gt; and want to jump to the &lt;code&gt;speak&lt;/code&gt; method defined
within &lt;code&gt;~/cat.rb&lt;/code&gt;, we can do so with &lt;code&gt;`C&lt;/code&gt;. Now that we&amp;#39;re in &lt;code&gt;~/cat.rb&lt;/code&gt;,
let&amp;#39;s go to the &lt;code&gt;speak&lt;/code&gt; method within &lt;code&gt;~/doge.rb&lt;/code&gt; with &lt;code&gt;`D&lt;/code&gt;.
Pretty sweet, huh?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&amp;quot;X&amp;quot; Marks the Spot&lt;/h2&gt;

&lt;p&gt;Hope you enjoyed the basics of Vim &lt;strong&gt;marks&lt;/strong&gt;. We&amp;#39;ve only covered the basics here, so if
you&amp;#39;d like to learn more check the docs.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Designing Within The Browser</title>
    <link rel="alternate" href="/2014/04/04/design-within-the-browser.html"/>
    <id>/2014/04/04/design-within-the-browser.html</id>
    <published>2014-04-04T00:00:00Z</published>
    <updated>2014-04-04T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I employ a solid range of design tools and although I’m spending some of my time designing in the browser, the ideal of designing &lt;em&gt;entirely&lt;/em&gt; in that context is often unrealistic and stifling.&lt;/p&gt;

&lt;h2&gt;Save time for discovery&lt;/h2&gt;

&lt;p&gt;Sometimes an accident leads to an interesting and useful discovery. In art and design this is especially true. In a browser, unfortunately, accidents don’t pleasantly surprise you in the way &lt;em&gt;”static”&lt;/em&gt; designs may. In development an accident means broken code – plain and simple. You may stumble on a solution, but you’re not going to be surprised by a random glimpse of order and possibility in the muck of your own broken HTML. It’s broken until it’s fixed.&lt;/p&gt;

&lt;p&gt;Such a quality of the web is necessary, but I don’t find it very helpful for discovering new solutions to visual or experience problems. In the early stages you become very focused on minute details when you should be thinking in broad strokes. In later stages you find yourself seeing larger visual problems and with less power to change it. In many ways, I find designing in the browser akin to designing in the dark.&lt;/p&gt;

&lt;p&gt;There are plenty of browser based design tools attempting to free designers of heavy weights such as Photoshop and allow designers to work without learning advanced HTML and CSS. This is a positive direction, but I still haven’t seen the problem solved without losing the element of discovery. Instead of happy accidents, you may experience a gross misunderstanding between your intent, the front end code of the tool you’ve chosen, and the DOM. Maybe the tools will get better, and I’m sure they will, but I’m not optimistic they’ll be architected to facilitate discovery within the next few years.&lt;/p&gt;

&lt;p&gt;For the time being my opinion is that, in terms of process, improvements in web standards and web technology aren’t going to change anything save for ensuring work may be completed in shorter order. We create tools (or products) and advance technology in order to &lt;em&gt;increase&lt;/em&gt; efficiency and &lt;em&gt;improve&lt;/em&gt; human capability. The computer added efficiency for designers by - among many, many other things - being faster and more forgiving than pen and ink, but we still use these older technologies today in tandem with computers.&lt;/p&gt;

&lt;h2&gt;The right tool at the right time&lt;/h2&gt;

&lt;p&gt;We can still integrate designing in the browser as a component of the design process. I don’t view this as an all–or–nothing deal and our process should be malleable enough to better facilitate reaching the goals of each and every project. Imagine, as an extreme example, that you were told to integrate sketching into your design process. You would absolutely not render your designs “pixel-perfect” in a sketch book. It beats the whole point of the sketch book and the whole experience would be tremendously debilitating. Instead, you’d probably do at least a little bit of preliminary sketching before opening Photoshop, and return when you need to massage another idea out of your head.&lt;/p&gt;

&lt;p&gt;The benefit of designing in the web, or at least getting a product in the browser sooner, is that you can experience it and identify major problems before you’re past the point of no return. This is a pretty well established idea (that I believe in), but just like using the sketchbook we need to identify when it’s appropriate to pop open a text editor and start punching in markup and styles. I’ll kick this off with two cases where I think designing in the browser is appropriate: prototyping unique interactions and defining visual state changes.&lt;/p&gt;

&lt;h3&gt;Prototyping unique interactions&lt;/h3&gt;

&lt;p&gt;We should prototype and test core product interactions when they are unorthodox. Design patterns should be used where possible, but if we are knowingly going against the grain we need to test that experience in the browser and with users (as available) before making it permanent. This is sometimes after the static design has been completed, but in many cases can be done before anything static has been created.&lt;/p&gt;

&lt;h3&gt;Visual state changes&lt;/h3&gt;

&lt;p&gt;When following design patterns there are still standard things to be fleshed out in the browser: hovers, presses, clicks, fades, sliding interactions, and so on. Generally, if you don’t know how an interaction will truly feel and it involves a state change: design it in the browser. At DockYard, we often propose a solution first in Photoshop and then weigh our options again in the browser. &lt;/p&gt;

&lt;h2&gt;An example&lt;/h2&gt;

&lt;p&gt;We completed a project last year with the ambition of the design stage being completely browser based, skipping the use of Photoshop altogether. The benefits of having a usable front end in place of static mockups are great: you can use your app as it is being designed and get a sense of the failure points before they become too ingrained in the experience. User testing can begin earlier. This is awesome. From the outside, designing solely in the browser seemed perfect.&lt;/p&gt;

&lt;p&gt;You guessed it: I was wrong. It wasn&amp;#39;t right for us then, nor for that project. We were less focused on the user’s experience and more focused on the organization and creation of markup, styles, and script. We began (and ended) by worrying about and writing lines of HTML, CSS, and JavaScript. We were worried about front end patterns, but the design patterns we were aiming to support weren’t fully identified yet. We introduced somewhat of a chicken and the egg problem, making our thinking more difficult and more sporadic than it should have been.&lt;/p&gt;

&lt;p&gt;For us this meant spending hours and hours tweaking markup, all in the name of being able to feel and test the product as it was created. In some cases, for sure, this can be worth it. In our case we even had plenty of existing design assets to base our web interface off of, but that project had called for too many largely different iterations (and mixed opinions) of the same few designs.&lt;/p&gt;

&lt;p&gt;Designing in the browser does not mean your project will turn out poorly. Ultimately, and fortunately, that project turned out well in the end, but we did spend a lot more time getting a complete idea of what we were actually designing and building. Our clients got to use the product before they bought into the concept, which was great for them. For us, however, it was as if we started designing a house by laying the concrete foundation before knowing what we were building.&lt;/p&gt;

&lt;h2&gt;Weigh your options&lt;/h2&gt;

&lt;p&gt;A successful product depends on its content, design, engineering, market fit, team, tools, and infinitely more. When consulting, those elements are wildly varied from client to client, including the toolset. So we must be mindful of what is necessary, be malleable in our processes, and most important of all: make room for discovery.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Magic behind ES6 Generators</title>
    <link rel="alternate" href="/2014/03/30/magic_behind_es6_generators.html"/>
    <id>/2014/03/30/magic_behind_es6_generators.html</id>
    <published>2014-03-30T00:00:00Z</published>
    <updated>2014-03-30T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Overview&lt;/h2&gt;

&lt;p&gt;The next version of JavaScript (ES6 or ES.next) is going to have a lot of
great features built in that are going to make developer&amp;#39;s life much easier.
&lt;a href="http://wiki.ecmascript.org/doku.php?id=strawman:promises"&gt;Promises&lt;/a&gt;,
&lt;a href="http://wiki.ecmascript.org/doku.php?id=harmony:modules"&gt;Modules&lt;/a&gt;,
&lt;a href="http://wiki.ecmascript.org/doku.php?id=harmony:weak_maps"&gt;WeakMaps&lt;/a&gt;,
&lt;a href="http://wiki.ecmascript.org/doku.php?id=harmony:generators"&gt;Generators&lt;/a&gt; to name a few. In this
post I want to talk about generators.&lt;/p&gt;

&lt;p&gt;Generators are objects that encapsulate suspended execution context. What the heck does it mean?
In other words, generators allow you to pause execution of your code and return a value.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say you need to write a &lt;code&gt;cubic&lt;/code&gt; function (for any given number, calculate a cubic number)
and then print it out.&lt;/p&gt;

&lt;p&gt;Code without generators for 10 numbers:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="function"&gt;out&lt;/span&gt;(n) {
  console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Cubic number:&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, n);
}

&lt;span class="keyword"&gt;function&lt;/span&gt; *cube(n) {
  n = n * &lt;span class="integer"&gt;3&lt;/span&gt;;
  out(n);
}

&lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;var&lt;/span&gt; i = &lt;span class="integer"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class="integer"&gt;10&lt;/span&gt;; i++) {
  cube(i);
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Code with ES6 generators for 10 numbers:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; *cube(n) {
  &lt;span class="keyword"&gt;var&lt;/span&gt; i = &lt;span class="integer"&gt;0&lt;/span&gt;, j = n;
  &lt;span class="keyword"&gt;while&lt;/span&gt; (i &amp;lt; n) {
    i++;
    j = j * &lt;span class="integer"&gt;3&lt;/span&gt;;
    yield j;
  }
}

&lt;span class="keyword"&gt;var&lt;/span&gt; c = cube(&lt;span class="integer"&gt;10&lt;/span&gt;);
&lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;var&lt;/span&gt; i = &lt;span class="integer"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class="integer"&gt;10&lt;/span&gt;; i++) {
  console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Cubic number:&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, c.next().value);
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Can you spot the difference? Generator represents a sequence of numbers and every time you call
&lt;code&gt;next()&lt;/code&gt; it gives you the next number in the sequence (it actually gives you an object back
with two properties: &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;done&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;c.next(); &lt;span class="comment"&gt;// =&amp;gt; { value: 3, done: false }&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once the limit is reached, generator will return:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;c.next(); &lt;span class="comment"&gt;// =&amp;gt; { value: undefined, done: true }&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Pretty cool, eh?&lt;/p&gt;

&lt;p&gt;Note, that generators look &lt;em&gt;just&lt;/em&gt; like functions, but with &lt;code&gt;*&lt;/code&gt;s:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// regular function&lt;/span&gt;
&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="function"&gt;cube&lt;/span&gt;()  {}

&lt;span class="comment"&gt;// es6 generator&lt;/span&gt;
&lt;span class="keyword"&gt;function&lt;/span&gt; *cube() {}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;#39;re a Python developer, generators and &lt;code&gt;yield&lt;/code&gt; are not new to you. But it&amp;#39;s a big step forward
for JavaScript.&lt;/p&gt;

&lt;h2&gt;For-Of&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;for of&lt;/code&gt; loop is a new iteration construct in ES6 which supports generators. This is really for
performance purposes. Instead of returning a full array, you can just return a generator which
lazily gives values back on each iteration. That decreases memory allocation and you can express
infinite data structures (since no array allocation is needed).&lt;/p&gt;

&lt;p&gt;A really interesting use case for generators is async operations:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;spawn(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
  &lt;span class="keyword"&gt;var&lt;/span&gt; users = yield db.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  &lt;span class="keyword"&gt;var&lt;/span&gt; posts = yield db.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;posts&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;spawn&lt;/code&gt; is a function in &lt;a href="http://nodejs.org"&gt;node.js&lt;/a&gt; that allows you to create child processes.
You can read about it &lt;a href="http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;spawn&lt;/code&gt; hands control over the function to the scheduler, which knows that the function will &lt;code&gt;yield&lt;/code&gt;
promises and will send the values back as soon as the promises are going to be resolved (fulfilled).&lt;/p&gt;

&lt;p&gt;This is really powerful.&lt;/p&gt;

&lt;h2&gt;Availability&lt;/h2&gt;

&lt;p&gt;If you really want to use this feature, you&amp;#39;re going to have to use transpilers, such as &lt;a href="https://github.com/google/traceur-compiler"&gt;Traceur&lt;/a&gt;
or &lt;a href="https://github.com/facebook/regenerator"&gt;Regenerator&lt;/a&gt;. The reason for that is two new language keywords
introduced by ES6 generators: &lt;code&gt;yield&lt;/code&gt; and &lt;code&gt;function *&lt;/code&gt;. There&amp;#39;s a really good blog post about &lt;a href="http://gu.illau.me/posts/polyfilling-generators/"&gt;polyfilling generators&lt;/a&gt;
that goes in depth about how transpilers deal with the new syntax.&lt;/p&gt;

&lt;p&gt;Native implementations of generators are available in Firefox and Chrome Canary
(you will need to enable &lt;a href="chrome://flags/#enable-javascript-harmony"&gt;harmony experimental flag&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I encourage you to play around with the generators and get familiar with the syntax because in couple of
years from now, we all will be writing code using generators (hopefully).&lt;/p&gt;

&lt;p&gt;P.S.&lt;/p&gt;

&lt;p&gt;Great article about &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.7#Generators"&gt;ES6 generators&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember Conf picks up where the Rails community left off</title>
    <link rel="alternate" href="/2014/03/17/emberconf-picks-ups-where-the-rails-community-left-off.html"/>
    <id>/2014/03/17/emberconf-picks-ups-where-the-rails-community-left-off.html</id>
    <published>2014-03-17T00:00:00Z</published>
    <updated>2014-03-17T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;#39;m writing this on my flight from Portland back to Boston. On this
plane I count at least 12 other attendees of the first &lt;a href="http://emberconf.com"&gt;Ember Conference&lt;/a&gt;.
A lot has been said about Ember in the past year but if this conference
was any indicator big things are happening and even bigger things are
going to happen.&lt;/p&gt;

&lt;p&gt;For me, the biggest take away from any conference is the people and
this conference was no exception. In fact, Ember Conf is now my gold
standard for a technology event. The only possible comparison I have is
how early Rails Confs felt. There is an energy and a scary amount of
creativity happening in the Ember community right now. Much like the
community felt around Rails back in 2006 - 2009 there is the
understanding that those doing Ember now are going to be shaping the
future of the web. Whether that is setting the bar higher for how users
will want to consume web applications in the future or being a large
influence on what the future of the web standards themselves will be, Ember
is the only web technology today that is positioned in the same place
that I feel Rails was years ago. We are the rebels. We are the
counter-culture. Ember is the future.&lt;/p&gt;

&lt;p&gt;But, we&amp;#39;re learning from the mistakes of the past. Where the Rails
community was the counter-culture of its time it suffered from a male
(and very juvenile) dominated culture. This culture was the result of
the &amp;quot;RockStar&amp;quot; mentality set forth by its leader(s). Ember, in contrast,
began its very first conference with Yehuda Katz and Tom Dale addressing
the entire crowd with their desire for Ember to be an open and diverse
community.&lt;/p&gt;

&lt;p&gt;The conference was very well organized, big shoutout to Leah Silber at Tilde. She
put on a great conference, I&amp;#39;m proud that my company had the opportunity
to help make it happen.&lt;/p&gt;

&lt;p&gt;From a technology perspective &lt;strong&gt;huge&lt;/strong&gt; things are on the horizon for
Ember. If you have been on the cusp of getting involved you will be
kicking yourself later for not doing so now. If you are already building
in Ember nearly all of the pain-points that have existed will be
addressed in the next 6 months. Testing as a first class citizen,
fastest template rendering of any JavaScript framework/tool out there,
animation support, query params, a standardized project structure and
build tool, and there was even talk of how we&amp;#39;re going to package and
distribute dependencies. Ember Conf was a continuous roll of one great
talk after another loaded with the best tech on the web. I&amp;#39;ve already
really enjoyed writing Ember apps for the past year, the next year will
be amazing.&lt;/p&gt;

&lt;p&gt;I realize at this point the article smacks of cheerleading optimism. How
can it be this good? The real secret weapon of any open source software
is its community. After this week I can tell you that I have not felt
this way about a community since the early days of Rails. There is
something very special happening here. It isn&amp;#39;t just me. &lt;a href="https://twitter.com/search?q=%23emberconf&amp;amp;src=tyah"&gt;Go search
Twitter for &lt;code&gt;#EmberConf&lt;/code&gt; and see for
yourself&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;People are crying, having
spiritual awakenings and overall life-affirming moments at &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;
… Think I want whatever’s in their punch&lt;/p&gt;&amp;mdash; Rob Conery
(@robconery) &lt;a
href="https://twitter.com/robconery/statuses/449041727240695808"&gt;March
27, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;IT’S HAPPENING!! HTMLbars
eliminates &amp;lt;script&amp;gt; tags, {{bindAttr}}, and gives Ember the
fastest bound templates on the planet. &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Tom Dale (@tomdale) &lt;a
href="https://twitter.com/tomdale/statuses/448621833953083392"&gt;March 26,
2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;This scene with &lt;a
href="https://twitter.com/tomdale"&gt;@tomdale&lt;/a&gt; &lt;a
href="https://twitter.com/tehviking"&gt;@tehviking&lt;/a&gt; and &lt;a
href="https://twitter.com/fivetanley"&gt;@fivetanley&lt;/a&gt; sums up &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;
- so much love ❤️❤️❤️ &lt;a
  href="http://t.co/AEUEeiq97i"&gt;pic.twitter.com/AEUEeiq97i&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Dan Gebhardt (@dgeb) &lt;a
href="https://twitter.com/dgeb/statuses/449088566962814976"&gt;March 27,
2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Ember makes you a badass
web developer. The productivity gains are unparalleled. Page flow is
first class. &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;
&lt;a
href="http://t.co/DlKqmmdVEU"&gt;pic.twitter.com/DlKqmmdVEU&lt;/a&gt;&lt;/p&gt;&amp;mdash;
John K. Paul (@johnkpaul) &lt;a
href="https://twitter.com/johnkpaul/statuses/448510256097001472"&gt;March
25, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Notes on the morning &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;
keynote by &lt;a href="https://twitter.com/wycats"&gt;@wycats&lt;/a&gt; &lt;a
href="https://twitter.com/tomdale"&gt;@tomdale&lt;/a&gt; &lt;a
href="http://t.co/rYKEruaxRe"&gt;pic.twitter.com/rYKEruaxRe&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Michael Chan (@chantastic) &lt;a
href="https://twitter.com/chantastic/statuses/448517744900976641"&gt;March
25, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;hug &lt;a
href="https://twitter.com/tomdale"&gt;@tomdale&lt;/a&gt; achievement unlocked &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;
&lt;a
href="http://t.co/nLOBPGJwKL"&gt;pic.twitter.com/nLOBPGJwKL&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Ben Rosas (@ballPtPenguin) &lt;a
href="https://twitter.com/ballPtPenguin/statuses/449000521211203586"&gt;March
27, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&lt;a
href="https://twitter.com/ebryn"&gt;@ebryn&lt;/a&gt; &lt;a
href="https://twitter.com/EmberConf"&gt;@EmberConf&lt;/a&gt; Such a wonderful
experience. One of the best conferences I&amp;#39;ve ever attended, it was
like one big family finally united.&lt;/p&gt;&amp;mdash; Kasper Tidemann
(@KasperTidemann) &lt;a
href="https://twitter.com/KasperTidemann/statuses/449044965855723520"&gt;March
27, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;
</content>
  </entry>
  <entry>
    <title>A Simple Ember Data Route</title>
    <link rel="alternate" href="/2014/03/03/a-simple-ember-data-route.html"/>
    <id>/2014/03/03/a-simple-ember-data-route.html</id>
    <published>2014-03-03T00:00:00Z</published>
    <updated>2014-03-03T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;When working with an Ember Data model it is easy to forget to properly
handle the teardown of that model. For example, if you are creating a
new model and the user hits the backbutton that model is still in the
local &lt;code&gt;store&lt;/code&gt;. Or if a user edits a model and decides to click the
&lt;code&gt;Cancel&lt;/code&gt; button or clicks a link that transitions out of this route
without saving the model. A basic approach can be as simple as:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Ember.DSModelRoute = Ember.Route.extend({
  &lt;span class="function"&gt;deactivate&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;var&lt;/span&gt; model = &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller.model&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    model.rollback();
    &lt;span class="keyword"&gt;if&lt;/span&gt; (model.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;isNew&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)) {
      model.deleteRecord();
    }
  },
  &lt;span class="key"&gt;actions&lt;/span&gt;: {
    &lt;span class="function"&gt;willTransition&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(transition) {
      &lt;span class="keyword"&gt;var&lt;/span&gt; model = &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller.model&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
      &lt;span class="keyword"&gt;if&lt;/span&gt; (model.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;isDirty&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &amp;amp;&amp;amp; !confirm(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;You have unsaved changes. They will be lost if you continue!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)) {
        transition.abort();
      }
    }
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Routes inherited from &lt;code&gt;Ember.DSModelRoute&lt;/code&gt; will always clean up after themselves. If the user has unsaved changes and attempts to leave the current route 
the app will guard against the transition and allow the user to confirm with a notice that changes will be lost.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using Database Templates in Rails</title>
    <link rel="alternate" href="/2014/03/03/using-database-templates.html"/>
    <id>/2014/03/03/using-database-templates.html</id>
    <published>2014-03-03T00:00:00Z</published>
    <updated>2014-03-03T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Using Postgres as your application&amp;#39;s database? If so, there is a handy
configuration option that you may not be aware about. The &lt;code&gt;pg&lt;/code&gt; gem provides a &lt;code&gt;template&lt;/code&gt; option that
allows for copying already existing data into an application as
long as you have matching schema. &lt;/p&gt;

&lt;p&gt;To add this functionality, simply add the &lt;code&gt;template&lt;/code&gt; option inside &lt;code&gt;config/database.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight yaml "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="key"&gt;development&lt;/span&gt;:
  &lt;span class="key"&gt;adapter&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;postgresql&lt;/span&gt;&lt;/span&gt;
  &lt;span class="key"&gt;encoding&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;unicode&lt;/span&gt;&lt;/span&gt;
  &lt;span class="key"&gt;database&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;myapp_development&lt;/span&gt;&lt;/span&gt;
  &lt;span class="key"&gt;template&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;my_template&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s go through a quick example. Suppose we have an existing database, &lt;code&gt;food&lt;/code&gt;, and it contains an abundant amount of data with the
following schema:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;foods: name (string), category_id (integer)
categories: category (string)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To use the &lt;code&gt;food&lt;/code&gt; database for our application, we are going to
create a template by specifying our database with the following command: &lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;createdb -T food my_food_template
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We must now set up our Rails application and make sure that our schema matches
that of our new template. Our Rails models will mimick &lt;code&gt;food&lt;/code&gt;. Having done
that, we can now modify our &lt;code&gt;config/database.yml&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight yaml "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="key"&gt;database&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;myapp_development&lt;/span&gt;&lt;/span&gt;
&lt;span class="key"&gt;template&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;my_food_template&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Run migrations and voilà! Our database has been populated and is ready to be used.&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;gt; psql myapp_development

&amp;gt; select * from foods;
  id |  name  | category_id
  --------------------------
  1   apple       1
  2   banana      1
  3   spinach     2
  4   ice cream   3

&amp;gt; select * from categories;
  id |  category
  --------------
  1   fruit
  2   vegetable
  3   other
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</content>
  </entry>
</feed>
<div class='push--footer'></div><footer><div class='l-wrap'><div class='l-footer-group'><h3 class='footer-group__title'>EVENTS</h3><a class="footer__event--wgr" target="_blank" href="http://wickedgoodruby.com/">Wicked Good Ruby Conf</a><a class="footer__event--ember" target="_blank" href="http://www.meetup.com/Boston-Ember-js/">Boston Ember.js Meetup</a><a class="footer__event--ux" target="_blank" href="http://www.meetup.com/uxboston/">UX Boston Meetup</a><a class="footer__event--openhack" target="_blank" href="http://openhack.github.io/boston/">OpenHack Boston</a></div><div class='l-footer-group'><a href="/"><h3 class='footer-group__title'>BLOG</h3></a>
<a class="footer__post" href="/2014/04/10/vim-on-your-mark.html"><strong>Vim: On Your Mark...</strong><h6 class='footer-desc'>An introduction to the mark motion</h6></a>
<a class="footer__post" href="/2014/04/04/design-within-the-browser.html"><strong>Designing Within The Browser</strong><h6 class='footer-desc'>Make room for accidental progress.</h6></a>
<a class="footer__post" href="/2014/03/30/magic_behind_es6_generators.html"><strong>Magic behind ES6 Generators</strong><h6 class='footer-desc'>Overview of ES6 generators</h6></a></div><div class='l-footer-group'><a href="http://dockyard.com/hire-us"><h3 class='footer-group__title'>CONTACT</h3></a><h6 class='footer-desc'>DockYard HQ is located in Boston. Stop in sometime and meet our team!</h6><a class="footer__address" target="_blank" href="http://goo.gl/maps/zBGfn"><h6>DockYard Inc.<br>101 Tremont Street<br>Suite 200<br>Boston, MA 02108</h6></a>
<a class="text-link" href="http://dockyard.com/hire-us">Get in touch.</a><div class='social-links--footer'><a target="_blank" data-icon="#" class="social-link" href="https://twitter.com/dockyard"><span class='is-hidden'>Twitter</span></a>
<a target="_blank" data-icon="★" class="social-link" href="https://github.com/dockyard"><span class='is-hidden'>GitHub</span></a>
<a target="_blank" data-icon="✒" class="social-link" href="http://reefpoints.dockyard.com/atom.xml"><span class='is-hidden'>RSS</span></a></div></div></div></footer><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>