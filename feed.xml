<!DOCTYPE html><html><head><title>DockYard</title><link href="/stylesheets/all-95e8dd0f.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-ce68a29a.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta charset='utf-8'><meta content='DockYard.com - ' name='description'><link href='//cloud.typography.com/6496052/702882/css/fonts.css' rel='stylesheet' type='text/css'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/favicon.png' rel='shortcut icon' type='image/x-icon'><link href='/favicon.png' rel='icon' type='image/x-icon'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                             ..
                                           .O.
                                       .:OO.
                                      :OOO.
                                    :OOO:.
                         ...      :OOOO:
                   ..ZOOOOOOOOO..OZ.O.
                   OOOOOOOOOOOOOOOOI
                  OOOOOOOOOOOOOOOOI,
                 OOOOOOOO. .OOOOOOOO:
                 OOOOOOOO   OOOOOOOOO:
                OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO
                OOOOOO?:   .OOOOOOOOO
               .OOOOO      OOOOOOOOOO
,OO ZO,        OOOOO,     OOOOOOOOOO+
 OOOOO.        OOOOO     OOOOOOOOOOO+
  OOO?        OOOOO     .OOOOOOOOOOO:
   OOO,      OOOOO.    .OOOOOOOOOOOO
    OOOOOOOOOOOOO.    .OOOOOOOOOOOO.
     OOOOOOOOOOOO.  .OOOOOOOOOOOOO.
      8OOOOOOOOOOOOOOOOOOOOOOOODO:
         :OOOOOOOOOOOOOOOOOOOO::

--></head><body class='feed'><header><div class='extended-nav-wrap'><div class='l-wrap--wide'><nav class='extended-nav'><a class="extended-nav--logo" data-icon="⌂" href="http://dockyard.com/"><span class='is-hidden'>Home</span></a>
<a class="extended-nav--close" data-icon="X" href="#"><span class='is-hidden'>Close</span></a><div class='extended-nav__items'><div class='extended-nav__items--mobile'><a class="extended-nav__item--work extended-nav__item" href="#">Work</a><nav class='work-nav--mobile'><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong></a></nav></div><a class="extended-nav__item" href="http://dockyard.com/team">Our Team</a><a class="extended-nav__item" href="http://dockyard.com/process">Process</a><a class="extended-nav__item" href="http://dockyard.com/community">Community</a><a class="extended-nav__item active" href="/">Blog</a><a class="extended-nav__item" href="http://dockyard.com/hire-us">Hire Us</a></div></nav><nav class='work-nav'><h6>Selected Work</h6><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong><p>Credit card advice from real people.</p></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong><p>You should be training. Right now.</p></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong><p>Ask officials questions on city, state, and federal levels.</p></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong><p>How technology helped repeal the #TechTax.</p></a></nav></div></div><nav class='main-nav-wrap'><div class='main-nav l-wrap--wide'><a class="logo" href="http://dockyard.com">DockYard</a><a class="club-sandwich" data-icon="☰" href="#"><span class='is-hidden'>Navigation</span></a></div></nav></header><div class='push--header'></div><div class='l-wrap--blog'><a href="/"><strong class='logo--blog'>ReefPoints</strong><strong class='logo--blog__tagline'>Blog</strong></a><nav class='blog-nav'><a class="blog-nav__item " href="/">Posts</a><a class="blog-nav__item " href="/categories.html">Categories</a><a class="blog-nav__item " href="/authors.html">Authors</a></nav></div><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-05-08T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Building an Ember App with Rails Part 2</title>
    <link rel="alternate" href="/2014/05/08/building-an-ember-app-with-rails-part-2.html"/>
    <id>/2014/05/08/building-an-ember-app-with-rails-part-2.html</id>
    <published>2014-05-08T00:00:00Z</published>
    <updated>2014-05-08T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;We need to start this part with a bug fix. There is a bug for the live reload. In &lt;code&gt;ember/tests/helpers/start-app.js&lt;/code&gt; 
insert the 2nd line:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; Router = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bostonember/router&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)[&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;];
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now on line 16 add:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Router.reopen({
  &lt;span class="key"&gt;location&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;none&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This bug exists in &lt;code&gt;0.0.27&lt;/code&gt; of ember-cli and will hopefully be fixed in a future verision.&lt;/p&gt;

&lt;p&gt;(&lt;a href="stefanpenner/ember-cli#667"&gt;there is a pending PR to fix this&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Now start your server:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;cd ember
ember server
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Open your browser and go to: &lt;code&gt;http://localhost:4200/test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should see something like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/bufKV2c.png" alt="Screen 1"&gt;&lt;/p&gt;

&lt;p&gt;This is a typical &lt;a href="http://qunitjs.com/"&gt;Qunit&lt;/a&gt; test suite with some
&lt;a href="http://www.jshint.com/"&gt;JSHint&lt;/a&gt; tests already in our app. What you&amp;#39;ll notice in the lower
right-hand corner is a blank white box. This box is where our
integration tests will execute. This is an IFRAME so we can see our
applications interacted with in real-time (albeit very fast real-time).&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s build out a landing page for our app. We will TDD this entire
application over this multi-part series. Create a new directory and file
&lt;code&gt;ember/tests/integration/landing-page-test.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All of our files will be in
&lt;a href="http://wiki.ecmascript.org/doku.php?id=harmony:modules"&gt;ES6 module&lt;/a&gt;
format. If you are unfamiliar with ES6 modules I suggest you go and read
up.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; startApp from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bostonember/tests/helpers/start-app&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="keyword"&gt;var&lt;/span&gt; App;

module(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Integration - Landing Page&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="function"&gt;setup&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    App = startApp();
  },
  &lt;span class="function"&gt;teardown&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    Ember.run(App, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;destroy&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Should welcome me to Boston Ember&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  visit(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;h2#title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).text(), &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Welcome to Boston Ember&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  });
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once you save this file go back to your browser. You should not need to reload anything, ember-cli has a live reload feature on file
change. Now you should see your failing test:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/l7y146I.png" alt="Screen2"&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s make the test pass:&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;ember/app/templates/application.hbs&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;lt;h1 class=&amp;quot;welcome&amp;quot;&amp;gt;Welcome to Boston Ember&amp;quot;&amp;lt;/h1&amp;gt;
{{outlet}}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Check your test suite and it should be all green.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/242RLGf.png" alt="Screen3"&gt;&lt;/p&gt;

&lt;p&gt;Congratulations on your first ember test!&lt;/p&gt;

&lt;p&gt;Next time we&amp;#39;ll build out some pages and write tests to interact with
these pages.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building an Ember App with Rails Part 1</title>
    <link rel="alternate" href="/2014/05/07/building-an-ember-app-with-rails-part-1.html"/>
    <id>/2014/05/07/building-an-ember-app-with-rails-part-1.html</id>
    <published>2014-05-07T00:00:00Z</published>
    <updated>2014-05-07T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This series will take us through building and structuring an application
with an Ember front-end built with
&lt;a href="https://github.com/stefanpenner/ember-cli"&gt;ember-cli&lt;/a&gt; and a Ruby on
Rails backend. We&amp;#39;ll discuss project structure, testing, and deployment
to Heroku.&lt;/p&gt;

&lt;p&gt;During the course of this series I am going to re-build the
&lt;a href="http://bostonember.com"&gt;Boston Ember&lt;/a&gt; website. (if it looks terrible
that means I&amp;#39;m not done yet)&lt;/p&gt;

&lt;h2&gt;Getting setup with our tools&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s start by making sure all relevant dev tools are installed on our
machine. I am using the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby 2.1.1&lt;/li&gt;
&lt;li&gt;Rails 4.1.1&lt;/li&gt;
&lt;li&gt;Node 0.10.26&lt;/li&gt;
&lt;li&gt;npm 1.4.7&lt;/li&gt;
&lt;li&gt;Postgres (only necessary because we are deploying to Heroku)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Versions at or above these versions should be OK for following along. Please refer elsewhere on how to install these tools on your development
machine.&lt;/p&gt;

&lt;p&gt;Next I will install ember-cli&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm install -g ember-cli
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Confirm that you have &lt;code&gt;ember-cli&lt;/code&gt; installed:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;ember --version
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You should see:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;version: 0.0.27
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Or a greater version.&lt;/p&gt;

&lt;h2&gt;Setting up our project&lt;/h2&gt;

&lt;p&gt;For this project we will keep our Rails and our Ember apps in separate
directories with a top-level directory containing the two. We&amp;#39;ll have to
do some project generating and renaming. &lt;/p&gt;

&lt;p&gt;I first create a new top-level directory:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;mkdir bostonember
cd bostonember
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we&amp;#39;re going to generate our Rails project:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;rails new bostonember -B -S -d postgresql
mv bostonember rails
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note how we renamed the directory the Rails project is in to &lt;code&gt;rails&lt;/code&gt;. This
does not affect anything in that directory. If you do not have Postgres
on your machine omit &lt;code&gt;-d postgresql&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now the ember project:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;ember new bostonember
mv bostonember ember
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now it should be obvious why we moved the Rails project. We should now have
a structure like:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;bostonember
|- ember
|- rails
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s confirm that our ember app runs:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;cd ember
ember server
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In your browser visit &lt;code&gt;http://localhost:4200&lt;/code&gt; and you should see &amp;quot;Welcome to Ember.js&amp;quot;&lt;/p&gt;

&lt;p&gt;At this point you can put everything in your top level directory under
version control:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;git init
git add .
gc -m &amp;quot;Initial commit&amp;quot;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s make some modifications to our Rails app.&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;rm -rf rails/app/assets
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code&gt;rails/Gemfile&lt;/code&gt; remove the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;coffee-rails&lt;/li&gt;
&lt;li&gt;jquery-rails&lt;/li&gt;
&lt;li&gt;turbolinks&lt;/li&gt;
&lt;li&gt;jbuilder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now everything related to the Asset Pipeline is completely removed.&lt;/p&gt;

&lt;p&gt;Add the following to the &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;active_model_serializers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you don&amp;#39;t have Postgres on your machine you can set this for
Production only:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;group &lt;span class="symbol"&gt;:development&lt;/span&gt;, &lt;span class="symbol"&gt;:test&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;sqlite3&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

group &lt;span class="symbol"&gt;:production&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;pg&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Run &lt;code&gt;bundle install&lt;/code&gt; in your &lt;code&gt;rails&lt;/code&gt; directory. Let&amp;#39;s commit our
changes:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;git add .
gc -m &amp;quot;Removed asset pipeline and added active_model_serializers in Rails&amp;quot;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That wraps up Part 1. In Part 2 will focus on Ember and creating
some functionality in our app.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The other thing DHH mentioned</title>
    <link rel="alternate" href="/2014/05/06/the-other-thing-dhh-mentioned.html"/>
    <id>/2014/05/06/the-other-thing-dhh-mentioned.html</id>
    <published>2014-05-06T00:00:00Z</published>
    <updated>2014-05-06T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;By now &lt;a href="http://www.confreaks.com/videos/3315-railsconf-keynote"&gt;you&amp;#39;ve probably seen DHH&amp;#39;s Rails Conf 2014 Keynote&lt;/a&gt;. 
Love it or hate it, the one thing you can&amp;#39;t do is deny it got people&amp;#39;s attention. I wasn&amp;#39;t there, and I admit I reacted to Twitter
before actually viewing it. If you only listened on Twitter your
perception of the keynote is most likely that DHH is anti-testing. That
is very far from the truth. Go and watch the video, a lot of what he
talks about resonated with me. I still believe in &amp;quot;testing first&amp;quot; and
&amp;quot;red-green-refactor&amp;quot; but my style is not as dogmatic as some other&amp;#39;s. I
rely on integration tests quite a bit, and I don&amp;#39;t mind hitting the database
during unit tests. Slow tests that actually test how clients
use your app are much better than fast tests that actually test nothing.&lt;/p&gt;

&lt;p&gt;On a side-note, I would be interested to know what DHH thinks about BDD
as opposed to TDD, if he even thinks there is a difference. For me I
feel there is a distinct difference and I would characterize my style of
development as BDD.&lt;/p&gt;

&lt;p&gt;But I don&amp;#39;t want to talk about testing. I want to talk about the other
thing DHH came down on during his keynote: Design Patterns.&lt;/p&gt;

&lt;p&gt;Now before I get raked over the coals let me start by saying that
overall design patterns are great. It was the MVC(ish) and ActiveRecord
patterns that made Rails itself possible. When we speak in patterns it
becomes the lingua franca for programmers. I can jump from language to
language and can, with relative ease, recognize the patterns.&lt;/p&gt;

&lt;p&gt;However, in the Ruby/Rails communities we have gone overboard. Design
Patterns are the new Holy Grail of software development. A few
years ago people were very excited about TDD, as DHH said it was sold to
us as a necessary tool for &amp;quot;professional software development&amp;quot;. Now that
everybody just assumes TDD is happening the thought leaders went in
search of the next intellectually challenging concept to hold everyone
accountable for. This began to spring up maybe 2 years ago, at least
that&amp;#39;s when I started to notice it. Design pattern talks at conferences, books
dedicated to design patterns, podcasts talking about patterns, blog
posts (of which we have written a few), code schools teaching design
patterns - developers ate them up. The Ruby community was hungry for
patterns.&lt;/p&gt;

&lt;p&gt;There feels to me a loss of pragmatism in the ruby community. I think
this is due to there being no major problems to solve in Rails anymore.
Developers are always looking for problems to solve, and in this case
the hive mind has decided to hyper optimize on patterns.&lt;/p&gt;

&lt;p&gt;I get it, they are intellectually stimulating. Implementing a pattern to
&amp;quot;perfection&amp;quot; will give a developer that sense of self-satisfaction. &amp;quot;My
code is clean&amp;quot;. Until the next feature comes in and you have to blow up
what you&amp;#39;ve been perfecting.&lt;/p&gt;

&lt;p&gt;Be pragmatic. Don&amp;#39;t follow the trends just because some guys behind a
microphone say you should.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Preserve scrolling position in Ember Apps</title>
    <link rel="alternate" href="/2014/05/05/preserve-scroll-position-in-ember-apps.html"/>
    <id>/2014/05/05/preserve-scroll-position-in-ember-apps.html</id>
    <published>2014-05-05T00:00:00Z</published>
    <updated>2014-05-05T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;If you have a long list of items on a page and a user follows a link
then goes back to that list, Ember will re-render the list and the user
loses their place. This can be annoying if there is a very long list of
items and the user is expected to be switching back and forth between
the list and the item.&lt;/p&gt;

&lt;p&gt;We can preserve the position by taking advantage of &lt;code&gt;didInsertElement&lt;/code&gt;
on the list&amp;#39;s view.&lt;/p&gt;

&lt;p&gt;&lt;a class="jsbin-embed"
href="http://emberjs.jsbin.com/nevaxipe/2/embed?output"&gt;Ember Starter
Kit&lt;/a&gt;&lt;script src="http://static.jsbin.com/js/embed.js"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: there seems to be a bug with the latest stable in Chrome where
the position is never reset if you hit the backbutton. In reality it is
but the position doesn&amp;#39;t render until you scroll. Canary seems OK as do
other browsers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the above example you can scroll down, click on an item, then head
back to the list and be in your original position. This is all done with
the following mixin:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; ScrollableMixin = Ember.Mixin.create({
  &lt;span class="key"&gt;scrollingTimeout&lt;/span&gt;: &lt;span class="integer"&gt;100&lt;/span&gt;,
  &lt;span class="function"&gt;bindScrolling&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;var&lt;/span&gt; self = &lt;span class="local-variable"&gt;this&lt;/span&gt;,
    &lt;span class="function"&gt;onScroll&lt;/span&gt; = &lt;span class="keyword"&gt;function&lt;/span&gt;() {
      Ember.run.debounce(self, self.runScrolled, self.scrollingTimeout);
    };

    Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(document).on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;touchmove.scrollable&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, onScroll);
    Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(window).on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;scroll.scrollable&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, onScroll);
  }.on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;didInsertElement&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),

  &lt;span class="function"&gt;unbindScrolling&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(window).off(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;.scrollable&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(document).off(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;.scrollable&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;willDestroyElement&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),

  &lt;span class="function"&gt;preservePos&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(window).scrollTop(&lt;span class="local-variable"&gt;this&lt;/span&gt;.getWithDefault(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller.currentPos&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="integer"&gt;0&lt;/span&gt;));
  }.on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;didInsertElement&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),

  &lt;span class="function"&gt;runScrolled&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;var&lt;/span&gt; position = Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(document).height() - Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(window).scrollTop();
    &lt;span class="keyword"&gt;var&lt;/span&gt; viewportHeight = document.documentElement.clientHeight;
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller.currentPos&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(window).scrollTop());
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You then mix it into your list&amp;#39;s view:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;ThingsView = Ember.View.extend(ScrollableMixin);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Stop using Ember Appkit Rails</title>
    <link rel="alternate" href="/2014/05/04/stop-using-ember-appkit-rails.html"/>
    <id>/2014/05/04/stop-using-ember-appkit-rails.html</id>
    <published>2014-05-04T00:00:00Z</published>
    <updated>2014-05-04T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;A few months ago I released a gem called &lt;a href="https://github.com/dockyard/ember-appkit-rails"&gt;Ember Appkit
Rails&lt;/a&gt;. Let me start by
apologizing for its existence. For those that began projects around
eak-rails it started with good intentions and felt right at first but we
have abandoned the gem at DockYard.&lt;/p&gt;

&lt;p&gt;eak-rails was/is a merging of &lt;a href="https://github.com/stefanpenner/ember-app-kit"&gt;Ember App
Kit&lt;/a&gt; and Rails. It does
some heavy monkey patching to Rails&amp;#39; Asset Pipeline to give as much
project hierarchical power to your Ember code as your Rails code
enjoys.&lt;/p&gt;

&lt;p&gt;We used eak-rails in smaller projects, and intro to Ember courses. In
small doses eak-rails felt right. However, when the surface area of an
application increased eak-rails did not scale well. Having your Ember
and Rails files mixed into the same directories created more problems
than it solved.&lt;/p&gt;

&lt;p&gt;This week I will be focusing on how we are building Ember apps
backed with Rails at DockYard. Part of that will be in-line with what
fellow DockYarder &lt;a href="https://www.youtube.com/watch?v=ceFNLdswFxs&amp;amp;t=1h8m20s"&gt;Dan McClain presented at Boston Ember last
month&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For eak-rails users, we have not abandoned you. Anybody refusing to
migrate we&amp;#39;ll continue any &lt;strong&gt;critical&lt;/strong&gt; bug fixes but no new features.
We actually sunset the gem about 2 months ago.&lt;/p&gt;

&lt;p&gt;ember-cli is the future.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Guarding with arrays</title>
    <link rel="alternate" href="/2014/05/03/guarding-with-arrays.html"/>
    <id>/2014/05/03/guarding-with-arrays.html</id>
    <published>2014-05-03T00:00:00Z</published>
    <updated>2014-05-03T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This week I applied a pattern I&amp;#39;ve been using for years to two
separate pull requests from our devs. (I like to review almost all of the
code that DockYard devs write)&lt;/p&gt;

&lt;p&gt;In both cases I was able to help them refactor their code to use an
enumerator as code guards instead of conditional statements. Let&amp;#39;s take a
look at each example:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;users = &lt;span class="constant"&gt;User&lt;/span&gt;.where(&lt;span class="key"&gt;type&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;employee&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)

&lt;span class="keyword"&gt;if&lt;/span&gt; users.any?
  users.each &lt;span class="keyword"&gt;do&lt;/span&gt; |user|
    &lt;span class="comment"&gt;# ...&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this first example the &lt;code&gt;each&lt;/code&gt; is avoided if the &lt;code&gt;users&lt;/code&gt;
collection is empty. However, with arrays the enumerator only acts on each
member of the collection so we don&amp;#39;t need to avoid if the collection is
empty. We can refactor the above code into something like this:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;User&lt;/span&gt;.where(&lt;span class="key"&gt;type&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;employee&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).each &lt;span class="keyword"&gt;do&lt;/span&gt; |user|
   &lt;span class="comment"&gt;# ...&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Much cleaner!&lt;/p&gt;

&lt;p&gt;The next example may not be as straight forward but as we&amp;#39;ll see with
Ruby we can clean this up nicely.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;if&lt;/span&gt; params[&lt;span class="symbol"&gt;:ids&lt;/span&gt;]
  params[&lt;span class="symbol"&gt;:ids&lt;/span&gt;].each &lt;span class="keyword"&gt;do&lt;/span&gt; |id|
    &lt;span class="comment"&gt;# ...&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here we have a situation where &lt;code&gt;params[:ids]&lt;/code&gt; could contain a collection
of data. Or it could be &lt;code&gt;nil&lt;/code&gt;. Because of this we cannot just assume we
can always iterate over that value. In Ruby we can create a new &lt;code&gt;Array&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Array([&lt;span class="integer"&gt;1&lt;/span&gt;,&lt;span class="integer"&gt;2&lt;/span&gt;,&lt;span class="integer"&gt;3&lt;/span&gt;])
&lt;span class="comment"&gt;# =&amp;gt; [1,2,3]&lt;/span&gt;

Array(&lt;span class="predefined-constant"&gt;nil&lt;/span&gt;)
&lt;span class="comment"&gt;# =&amp;gt; []&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Notice in the second example that when we pass &lt;code&gt;nil&lt;/code&gt; it creates an
&lt;strong&gt;empty array&lt;/strong&gt;. Knowing this we can refactor our code:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Array(params[&lt;span class="symbol"&gt;:ids&lt;/span&gt;]).each &lt;span class="keyword"&gt;do&lt;/span&gt; |id|
  &lt;span class="comment"&gt;# ...&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you find yourself putting guards around enumerators odds are you can
refactor in a similar manner as I&amp;#39;ve shown above.&lt;/p&gt;

&lt;p&gt;BTW, I&amp;#39;ve been using this pattern for years but I don&amp;#39;t know if there is
an actual name for this. If you do please share!&lt;/p&gt;
</content>
  </entry>
</feed>
<div class='push--footer'></div><footer><div class='l-wrap'><div class='l-footer-group'><h3 class='footer-group__title'>EVENTS</h3><a class="footer__event--wgr" target="_blank" href="http://wickedgoodruby.com/">Wicked Good Ruby Conf</a><a class="footer__event--ember" target="_blank" href="http://www.meetup.com/Boston-Ember-js/">Boston Ember.js Meetup</a><a class="footer__event--ux" target="_blank" href="http://www.meetup.com/uxboston/">UX Boston Meetup</a><a class="footer__event--openhack" target="_blank" href="http://openhack.github.io/boston/">OpenHack Boston</a></div><div class='l-footer-group'><a href="/"><h3 class='footer-group__title'>BLOG</h3></a>
<a class="footer__post" href="/2014/05/08/building-an-ember-app-with-rails-part-2.html"><strong>Building an Ember App with Rails Part 2</strong><h6 class='footer-desc'>Writing our first ember test</h6></a>
<a class="footer__post" href="/2014/05/07/building-an-ember-app-with-rails-part-1.html"><strong>Building an Ember App with Rails Part 1</strong><h6 class='footer-desc'>ember-cli & Rails</h6></a>
<a class="footer__post" href="/2014/05/06/the-other-thing-dhh-mentioned.html"><strong>The other thing DHH mentioned</strong><h6 class='footer-desc'>The Design Pattern Cargo Culting of the Ruby Community</h6></a></div><div class='l-footer-group'><a href="http://dockyard.com/hire-us"><h3 class='footer-group__title'>CONTACT</h3></a><h6 class='footer-desc'>DockYard HQ is located in Boston. Stop in sometime and meet our team!</h6><a class="footer__address" target="_blank" href="http://goo.gl/maps/zBGfn"><h6>DockYard Inc.<br>101 Tremont Street<br>Suite 200<br>Boston, MA 02108</h6></a>
<a class="text-link" href="http://dockyard.com/hire-us">Get in touch.</a><div class='social-links--footer'><a target="_blank" data-icon="#" class="social-link" href="https://twitter.com/dockyard"><span class='is-hidden'>Twitter</span></a>
<a target="_blank" data-icon="★" class="social-link" href="https://github.com/dockyard"><span class='is-hidden'>GitHub</span></a>
<a target="_blank" data-icon="✒" class="social-link" href="http://reefpoints.dockyard.com/atom.xml"><span class='is-hidden'>RSS</span></a></div></div></div></footer><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>