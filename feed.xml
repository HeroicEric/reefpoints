<!DOCTYPE html><html><head><title>DockYard</title><link href="/stylesheets/all-6e6b059f.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-ce68a29a.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta charset='utf-8'><meta content='DockYard.com - ' name='description'><link href='//cloud.typography.com/6496052/702882/css/fonts.css' rel='stylesheet' type='text/css'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/favicon.png' rel='shortcut icon' type='image/x-icon'><link href='/favicon.png' rel='icon' type='image/x-icon'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                             ..
                                           .O.
                                       .:OO.
                                      :OOO.
                                    :OOO:.
                         ...      :OOOO:
                   ..ZOOOOOOOOO..OZ.O.
                   OOOOOOOOOOOOOOOOI
                  OOOOOOOOOOOOOOOOI,
                 OOOOOOOO. .OOOOOOOO:
                 OOOOOOOO   OOOOOOOOO:
                OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO
                OOOOOO?:   .OOOOOOOOO
               .OOOOO      OOOOOOOOOO
,OO ZO,        OOOOO,     OOOOOOOOOO+
 OOOOO.        OOOOO     OOOOOOOOOOO+
  OOO?        OOOOO     .OOOOOOOOOOO:
   OOO,      OOOOO.    .OOOOOOOOOOOO
    OOOOOOOOOOOOO.    .OOOOOOOOOOOO.
     OOOOOOOOOOOO.  .OOOOOOOOOOOOO.
      8OOOOOOOOOOOOOOOOOOOOOOOODO:
         :OOOOOOOOOOOOOOOOOOOO::

--></head><body class='feed'><header><div class='extended-nav-wrap'><div class='l-wrap--wide'><nav class='extended-nav'><a class="extended-nav--logo" data-icon="⌂" href="http://dockyard.com/"><span class='is-hidden'>Home</span></a>
<a class="extended-nav--close" data-icon="X" href="#"><span class='is-hidden'>Close</span></a><div class='extended-nav__items'><div class='extended-nav__items--mobile'><a class="extended-nav__item--work extended-nav__item" href="#">Work</a><nav class='work-nav--mobile'><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong></a></nav></div><a class="extended-nav__item" href="http://dockyard.com/team">Our Team</a><a class="extended-nav__item" href="http://dockyard.com/process">Process</a><a class="extended-nav__item" href="http://dockyard.com/community">Community</a><a class="extended-nav__item active" href="/">Blog</a><a class="extended-nav__item" href="http://dockyard.com/hire-us">Hire Us</a></div></nav><nav class='work-nav'><h6>Selected Work</h6><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong><p>Credit card advice from real people.</p></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong><p>You should be training. Right now.</p></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong><p>Ask officials questions on city, state, and federal levels.</p></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong><p>How technology helped repeal the #TechTax.</p></a></nav></div></div><nav class='main-nav-wrap'><div class='main-nav l-wrap--wide'><a class="logo" href="http://dockyard.com">DockYard</a><a class="club-sandwich" data-icon="☰" href="#"><span class='is-hidden'>Navigation</span></a></div></nav></header><div class='push--header'></div><div class='l-wrap--blog'><a href="/"><strong class='logo--blog'>ReefPoints</strong><strong class='logo--blog__tagline'>Blog</strong></a><nav class='blog-nav'><a class="blog-nav__item " href="/">Posts</a><a class="blog-nav__item " href="/categories.html">Categories</a><a class="blog-nav__item " href="/authors.html">Authors</a></nav></div><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-03-30T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Magic behind ES6 Generators</title>
    <link rel="alternate" href="/2014/03/30/magic_behind_es6_generators.html"/>
    <id>/2014/03/30/magic_behind_es6_generators.html</id>
    <published>2014-03-30T00:00:00Z</published>
    <updated>2014-03-30T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Overview&lt;/h2&gt;

&lt;p&gt;The next version of JavaScript (ES6 or ES.next) is going to have a lot of
great features built in that are going to make developer&amp;#39;s life much easier.
&lt;a href="http://wiki.ecmascript.org/doku.php?id=strawman:promises"&gt;Promises&lt;/a&gt;,
&lt;a href="http://wiki.ecmascript.org/doku.php?id=harmony:modules"&gt;Modules&lt;/a&gt;,
&lt;a href="http://wiki.ecmascript.org/doku.php?id=harmony:weak_maps"&gt;WeakMaps&lt;/a&gt;,
&lt;a href="http://wiki.ecmascript.org/doku.php?id=harmony:generators"&gt;Generators&lt;/a&gt; to name a few. In this
post I want to talk about generators.&lt;/p&gt;

&lt;p&gt;Generators are objects that encapsulate suspended execution context. What the heck does it mean?
In other words, generators allow you to pause execution of your code and return a value.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say you need to write a &lt;code&gt;cubic&lt;/code&gt; function (for any given number, calculate a cubic number)
and then print it out.&lt;/p&gt;

&lt;p&gt;Code without generators for 10 numbers:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="function"&gt;out&lt;/span&gt;(n) {
  console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Cubic number:&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, n);
}

&lt;span class="keyword"&gt;function&lt;/span&gt; *cube(n) {
  n = n * &lt;span class="integer"&gt;3&lt;/span&gt;;
  out(n);
}

&lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;var&lt;/span&gt; i = &lt;span class="integer"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class="integer"&gt;10&lt;/span&gt;; i++) {
  cube(i);
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Code with ES6 generators for 10 numbers:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; *cube(n) {
  &lt;span class="keyword"&gt;var&lt;/span&gt; i = &lt;span class="integer"&gt;0&lt;/span&gt;, j = n;
  &lt;span class="keyword"&gt;while&lt;/span&gt; (i &amp;lt; n) {
    i++;
    j = j * &lt;span class="integer"&gt;3&lt;/span&gt;;
    yield j;
  }
}

&lt;span class="keyword"&gt;var&lt;/span&gt; c = cube(&lt;span class="integer"&gt;10&lt;/span&gt;);
&lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;var&lt;/span&gt; i = &lt;span class="integer"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class="integer"&gt;10&lt;/span&gt;; i++) {
  console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Cubic number:&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, c.next().value);
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Can you spot the difference? Generator represents a sequence of numbers and every time you call
&lt;code&gt;next()&lt;/code&gt; it gives you the next number in the sequence (it actually gives you an object back
with two properties: &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;done&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;c.next(); &lt;span class="comment"&gt;// =&amp;gt; { value: 3, done: false }&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once the limit is reached, generator will return:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;c.next(); &lt;span class="comment"&gt;// =&amp;gt; { value: undefined, done: true }&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Pretty cool, eh?&lt;/p&gt;

&lt;p&gt;Note, that generators look &lt;em&gt;just&lt;/em&gt; like functions, but with &lt;code&gt;*&lt;/code&gt;s:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// regular function&lt;/span&gt;
&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="function"&gt;cube&lt;/span&gt;()  {}

&lt;span class="comment"&gt;// es6 generator&lt;/span&gt;
&lt;span class="keyword"&gt;function&lt;/span&gt; *cube() {}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;#39;re a Python developer, generators and &lt;code&gt;yield&lt;/code&gt; are not new to you. But it&amp;#39;s a big step forward
for JavaScript.&lt;/p&gt;

&lt;h2&gt;For-Of&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;for of&lt;/code&gt; loop is a new iteration construct in ES6 which supports generators. This is really for
performance purposes. Instead of returning a full array, you can just return a generator which
lazily gives values back on each iteration. That decreases memory allocation and you can express
infinite data structures (since no array allocation is needed).&lt;/p&gt;

&lt;p&gt;A really interesting use case for generators is async operations:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;spawn(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
  &lt;span class="keyword"&gt;var&lt;/span&gt; users = yield db.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  &lt;span class="keyword"&gt;var&lt;/span&gt; posts = yield db.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;posts&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;spawn&lt;/code&gt; is a function in &lt;a href="http://nodejs.org"&gt;node.js&lt;/a&gt; that allows you to create child processes.
You can read about it &lt;a href="http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;spawn&lt;/code&gt; hands control over the function to the scheduler, which knows that the function will &lt;code&gt;yield&lt;/code&gt;
promises and will send the values back as soon as the promises are going to be resolved (fulfilled).&lt;/p&gt;

&lt;p&gt;This is really powerful.&lt;/p&gt;

&lt;h2&gt;Availability&lt;/h2&gt;

&lt;p&gt;If you really want to use this feature, you&amp;#39;re going to have to use transpilers, such as &lt;a href="https://github.com/google/traceur-compiler"&gt;Traceur&lt;/a&gt;
or &lt;a href="https://github.com/facebook/regenerator"&gt;Regenerator&lt;/a&gt;. The reason for that is two new language keywords
introduced by ES6 generators: &lt;code&gt;yield&lt;/code&gt; and &lt;code&gt;function *&lt;/code&gt;. There&amp;#39;s a really good blog post about &lt;a href="http://gu.illau.me/posts/polyfilling-generators/"&gt;polyfilling generators&lt;/a&gt;
that goes in depth about how transpilers deal with the new syntax.&lt;/p&gt;

&lt;p&gt;Native implementations of generators are available in Firefox and Chrome Canary
(you will need to enable &lt;a href="chrome://flags/#enable-javascript-harmony"&gt;harmony experimental flag&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I encourage you to play around with the generators and get familiar with the syntax because in couple of
years from now, we all will be writing code using generators (hopefully).&lt;/p&gt;

&lt;p&gt;P.S.&lt;/p&gt;

&lt;p&gt;Great article about &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.7#Generators"&gt;ES6 generators&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember Conf picks up where the Rails community left off</title>
    <link rel="alternate" href="/2014/03/17/emberconf-picks-ups-where-the-rails-community-left-off.html"/>
    <id>/2014/03/17/emberconf-picks-ups-where-the-rails-community-left-off.html</id>
    <published>2014-03-17T00:00:00Z</published>
    <updated>2014-03-17T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;#39;m writing this on my flight from Portland back to Boston. On this
plane I count at least 12 other attendees of the first &lt;a href="http://emberconf.com"&gt;Ember Conference&lt;/a&gt;.
A lot has been said about Ember in the past year but if this conference
was any indicator big things are happening and even bigger things are
going to happen.&lt;/p&gt;

&lt;p&gt;For me, the biggest take away from any conference is the people and
this conference was no exception. In fact, Ember Conf is now my gold
standard for a technology event. The only possible comparison I have is
how early Rails Confs felt. There is an energy and a scary amount of
creativity happening in the Ember community right now. Much like the
community felt around Rails back in 2006 - 2009 there is the
understanding that those doing Ember now are going to be shaping the
future of the web. Whether that is setting the bar higher for how users
will want to consume web applications in the future or being a large
influence on what the future of the web standards themselves will be, Ember
is the only web technology today that is positioned in the same place
that I feel Rails was years ago. We are the rebels. We are the
counter-culture. Ember is the future.&lt;/p&gt;

&lt;p&gt;But, we&amp;#39;re learning from the mistakes of the past. Where the Rails
community was the counter-culture of its time it suffered from a male
(and very juvenile) dominated culture. This culture was the result of
the &amp;quot;RockStar&amp;quot; mentality set forth by its leader(s). Ember, in contrast,
began its very first conference with Yehuda Katz and Tom Dale addressing
the entire crowd with their desire for Ember to be an open and diverse
community.&lt;/p&gt;

&lt;p&gt;The conference was very well organized, big shoutout to Leah Silber at Tilde. She
put on a great conference, I&amp;#39;m proud that my company had the opportunity
to help make it happen.&lt;/p&gt;

&lt;p&gt;From a technology perspective &lt;strong&gt;huge&lt;/strong&gt; things are on the horizon for
Ember. If you have been on the cusp of getting involved you will be
kicking yourself later for not doing so now. If you are already building
in Ember nearly all of the pain-points that have existed will be
addressed in the next 6 months. Testing as a first class citizen,
fastest template rendering of any JavaScript framework/tool out there,
animation support, query params, a standardized project structure and
build tool, and there was even talk of how we&amp;#39;re going to package and
distribute dependencies. Ember Conf was a continuous roll of one great
talk after another loaded with the best tech on the web. I&amp;#39;ve already
really enjoyed writing Ember apps for the past year, the next year will
be amazing.&lt;/p&gt;

&lt;p&gt;I realize at this point the article smacks of cheerleading optimism. How
can it be this good? The real secret weapon of any open source software
is its community. After this week I can tell you that I have not felt
this way about a community since the early days of Rails. There is
something very special happening here. It isn&amp;#39;t just me. &lt;a href="https://twitter.com/search?q=%23emberconf&amp;amp;src=tyah"&gt;Go search
Twitter for &lt;code&gt;#EmberConf&lt;/code&gt; and see for
yourself&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;People are crying, having
spiritual awakenings and overall life-affirming moments at &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;
… Think I want whatever’s in their punch&lt;/p&gt;&amp;mdash; Rob Conery
(@robconery) &lt;a
href="https://twitter.com/robconery/statuses/449041727240695808"&gt;March
27, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;IT’S HAPPENING!! HTMLbars
eliminates &amp;lt;script&amp;gt; tags, {{bindAttr}}, and gives Ember the
fastest bound templates on the planet. &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Tom Dale (@tomdale) &lt;a
href="https://twitter.com/tomdale/statuses/448621833953083392"&gt;March 26,
2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;This scene with &lt;a
href="https://twitter.com/tomdale"&gt;@tomdale&lt;/a&gt; &lt;a
href="https://twitter.com/tehviking"&gt;@tehviking&lt;/a&gt; and &lt;a
href="https://twitter.com/fivetanley"&gt;@fivetanley&lt;/a&gt; sums up &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;
- so much love ❤️❤️❤️ &lt;a
  href="http://t.co/AEUEeiq97i"&gt;pic.twitter.com/AEUEeiq97i&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Dan Gebhardt (@dgeb) &lt;a
href="https://twitter.com/dgeb/statuses/449088566962814976"&gt;March 27,
2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Ember makes you a badass
web developer. The productivity gains are unparalleled. Page flow is
first class. &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;
&lt;a
href="http://t.co/DlKqmmdVEU"&gt;pic.twitter.com/DlKqmmdVEU&lt;/a&gt;&lt;/p&gt;&amp;mdash;
John K. Paul (@johnkpaul) &lt;a
href="https://twitter.com/johnkpaul/statuses/448510256097001472"&gt;March
25, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Notes on the morning &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;
keynote by &lt;a href="https://twitter.com/wycats"&gt;@wycats&lt;/a&gt; &lt;a
href="https://twitter.com/tomdale"&gt;@tomdale&lt;/a&gt; &lt;a
href="http://t.co/rYKEruaxRe"&gt;pic.twitter.com/rYKEruaxRe&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Michael Chan (@chantastic) &lt;a
href="https://twitter.com/chantastic/statuses/448517744900976641"&gt;March
25, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;hug &lt;a
href="https://twitter.com/tomdale"&gt;@tomdale&lt;/a&gt; achievement unlocked &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;
&lt;a
href="http://t.co/nLOBPGJwKL"&gt;pic.twitter.com/nLOBPGJwKL&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Ben Rosas (@ballPtPenguin) &lt;a
href="https://twitter.com/ballPtPenguin/statuses/449000521211203586"&gt;March
27, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&lt;a
href="https://twitter.com/ebryn"&gt;@ebryn&lt;/a&gt; &lt;a
href="https://twitter.com/EmberConf"&gt;@EmberConf&lt;/a&gt; Such a wonderful
experience. One of the best conferences I&amp;#39;ve ever attended, it was
like one big family finally united.&lt;/p&gt;&amp;mdash; Kasper Tidemann
(@KasperTidemann) &lt;a
href="https://twitter.com/KasperTidemann/statuses/449044965855723520"&gt;March
27, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;
</content>
  </entry>
  <entry>
    <title>Using Database Templates in Rails</title>
    <link rel="alternate" href="/2014/03/03/using-database-templates.html"/>
    <id>/2014/03/03/using-database-templates.html</id>
    <published>2014-03-03T00:00:00Z</published>
    <updated>2014-03-03T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Using Postgres as your application&amp;#39;s database? If so, there is a handy
configuration option that you may not be aware about. The &lt;code&gt;pg&lt;/code&gt; gem provides a &lt;code&gt;template&lt;/code&gt; option that
allows for copying already existing data into an application as
long as you have matching schema. &lt;/p&gt;

&lt;p&gt;To add this functionality, simply add the &lt;code&gt;template&lt;/code&gt; option inside &lt;code&gt;config/database.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight yaml "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="key"&gt;development&lt;/span&gt;:
  &lt;span class="key"&gt;adapter&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;postgresql&lt;/span&gt;&lt;/span&gt;
  &lt;span class="key"&gt;encoding&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;unicode&lt;/span&gt;&lt;/span&gt;
  &lt;span class="key"&gt;database&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;myapp_development&lt;/span&gt;&lt;/span&gt;
  &lt;span class="key"&gt;template&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;my_template&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s go through a quick example. Suppose we have an existing database, &lt;code&gt;food&lt;/code&gt;, and it contains an abundant amount of data with the
following schema:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;foods: name (string), category_id (integer)
categories: category (string)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To use the &lt;code&gt;food&lt;/code&gt; database for our application, we are going to
create a template by specifying our database with the following command: &lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;createdb -T food my_food_template
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We must now set up our Rails application and make sure that our schema matches
that of our new template. Our Rails models will mimick &lt;code&gt;food&lt;/code&gt;. Having done
that, we can now modify our &lt;code&gt;config/database.yml&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight yaml "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="key"&gt;database&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;myapp_development&lt;/span&gt;&lt;/span&gt;
&lt;span class="key"&gt;template&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;my_food_template&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Run migrations and voilà! Our database has been populated and is ready to be used.&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;gt; psql myapp_development

&amp;gt; select * from foods;
  id |  name  | category_id
  --------------------------
  1   apple       1
  2   banana      1
  3   spinach     2
  4   ice cream   3

&amp;gt; select * from categories;
  id |  category
  --------------
  1   fruit
  2   vegetable
  3   other
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>A Simple Ember Data Route</title>
    <link rel="alternate" href="/2014/03/03/a-simple-ember-data-route.html"/>
    <id>/2014/03/03/a-simple-ember-data-route.html</id>
    <published>2014-03-03T00:00:00Z</published>
    <updated>2014-03-03T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;When working with an Ember Data model it is easy to forget to properly
handle the teardown of that model. For example, if you are creating a
new model and the user hits the backbutton that model is still in the
local &lt;code&gt;store&lt;/code&gt;. Or if a user edits a model and decides to click the
&lt;code&gt;Cancel&lt;/code&gt; button or clicks a link that transitions out of this route
without saving the model. A basic approach can be as simple as:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Ember.DSModelRoute = Ember.Route.extend({
  &lt;span class="function"&gt;deactivate&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;var&lt;/span&gt; model = &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller.model&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    model.rollback();
    &lt;span class="keyword"&gt;if&lt;/span&gt; (model.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;isNew&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)) {
      model.deleteRecord();
    }
  },
  &lt;span class="key"&gt;actions&lt;/span&gt;: {
    &lt;span class="function"&gt;willTransition&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(transition) {
      &lt;span class="keyword"&gt;var&lt;/span&gt; model = &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller.model&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
      &lt;span class="keyword"&gt;if&lt;/span&gt; (model.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;isDirty&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &amp;amp;&amp;amp; !confirm(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;You have unsaved changes. They will be lost if you continue!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)) {
        transition.abort();
      }
    }
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Routes inherited from &lt;code&gt;Ember.DSModelRoute&lt;/code&gt; will always clean up after themselves. If the user has unsaved changes and attempts to leave the current route 
the app will guard against the transition and allow the user to confirm with a notice that changes will be lost.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Native App Developers: We Can Help You</title>
    <link rel="alternate" href="/2014/02/07/native-app-developers-we-can-help-you.html"/>
    <id>/2014/02/07/native-app-developers-we-can-help-you.html</id>
    <published>2014-02-07T00:00:00Z</published>
    <updated>2014-02-07T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;If you have an existing app, and are looking for a server component,
whether it be adding a syncing service to your app, building out a web
version to extend your user experience, or need a site to showcase your
app, we have both the design and development resources to make that
happen.&lt;/p&gt;

&lt;p&gt;You might have realized that iCloud doesn&amp;#39;t fit your needs, or you want
a web application that interacts with your app. We can build your API to
fit your exact needs, so you don&amp;#39;t need to fight iCloud to fit your
needs. You may be looking to build out a new RSS service that needs to
parse and cache RSS feeds. We have the experience and resources that
will help you bring a server heavy component to your app.&lt;/p&gt;

&lt;p&gt;You may have users looking to use your application when they aren&amp;#39;t on
their phone. We can design and build a rich web application that brings your
app to the browser without losing the spirit of your app. You might need
a marketing site with video demos and screenshots of your app. We can
design and build a site that really shows off your application.&lt;/p&gt;

&lt;p&gt;If any of these sound like you, you should &lt;a href="http://dockyard.com/hire-us"&gt;get in touch with
us&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Announcing PostgresExt-PostGIS</title>
    <link rel="alternate" href="/2014/02/07/announcing-postgres_ext-postgis.html"/>
    <id>/2014/02/07/announcing-postgres_ext-postgis.html</id>
    <published>2014-02-07T00:00:00Z</published>
    <updated>2014-02-07T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Today I released the first version of
&lt;a href="https://github.com/dockyard/postgres_ext-postgis"&gt;postgres_ext-postgis&lt;/a&gt;, which
extends ActiveRecord to support PostGIS data types and some querying.
This is definitely a beta release, but ready to the point where people
can play around with it.&lt;/p&gt;

&lt;h2&gt;Migrations&lt;/h2&gt;

&lt;p&gt;With postgres_ext-postgis, you can easily add geometry columns:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;create_table &lt;span class="symbol"&gt;:districts&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt; |t|
  t.geometry &lt;span class="symbol"&gt;:district_boundries&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;#39;d like to include your projection or geometry type, just include
them as options to your column:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;create_table &lt;span class="symbol"&gt;:districts&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt; |t|
  t.geometry &lt;span class="symbol"&gt;:district_boundries&lt;/span&gt;, &lt;span class="key"&gt;spatial_type&lt;/span&gt;: &lt;span class="symbol"&gt;:multipolygon&lt;/span&gt;, &lt;span class="key"&gt;srid&lt;/span&gt;: &lt;span class="integer"&gt;4326&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Type Casting&lt;/h2&gt;

&lt;p&gt;Your geometry columns will be typecasted into
&lt;a href="http://dazuma.github.io/rgeo/"&gt;RGeo&lt;/a&gt; objects. You can set your
attributes with RGeo objects or EWKT/EWKB strings. EWKT/EWKB strings
will be converted to RGeo objects:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;user.location = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;SRID=4623;POINT(1 1)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Querying&lt;/h2&gt;

&lt;p&gt;For now, the only added querying method for ActiveRecord is &lt;code&gt;contains&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;District&lt;/span&gt;.where.contains(&lt;span class="key"&gt;district_boundries&lt;/span&gt;: user.location)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above query will utilize PostGIS&amp;#39;s &lt;code&gt;ST_CONTAINS&lt;/code&gt; to see if the
&lt;code&gt;district_boundries&lt;/code&gt; column contains the &lt;code&gt;user.location&lt;/code&gt;. I plan to add
a convience method to convert EWKT strings to RGeo object, something
like &lt;code&gt;PostgreExt.geom(&amp;#39;SRID=4623;POINT(1 1)&amp;#39;)&lt;/code&gt;, to make generating
queries from, say, a mobile user&amp;#39;s current location a bit easier.&lt;/p&gt;

&lt;p&gt;As I get feedback and use postgres_ext-postgis, more features will get
added. Stay tuned!&lt;/p&gt;
</content>
  </entry>
</feed>
<div class='push--footer'></div><footer><div class='l-wrap'><div class='l-footer-group'><h3 class='footer-group__title'>EVENTS</h3><a class="footer__event--wgr" target="_blank" href="http://wickedgoodruby.com/">Wicked Good Ruby Conf</a><a class="footer__event--ember" target="_blank" href="http://www.meetup.com/Boston-Ember-js/">Boston Ember.js Meetup</a><a class="footer__event--ux" target="_blank" href="http://www.meetup.com/uxboston/">UX Boston Meetup</a><a class="footer__event--openhack" target="_blank" href="http://openhack.github.io/boston/">OpenHack Boston</a></div><div class='l-footer-group'><a href="/"><h3 class='footer-group__title'>BLOG</h3></a>
<a class="footer__post" href="/2014/03/30/magic_behind_es6_generators.html"><strong>Magic behind ES6 Generators</strong><h6 class='footer-desc'>Overview of ES6 generators</h6></a>
<a class="footer__post" href="/2014/03/17/emberconf-picks-ups-where-the-rails-community-left-off.html"><strong>Ember Conf picks up where the Rails community left off</strong><h6 class='footer-desc'>A summary of the first Ember Conference</h6></a>
<a class="footer__post" href="/2014/03/03/using-database-templates.html"><strong>Using Database Templates in Rails</strong><h6 class='footer-desc'>Discover a helpful Postgres config option</h6></a></div><div class='l-footer-group'><a href="http://dockyard.com/hire-us"><h3 class='footer-group__title'>CONTACT</h3></a><h6 class='footer-desc'>DockYard HQ is located in Boston. Stop in sometime and meet our team!</h6><a class="footer__address" target="_blank" href="http://goo.gl/maps/zBGfn"><h6>DockYard Inc.<br>101 Tremont Street<br>Suite 200<br>Boston, MA 02108</h6></a>
<a class="text-link" href="http://dockyard.com/hire-us">Get in touch.</a><div class='social-links--footer'><a target="_blank" data-icon="#" class="social-link" href="https://twitter.com/dockyard"><span class='is-hidden'>Twitter</span></a>
<a target="_blank" data-icon="★" class="social-link" href="https://github.com/dockyard"><span class='is-hidden'>GitHub</span></a>
<a target="_blank" data-icon="✒" class="social-link" href="http://reefpoints.dockyard.com/atom.xml"><span class='is-hidden'>RSS</span></a></div></div></div></footer><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>